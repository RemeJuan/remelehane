{"componentChunkName":"component---src-templates-post-js","path":"/posts/flutter-web-should-you-use-it/","result":{"data":{"sitePage":{"id":"SitePage /posts/flutter-web-should-you-use-it/"}},"pageContext":{"url":"/posts/flutter-web-should-you-use-it/","relativePath":"posts/flutter-web-should-you-use-it.md","relativeDir":"posts","base":"flutter-web-should-you-use-it.md","name":"flutter-web-should-you-use-it","frontmatter":{"title":"The Power of Flutter for Web Development: Should You Use it?","stackbit_url_path":"posts/flutter-web-should-you-use-it","date":"2023-05-15T09:00:00.000Z","excerpt":"","tags":["flutter","flutterweb","fluttermobile","flutterdevelopment"],"template":"post","thumb_img_path":"https://images.unsplash.com/photo-1550063873-ab792950096b?q=80&w=3540&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D","cover_image":"https://images.unsplash.com/photo-1550063873-ab792950096b?q=80&w=3540&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D","published_at":"2023-05-15T09:00:00.000Z","canonical_url":"https://remelehane.dev/posts/flutter-web-should-you-use-it/"},"html":"<p><img src=\"https://images.unsplash.com/photo-1550063873-ab792950096b?q=80&#x26;w=3540&#x26;auto=format&#x26;fit=crop&#x26;ixlib=rb-4.0.3&#x26;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"></p>\n<p>In the ever-evolving world of technology, developers are constantly seeking new frameworks and tools to streamline their workflow and create powerful applications. One such framework that has gained significant attention is Flutter. Known for its ability to build cross-platform mobile apps, Flutter has also made its way into web development. But the question remains: should you use Flutter for web development?</p>\n<p>In this comprehensive guide, we will explore the benefits and challenges of using Flutter for web development. We will delve into the technical aspects, performance considerations, SEO implications, and the overall suitability of Flutter for building web applications. By the end of this article, you will have a clear understanding of whether Flutter is the right choice for your web development needs.</p>\n<h2>What is Flutter?</h2>\n<p>Before diving into the specifics of using Flutter for web development, let's take a moment to understand what Flutter is and why it has gained such popularity. Flutter is an open-source UI framework developed by Google. It allows developers to build natively compiled applications for multiple platforms using a single codebase. With Flutter, you can create visually appealing and highly performant applications for Android, iOS, web, desktop, and beyond.</p>\n<h2>The Benefits of Flutter for Web Development</h2>\n<h3>1. Single Codebase, Multiple Platforms</h3>\n<p>One of the biggest advantages of using Flutter for web development is the ability to have a single codebase for multiple platforms. This means that you can write your web application once and deploy it seamlessly on Android, iOS, and the web. By eliminating the need to write platform-specific code, Flutter significantly reduces development time and effort.</p>\n<h3>2. Hot Reload for Rapid Iteration</h3>\n<p>Flutter's hot reload feature is a game-changer for developers. It allows you to see the changes you make in real-time without having to restart the application. This rapid iteration process saves valuable time and enhances productivity. Whether you are fine-tuning the UI or debugging a complex functionality, Flutter's hot reload feature enables you to iterate quickly and efficiently.</p>\n<h3>3. Robust Widget Support</h3>\n<p>Flutter offers a rich set of customizable UI widgets that make building web applications a breeze. From buttons and text fields to complex layouts and animations, Flutter provides a vast library of pre-built widgets. These widgets are highly flexible and can be easily customized to suit your application's specific needs. With Flutter, you have the power to create stunning and interactive user interfaces.</p>\n<h3>4. High Performance</h3>\n<p>Performance is a critical factor in web development, and Flutter excels in this area. Flutter's rendering engine, powered by Skia, ensures smooth animations and fast UI rendering. The framework is designed to deliver native-like performance, providing users with a seamless and responsive experience. Whether it's handling complex interactions or rendering data-intensive views, Flutter's performance capabilities are unmatched.</p>\n<h3>5. Backed by Google and a Growing Community</h3>\n<p>Flutter's association with Google provides developers with the assurance of a stable and well-supported framework. Google is actively invested in the growth and development of Flutter, continuously releasing updates and improvements. Additionally, Flutter has a thriving community of developers who contribute to its ecosystem. This community-driven approach ensures that you have access to a wealth of resources, tutorials, and libraries to enhance your web development journey.</p>\n<h2>Challenges of Using Flutter for Web Development</h2>\n<p>While Flutter offers numerous benefits for web development, it is important to consider the challenges as well. Here are some factors to keep in mind:</p>\n<h3>1. Web-Specific Performance Considerations</h3>\n<p>Flutter's performance on the web is a topic of debate among developers. While Flutter excels in mobile app development, its performance on the web may not be on par with traditional web frameworks. The initial load time and bundle size of a Flutter web application can be relatively higher compared to other web technologies. This can impact the user experience, especially on slower internet connections.</p>\n<h3>2. Search Engine Optimization (SEO)</h3>\n<p>SEO is a crucial aspect of web development, and Flutter's impact on SEO is a point of concern for many developers. Since Flutter renders content using a canvas, traditional web scrapers may struggle to analyze and index the content. This can affect the discoverability of your web application on search engines. However, it's worth noting that search engines are continuously evolving, and Google, being the creator of Flutter, is likely to address this issue in the future.</p>\n<h3>3. Limited Web-Specific Libraries</h3>\n<p>Flutter is still relatively new to web development, which means that the availability of web-specific libraries and packages may be limited compared to more mature web frameworks. This can pose challenges when you need to integrate specific functionalities or third-party services into your web application. However, the Flutter community is growing rapidly, and more web-focused libraries and packages are being developed.</p>\n<h3>4. Learning Curve for Web Developers</h3>\n<p>If you are primarily a web developer transitioning to Flutter, there may be a learning curve involved. Flutter uses the Dart programming language, which may be unfamiliar to web developers accustomed to JavaScript-based frameworks. However, with dedication and resources like Flutter's official documentation and online tutorials, web developers can quickly get up to speed and unlock the full potential of Flutter for web development.</p>\n<h3>5. Browser Compatibility</h3>\n<p>Browser compatibility is always a concern in web development, and Flutter is no exception. Although Flutter strives to provide a consistent experience across different browsers, there may be slight variations or compatibility issues to consider. It's important to thoroughly test your Flutter web application on various browsers and devices to ensure a seamless user experience for all users.</p>\n<h2>Is Flutter the Right Choice for Your Web Project?</h2>\n<p>Now that we have explored the benefits and challenges of using Flutter for web development, the question remains: should you use Flutter for your web project? The answer depends on several factors:</p>\n<h3>1. Project Requirements</h3>\n<p>Consider the specific requirements of your web project. If you need to build a web application that primarily targets web users and requires extensive SEO optimization, there may be other more mature web frameworks that better suit your needs. However, if your project requires cross-platform compatibility and you prioritize code reusability, Flutter can be a viable choice.</p>\n<h3>2. Development Timeline</h3>\n<p>If you are working on a tight deadline and need to launch your web application quickly, Flutter's single codebase and rapid development capabilities can be a significant advantage. However, if you have more time to invest in web development and prefer a framework with a larger ecosystem and established web-specific libraries, you may consider alternatives to Flutter.</p>\n<h3>3. Team Expertise</h3>\n<p>Evaluate the expertise and skill set of your development team. If your team is already proficient in Flutter or has experience with Dart, adopting Flutter for web development can be a smooth transition. However, if your team is primarily experienced in web technologies like JavaScript or frameworks like React or Angular, they may need some time to upskill and adapt to Flutter's unique development paradigm.</p>\n<h3>4. Long-Term Vision</h3>\n<p>Consider the long-term vision and scalability of your web project. If you anticipate expanding your application to multiple platforms in the future, Flutter can provide significant benefits in terms of code reusability and maintaining a consistent user experience. Flutter's versatility makes it a compelling choice for projects with long-term growth potential.</p>\n<h2>Conclusion</h2>\n<p>In conclusion, Flutter has emerged as a powerful framework for web development, offering a range of benefits such as a single codebase, rapid development, robust widget support, and high performance. However, it does come with its challenges, including web-specific performance considerations, SEO implications, and a learning curve for web developers.</p>\n<p>When deciding whether to use Flutter for web development, carefully evaluate your project's requirements, timeline, team expertise, and long-term vision. Consider the trade-offs and weigh them against the unique advantages that Flutter brings to the table. Ultimately, the decision should align with your project's goals and the needs of your target audience.</p>\n<p>Flutter's journey in the web development space is still evolving, and as the framework continues to mature, many of the challenges faced today may be addressed in the future. Whether you choose Flutter or opt for other web frameworks, remember that the success of your web project relies on sound development practices, user-centric design, and regular updates to adapt to evolving technologies and user expectations.</p>\n<p>Embrace the power of Flutter and explore its potential for web development. With the right approach and a deep understanding of its capabilities, Flutter can be a valuable asset in your quest to build exceptional web applications. Happy coding!</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/automated-flutter-unit-testing-with-github-actions/\">Automating Unit Testing for Your Flutter Project with GitHub Actions</a></li>\n<li><a href=\"https://remelehane.dev/posts/the-power-of-flutter/\">The Power of Flutter: Creating Cross-Platform Applications</a></li>\n</ul>","pages":[{"url":"/about/","relativePath":"about.md","relativeDir":"","base":"about.md","name":"about","frontmatter":{"title":"About","hide_title":false,"seo":{"title":"About | Reme Le Hane | Flutter Developer","description":"Flutter Developer","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Reme Le Hane | Flutter Developer","keyName":"property"},{"name":"og:description","value":"Reme Le Hane | Flutter Developer","keyName":"property"},{"name":"og:image","value":"images/4.jpg","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Reme Le Hane | Flutter Developer"},{"name":"twitter:description","value":"Reme Le Hane | Flutter Developer"},{"name":"twitter:image","value":"images/4.jpg","relativeUrl":true}]},"template":"page"},"html":"<p>I started as a developer many years ago, like most of us in the CMS space, it was initially with Joomla, or as it was still called back then, mambo. Over the years my focus began to expand outside of the CMS world, spent some time as a Full-Stack developer working PHP and even dabbling a bit in the DevOps space.</p>\n<p>I soon, however, realised my true passion lies in the Front-end space and began to focus on the visual, end-user-facing aspects of the web, with a balance between CSS and jQuery, soon after that though I began to focus even further into pure ECMAScript especially current and continuous evolution of it with next.</p>\n<p>With that, I spent a number of years focusing on web applications built in React with some time spent in Node/Express-based back-ends, but mainly for simple BFF layer implementations and basic CRUD API's with some MongoDB sprinkled in.</p>\n<p>Currently, work has me focusing and mostly learning flutter which I am finding I really enjoy, but it is a very different space compared to the JS world that I am very familiar with.</p>\n<p>Outside of the workspace, I spend a lot of time out on the trails, trying to find that balance between Trail Running and Mountain biking, which I find are among the best ways to debug those really challenging problems, and the ones related to code and just get away, disconnect and reset.</p>"},{"url":"/contact/","relativePath":"contact.md","relativeDir":"","base":"contact.md","name":"contact","frontmatter":{"title":"Contact","hide_title":false,"sections":[{"section_id":"contact-form","type":"section_form","content":"To get in touch please fill the form below.","form_id":"contactForm","form_action":"/thank-you","form_fields":[{"input_type":"text","name":"name","label":"Name","default_value":"Your name","is_required":true},{"input_type":"email","name":"email","label":"Email","default_value":"Your email address","is_required":true},{"input_type":"text","name":"subject","label":"Subject","default_value":"Message subject"},{"input_type":"textarea","name":"message","label":"Message","default_value":"Your message"},{"input_type":"checkbox","name":"consent","label":"I understand that this form is storing my submitted information so I can be contacted."}],"submit_label":"Send Message"}],"seo":{"title":"Contact","description":"This is the contact page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Contact | Reme Le Hane | Flutter Developer","keyName":"property"},{"name":"og:description","value":"Contact | Reme Le Hane | Flutter Developer","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Contact | Reme Le Hane | Flutter Developer"},{"name":"twitter:description","value":"Contact | Reme Le Hane | Flutter Developer"}]},"template":"advanced"},"html":""},{"url":"/devfest_2023/","relativePath":"devfest_2023.md","relativeDir":"","base":"devfest_2023.md","name":"devfest_2023","frontmatter":{"title":"DevFest Cape Town 2023 - Why Choose Riverpod?","hide_title":false,"seo":{"title":"DevFest Cape Town 2023 | Reme Le Hane | Flutter Developer","description":"DevFest Cape Town 2023 | Reme Le Hane | Flutter Developer","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Reme Le Hane | Flutter Developer","keyName":"property"},{"name":"og:description","value":"Reme Le Hane | Flutter Developer","keyName":"property"},{"name":"og:image","value":"images/4.jpg","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Reme Le Hane | Flutter Developer"},{"name":"twitter:description","value":"Reme Le Hane | Flutter Developer"},{"name":"twitter:image","value":"images/4.jpg","relativeUrl":true}]},"template":"page"},"html":"<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_1.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_1.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_1.jpg\">\n  </picture>\n</p>\n# Who am I?\n<p>My names Reme, and I have been a developer for about 13 years now, originally starting with Javascript and moving through its various frameworks over the years.</p>\n<p>I started with Flutter about 4 years ago and have been loving it ever since, currently the Lead Frontend Engineer for Loop and have been working with Riverpod for about a year or so.</p>\n<p>In my Flutter journey I worked with many of the state management solutions, starting with Redux, mistakenly thinking it would be easier having come from React Redux, spent some time with BLoC and then Cubit, Provider and most recently, Riverpod which has become my personal preference.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_2.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_2.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_2.jpg\">\n  </picture>\n</p>\n<h2>What is Riverpod</h2>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_3.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_3.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_3.jpg\">\n  </picture>\n</p>\n<p>As described by the creator Remi Rousselet (hope I am pronouncing that properly), Riverpod is a Reactive Caching and Data-binding Framework, so while it does make for a fantastics state management solution, that is not all that it is, along with its very flexible approach to state management, it can also help with networking, dependency injection and is extremely simple when it comes to working with tests and can even help improve the overall testability of your codebase.</p>\n<p>In many ways Riverpod is the evolution of provider, probably one of, if not the most popular state management solution for Flutter, this means for those currently using Provider, it is extremely easy to bring riverpod in, and also very easy to roll it into the codebase gradually.</p>\n<p>Those of us familiar with Bloc and Cubit will see some familiarity when when taking a look at Riverpods StateNotifier provider, although in my opinion, it's also a little simpler with less boilerplate</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_4.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_4.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_4.jpg\">\n  </picture>\n</p>\n<p>Here are some simple states setup with Provider and Bloc, I suspect many of you are familiar with one, if not both of these solutions, but when we take a look at something similar with Riverpod, you can see on the left is the StateNotifier, this or the ChangeNotifierProvider which works identically to the ChangeNotifier from Provider, this is the direction you would more commonly go for with a general state management setup, on the right is probably the simplest possible way to set up a Provider with Riverpod, a literal on liner and while not something you would use often, the option does exist for simply storing a single value in state, without all the verbose boilerplate.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_5.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_5.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_5.jpg\">\n  </picture>\n</p>\n<p>While it’s extremely rare that one would choose to set up a state for storing a single value, this is where the dependency injection can come into play, as Riverpod providers are globally accessible, but locally instantiated the data stored can be accessed and even updated from anywhere in the application if you so choose.</p>\n<h2>Riverpods Extensions</h2>\n<p>To help with controlling the global access to your state’s data, Riverpod provides 2 extension methods, namely autoDispose and family.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_6.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_6.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_6.jpg\">\n  </picture>\n</p>\n<p>The autoDispose extension does very much what its name describes, once the widget instantiating the Providers is unmounted, so is the Provider along with all its data.</p>\n<p>The family extension, which took me a while to fully understand, is the real powerhouse here, it serves two purposes, the first is simply the ability to pass data into your provider. The one caveat with that is, it only allows a single argument to be passed in, but does support all data types, so if you need multiple pieces of information you would most likely end up choosing to use a class or possibly a Map.</p>\n<p>A common, albeit simple, use case one would run into where this is handy would be when making use of the FutureProvider, one of Riverpods built in providers for dealing promises, like network requests..</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_7.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_7.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_7.jpg\">\n  </picture>\n</p>\n<p>As you can see in this example we are passing in the ID, the first argument is the response type expected form the API call and the second being the ID being passed into the FutureProvider.</p>\n<p>An implementation I personally make a lot of use of is the family extensions ability to control uniqueness</p>\n<p>In order for a state's data to be unique, the last argument you pass in needs to be uniquely hashable, the easiest of which is often a string, which can be a unique name that you choose or as in the example above it would be an ID and in this case one coming down from the database.</p>\n<p>The example comes from one of the use cases in our mobile application, the drivers task list, each item in the list shared the same business logic, needs to be able to perform the same actions/interactions, however naturally the data needs to be unique to each in order to ensure the correct data is displayed.</p>\n<p>So using the task's unique ID, the notifier can be instantiated uniquely for each item in the list, ensuring that each of the tasks can access the logic but keep its own data.</p>\n<h1>Accessing the Providers</h1>\n<h2>UI</h2>\n<p>Some of you may have noticed the two references to “ref” in the previous examples, similar to build context, that is how Riverpod accesses its providers, on the UI side you have a Widget Ref and within a Riverpod provider it is simply Ref.</p>\n<p>For the UI side, we simply need to replace the StatelessWidget with the ConsumerWidget, which will then add the WidgetRef as the second argument on the build method, from there we have access to many of the same assessors we would use with Provider or BLoC/Cubit. There is also a StatefulConsumer widget as well as Hook version available in a separate package for those who make use of flutter_hooks</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_9.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_9.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_9.jpg\">\n  </picture>\n</p>\n<h2>Classes</h2>\n<p>When it comes to accessing providers within a provider, it is even more straightforward, here you would always be using read, which is accessed from the Ref that is available to all riverpod providers.</p>\n<p>In this example we are accessing one of our network providers and chaining methods onto that in order to fire off a set of API calls to update the status of the currently active task.</p>\n<h1>ProviderScope</h1>\n<p>ProviderScope is a wrapper widget provided by RiverPod and it’s what provides it a lot of its secret sauce, Provider scope in the simplest of use cases wraps your main widget inside runApp. This is how Riverpod ensures that all providers are accessible app wide.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_10.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_10.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_10.jpg\">\n  </picture>\n</p>\n<p>However, it also provides the ability to override providers, at this point the most likely reason for one to do this would be to setup providers that rely on things that need to start up first, one such example from our project is GooglePlaces, while it itself does not need any startup, our application makes use of flavours to allow for building against multiple environments, so there are also multiple sets of environment variables including the API keys needed for things like GooglePlaces.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_11.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_11.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_11.jpg\">\n  </picture>\n</p>\n<p>In our core providers file, we set up a google places provider, with the intention of overriding it, hence the throw, this would only pose a problem if it were not being overridden at app startup.</p>\n<p>Once the API keys are loaded up, which will happen before runApp, we will have the API key available, and on the provider itself, which is why it needs to be set up first, we can use the overrideWith method to add a proper instance of the Package with the API key required for it to function.</p>\n<p>This is just one, pretty simple, use case, in our application we also use it for things like shared preferences and firebase, registering these with providers allows us to easily leverage that globally accessible feature of Riverpod, giving easy access to Firebase and Shared Preferences both in the UI and in widgets in a consistent manner, and the real reasoning behind the why will become much clearer next, when we talk about testing.</p>\n<h1>Testing</h1>\n<p>Testing is probably one of my favourite reasons to use Riverpod, just for how simple it makes it.</p>\n<p>Widget testing is where ProviderScope comes in once again</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_12.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_12.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_12.jpg\">\n  </picture>\n</p>\n<p>PumpApp is an extension I make use of in all my applications, it allows me to easily wrap essential or boilerplate widgets around what is needing to be tested, in this case it's the ProviderScope with an optional list of overrides that can pass into the test, the actual one in the app also includes the MaterialApp, Scaffold and optional navigation observers.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_13.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_13.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_13.jpg\">\n  </picture>\n</p>\n<p>If we take a look at these seemingly random excerpts from a test we can get a sense of what is going on, in this test we are verifying that the online indicator is visible when the device is online.</p>\n<p>Our connectivity provider responsible for monitoring the devices internet connection is also a Riverpod Provider, so we simply mock that and ensure it returns true for the device being online.</p>\n<p>Next you will see the pumpApp extension, and the second argument being the array of overrides that are being provided, as with GooglePlaces in the app startup, we call the overrideWith method to instead make use of the mocked provider, instead of the real instance which the widget would be referencing.</p>\n<p>On the write is just a snippet of the override to show how it would differ when mocking a state value, when using StateNotifer to manage your widgets state.</p>\n<p>The one last example I want to go through for testing has to do with external packages, while we never test those ourselves, we often have to use them and in some cases mocking those external packages can vary from easy to downright painful.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_14.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_14.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/devfest_2023/devfest_2023_14.jpg\">\n  </picture>\n</p>\n<p>One that we use throughout our application is Firestore, we try and make the app as offline capable as possible so we do communicate directly with Firebase, so attaching the static instance from Firestore to a Riverpod provider both makes accessing Firestore on the UI and data sides easy and consistent, it also allows for easy mocking, for testing of the network operations or UI interactions that rely on the near real-time data provided by firebase.</p>"},{"url":"/gdc/","relativePath":"gdc.md","relativeDir":"","base":"gdc.md","name":"gdc","frontmatter":{"title":"GDC - Are You Flutter'ed Yet?","hide_title":false,"seo":{"title":"Google Developer Conference | Reme Le Hane | Flutter Developer","description":"Google Developer Conference | Reme Le Hane | Flutter Developer","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Reme Le Hane | Flutter Developer","keyName":"property"},{"name":"og:description","value":"Reme Le Hane | Flutter Developer","keyName":"property"},{"name":"og:image","value":"images/4.jpg","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Reme Le Hane | Flutter Developer"},{"name":"twitter:description","value":"Reme Le Hane | Flutter Developer"},{"name":"twitter:image","value":"images/4.jpg","relativeUrl":true}]},"template":"page"},"html":"<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-0.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-0.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-0.jpg\">\n  </picture>\n</p>\n<p>In April 2021, I was privileged enough to be able to be one of the speakers for the Google Developer conferences Flutter session, \"Are You Flutter'ed Yet?\" along with 2 other presenters.</p>\n<p>\n  The following is the transcript, and you can also watch the recording on <a href=\"https://www.youtube-nocookie.com/embed/oJSMT97rURs\"  target=\"_blank\">YouTube</a> and also download the associated <a href=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/GDC_Presentation.pptx\"  target=\"_blank\">Powerpoint</a>\n</p>\n<hr/>\n<p>Good Evening all, my name is Reme and I have been working as a Frontend Architect at Wyzetalk and have been developing their new Flutter mobile application which will be replacing their existing Ionic version 1 application.</p>\n<p>As those of you who have already begun working with Flutter may know, one of the bigger challenges with a Flutter codebase is testing, currently, the documentation on that topic is a little dismal, with examples covering only some of the most basic use-cases.</p>\n<p>Working on this application at Wyzetalk, we have gone far beyond what can easily be found in a google search, or a lot of google searches for that matter.</p>\n<p>To aid with testability, we built the application following a domain-driven approach using BLoC as well as dependency injection using get_it. The strong focus on testing has also had to influence our choice of external packages, as some have proven easier to integrate with testing than others.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-1.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-1.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-1.jpg\">\n  </picture>\n</p>\n<p>Our first production-ready version, aka our MVP, is currently sitting just over 12300 lines of testable code, there are probably quite a few thousand more lines sitting in generated files, but those are all excluded from the coverage report, which leaves us with a very nice 83% test coverage which is still increasing and has most certainly not been without more than it’s fair share of challenges.</p>\n<p>Today I am going to touch on 2 of those challenges and go through a bit of how we dealt with them.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-2.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-2.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-2.jpg\">\n  </picture>\n</p>\n<p>As a white-labelled, international a localized product, one of the initial challenges we faced early on was being able to run our tests with localization in place. As users can change their language, one of the simplest ways to be able to test the available language switcher was to just expect to find a specific piece of text in the selected language. </p>\n<p>Occasionally we would also run into scenarios where UI’s were unable to be tested as a result of a localization dependency that was not available in the test context.</p>\n<p>For localizing the application, we chose the EasyLocalization plugin, in part as it supported both local and remote data sources, and the remote came in very handy during the initial development phase, and was later updated to use an OTA updatable local source. EasyLocalalization works with simple object path notation, which was how the plugin for our other applications works which kept things consistent.</p>\n<p>Being localization, it’s one of the few things that have to be set up on the main.dart file, so bringing that logic into the testing space took a fair amount of thinking, and as usual, the resulting code is quite disproportionate to that amount.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-3.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-3.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-3.jpg\">\n  </picture>\n</p>\n<p>Here we have the helper function I created which allows, among other things, us to wrap each widget that we are testing with the EasyLocalization provider widget, which in turn gives the test instance access to the locally available mock JSON files for our locale data.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-4.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-4.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-4.jpg\">\n  </picture>\n</p>\n<p>\nThe TEST_MOCK_STORAGE variable, as you can see, is being derived by getting the current directory path from the FileSystem and the relative path for the fixtures. This however does require us to suffix the `flutter test` command with the folder name test.</p>\n<p>This is not the only place where we need to access mocked files within our tests, so that on its own, while simple, is a very useful thing to set up for testing in Flutter.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-5.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-5.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-5.jpg\">\n  </picture>\n</p>\n<p>Now I would like to move onto a more creative test implementation I set up, something far less likely to be run into out in the wild, but I felt it spoke to the capabilities of being a bit more creative when approaching more complex or unusual testing scenarios in your application.</p>\n<p>I would hope that none of you ends up running into a scenario quite like this, very much an edge case scenario born from a very specific business requirement and a few days later I did manage to come up with a cleaner implementation of the UI logic around this, but I was still pretty impressed that I was able to write a test for this that I could actually be confident with.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-6.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-6.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-6.jpg\">\n  </picture>\n</p>\n<p>I am not one who believes in writing tests for the sake of writing tests, while coverage is a nice measurement for the overall, tests need to be written for the purpose of testing the business and UI logic before worrying about what lines are being hit, it’s just a nice way to sanity check that you have hit all your cases.</p>\n<p>As creative and possibly out there as this test may be, it genuinely works and can easily be made to fail with an invalid expectation.</p>\n<p>Before I show you the test that was written, let me give you a little bit of background behind the UI and logic that I needed to test.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-7.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-7.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-7.jpg\">\n  </picture>\n</p>\n<p>There is a reasonable level of flexibility in our application, and with that comes the need to render raw HTML, something Flutter does not technically support within the native applications. To work around this I made use of an in-app-browser which allows us to maintain backwards compatibility with some of the existing API responses.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-8.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-8.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-8.jpg\">\n  </picture>\n</p>\n<p>As part of the API response can include hyperlinks, which simply just work within the Ionic application, we also have a custom URL launcher as depending on the link that is provided by the API, the app may need to navigate through the navigation tree or switch over to another tab within the PageView.</p>\n<p>As part of the API response can include hyperlinks, which simply just work within the Ionic application, we also have a custom URL launcher as depending on the link that is provided by the API, the app may need to navigate through the navigation tree or switch over to another tab within the PageView.</p>\n<p>At this point the app is still a bit of an MVP, so not all of our current features have been implemented in the Flutter app as of yet, added to that, not all devices may support certain URL schemas. In order to maintain a quality user experience, we wanted to be able to inform the user if something is not yet supported and to maintain consistency, we wanted to be able to display the same SnackBar that is used throughout the rest of the application.</p>\n<p>The first implementation of this error handling involved returning the Snackbar directly from the utility class, which can be seen on the current slide. While testing a class or widget is quite straightforward, mixing the 2 creates a different set of complications. I would definitely put this in the “if all else fails” category of things to do, however, I was still able to write a test that I am personally very confident with to test this scenario.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-9.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-9.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-9.jpg\">\n  </picture>\n</p>\n<p>Here we have the full test, which may not be easily visible to everyone, it is a fair amount of code to try and showcase in a slideshow, so let’s break this down into smaller chunks as there is quite a bit going on here, the one thing to take away from this, at this time is that I am using  `testWidget` instead of `test`, as we are ultimately testing the UI in the end.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-10.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-10.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-10.jpg\">\n  </picture>\n</p>\n<p>After setting up the variables for the test, I created a small helper within the test as I was running into issues executing all the UI logic, so I needed a short delay before actually calling the launchUrl function.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-11.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-11.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-11.jpg\">\n  </picture>\n</p>\n<p>In order for the utility function to work correctly and for the Snackbar to actually render, I needed to use a real BuildContext, instead of providing a mocked one, so as with all our Widget tests, we start with our “provideLocalizedWidgetForTesting” helper that you would have seen earlier.</p>\n<p>We then follow that up with a LayoutBuilder in order to get a real widget context to pass into our small helper and ultimately into our HTML utility function.</p>\n<p>As most of you may know, the most common way to execute a future inside a widget is to use the FutureBuilder, so we have one of those inside the LayoutBuilder to execute the utility function. As we are not concerned about all the other connection states for the test, we are only specifically checking for the “done” state and in both cases we simply return a “SizedBox.shrink()”.</p>\n<p>To date this has to be the most unusual way I have written a test, but stitching all of this together allows us to have executed both the utility classes business logic and verify that a localized Snackbar is being rendered in the UI, as the “Podcast” feature’s link, which is being tapped on, is one that is yet to be implemented in the Flutter application.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-12.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-12.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-12.jpg\">\n  </picture>\n</p>\n<p>The rest of the test is very straightforward following the normal flow of pumping the widget, settling the LayoutBuilder and then one final pump with a 1-second delay for the FutureBuilder to complete followed by expecting the “FlushBar” to be rendered, which is just a much nicer looking and more capable Snackbar.</p>\n<p>\n  <picture>\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-13.webp\" type=\"image/webp\">\n      <source srcset=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-13.jpg\" type=\"image/jpeg\">\n      <img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/files/slides/slide-13.jpg\">\n  </picture>\n</p>\n<p>That covers the 2 extremes of testing we have implemented over the last few months, and I hope that the useful case and the extreme case gives you a better understanding of what is possible with testing in Flutter.</p>\n<hr/>"},{"url":"/","relativePath":"index.md","relativeDir":"","base":"index.md","name":"index","frontmatter":{"title":"Home","hide_title":true,"sections":[{"section_id":"hero","type":"section_hero","title":"Hi, I'm Reme Le Hane","content":"Frontend Architect (React/Flutter)."},{"section_id":"about","type":"section_content","title":"About","content":"Hi there, names Reme and I spend my working hours on [Flutter](https://flutter.dev) projects and before that I spent many years working with [ReactJS](https://reactjs.org). <p>I write a lot about testing in Flutter, having come across many complex scenarios writing large scale Flutter applications, and had the privilege of presenting at the Google Developer conference in April 2021.</p> <p>Outside of work I really enjoy Mountain Biking, Trail Running, Hiking and in general just being outdoors.</p>","actions":[{"label":"More About Me","url":"/about","style":"button"}]},{"section_id":"recent-posts","type":"section_posts","title":"Recent Posts","posts_number":4,"actions":[{"label":"View Blog","url":"blog/index.html","style":"button"}]}],"seo":{"title":"Reme Le Hane | Frontend Architect (React/Flutter)","description":"Frontend Architect (React/Flutter)","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Reme Le Hane | Frontend Architect (React/Flutter)","keyName":"property"},{"name":"og:description","value":"Reme Le Hane | Frontend Architect (React/Flutter)","keyName":"property"},{"name":"og:image","value":"images/4.jpg","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Reme Le Hane | Frontend Architect (React/Flutter)"},{"name":"twitter:description","value":"Reme Le Hane | Frontend Architect (React/Flutter)"},{"name":"twitter:image","value":"images/4.jpg","relativeUrl":true}]},"template":"advanced"},"html":""},{"url":"/thank-you/","relativePath":"thank-you.md","relativeDir":"","base":"thank-you.md","name":"thank-you","frontmatter":{"title":"Thank You","hide_title":false,"seo":{"title":"Contact - Thank You | Reme Le Hane | Flutter Developer","description":"Contact - Thank You | Reme Le Hane | Flutter Developer","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Contact - Thank You | Reme Le Hane | Flutter Developer","keyName":"property"},{"name":"og:description","value":"Contact - Thank You | Reme Le Hane | Flutter Developer","keyName":"property"},{"name":"og:image","value":"images/4.jpg","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Contact - Thank You | Reme Le Hane | Flutter Developer"},{"name":"twitter:description","value":"Contact - Thank You | Reme Le Hane | Flutter Developer"},{"name":"twitter:image","value":"images/4.jpg","relativeUrl":true}]},"template":"page"},"html":"<p>Thanks for getting in touch, I will get back to you as soon as I can.</p>\n<p>Regards</p>"},{"url":"/posts/Introduction-to-navigaiton-and-routing-in-flutter/","relativePath":"posts/Introduction-to-navigaiton-and-routing-in-flutter.md","relativeDir":"posts","base":"Introduction-to-navigaiton-and-routing-in-flutter.md","name":"Introduction-to-navigaiton-and-routing-in-flutter","frontmatter":{"title":"Introduction to Navigation and Routing in Flutter","stackbit_url_path":"posts/Introduction-to-navigaiton-and-routing-in-flutter","date":"2024-02-14T09:00:00.000Z","excerpt":"","tags":["flutter","flutterweb","fluttermobile","flutterdevelopment"],"template":"post","thumb_img_path":"https://img.freepik.com/premium-vector/phone-map-ui-mobile-application-with-transport-location-route-direction-smartphone-navigation-interface-gps-app-path-planning-way-tracking-vector-city-travel-scheme_176516-3738.jpg","cover_image":"https://img.freepik.com/premium-vector/phone-map-ui-mobile-application-with-transport-location-route-direction-smartphone-navigation-interface-gps-app-path-planning-way-tracking-vector-city-travel-scheme_176516-3738.jpg","published_at":"2024-02-02T09:00:00.000Z","canonical_url":"https://remelehane.dev/posts/Introduction-to-navigaiton-and-routing-in-flutter/"},"html":"<p><img src=\"https://img.freepik.com/premium-vector/phone-map-ui-mobile-application-with-transport-location-route-direction-smartphone-navigation-interface-gps-app-path-planning-way-tracking-vector-city-travel-scheme_176516-3738.jpg\"></p>\n<p>‍When it comes to building mobile applications, navigation and routing are two fundamental concepts that play a crucial role in creating a seamless user experience. In the context of Flutter, navigation refers to the process of switching between different screens or pages within an application, while routing involves managing the flow and organization of these screens.</p>\n<p>In this comprehensive guide, we will explore the ins and outs of navigation and routing in Flutter. We will delve into the various techniques and best practices for implementing navigation, and discuss the benefits of using routing systems in your Flutter projects. So, whether you're a beginner or an experienced Flutter developer, this article will serve as your go-to resource for mastering navigation and routing in Flutter.</p>\n<h2>Understanding Routing in Flutter</h2>\n<p>Routing, in the context of Flutter, refers to the process of navigating between different screens or pages within an application. Just like a map helps you navigate through a city, a routing system guides users through your app, allowing them to move from one screen to another seamlessly.</p>\n<p>In Flutter, routing is managed through the Navigator class, which is part of the WidgetsApp class. The Navigator class is typically provided by either the MaterialApp or CupertinoApp widget, depending on the platform you are targeting.</p>\n<p>The Navigator class manages routes using a stack-based approach, also known as Last In, First Out (LIFO). This means that when you navigate to a new page, it is pushed onto the stack, becoming the active route and displaying its associated screen. Conversely, when you want to return to the previous screen, the current route is popped off the stack, revealing the previous route.</p>\n<h2>Why Do We Use Routing in Flutter?</h2>\n<p>Routing is a fundamental aspect of building Flutter applications, as it enables smooth and intuitive navigation between different screens or pages. It provides a logical flow to your app, allowing users to move back and forth between screens and easily access the information they need.</p>\n<p>In addition to providing a seamless user experience, routing also allows you to pass data between screens. This means that you can share information or state from one screen to another, making your app more dynamic and interactive. Routing in Flutter is essential for maintaining the state of your app and ensuring that users can easily navigate through its various sections.</p>\n<h2>Flutter Navigator: The Key to Navigation</h2>\n<p>The Navigator class is the heart of navigation in Flutter. It is a widget that controls the management of a stack of Route objects, facilitating the switching of screens within your app. You can think of the Navigator as a data structure stack, where you can push new routes onto it and pop existing routes off of it.</p>\n<p>To navigate to a new screen in Flutter, you can use the Navigator.push() method. This method allows you to push a new route onto the stack and transition to the new screen. For example:</p>\n<pre><code class=\"language-dart\">Navigator.push(\n  context,\n  MaterialPageRoute(builder: (context) => NewScreen()),\n);\n</code></pre>\n<p>In this example, MaterialPageRoute is a route that uses a platform-adaptive transition, which means that it provides a transition effect that is consistent with the platform you are running your app on.</p>\n<p>To return to the previous screen, you can use the Navigator.pop() method. This method pops the current route off the stack, revealing the previous route. For example:</p>\n<pre><code class=\"language-dart\">Navigator.pop(context);\n</code></pre>\n<p>By using these simple methods provided by the Navigator class, you can easily navigate between screens and create a smooth and intuitive user experience in your Flutter app.</p>\n<h2>Techniques for Routing in Flutter</h2>\n<p>In Flutter, there are two main techniques for implementing routing: Stack Routing (or basic routing) and Named Routing. Let's explore each of these techniques in more detail.</p>\n<h3>Stack Routing (Basic Routing)</h3>\n<p>Stack routing, also known as basic routing, is the most straightforward approach to navigation in Flutter. It involves using the push and pop methods provided by the Navigator class to add or remove routes (screens) from the stack.</p>\n<p>When you want to navigate from one screen to another, you \"push\" a new route onto the Navigator's stack. This new route becomes active, and its associated screen is displayed. For example:</p>\n<pre><code class=\"language-dart\">Navigator.push(\n  context,\n  MaterialPageRoute(builder: (context) => NewScreen()),\n);\n</code></pre>\n<p>In this example, MaterialPageRoute is a route that uses a platform-adaptive transition, providing a seamless transition effect when navigating to the new screen.</p>\n<p>To return to the previous screen and dismiss the current one, you can \"pop\" the current route from the stack. This is done using the Navigator.pop() method. For example:</p>\n<pre><code class=\"language-dart\">Navigator.pop(context);\n</code></pre>\n<p>By using the push and pop methods, you can easily navigate between screens and maintain the flow of your app.</p>\n<h3>Named Routing</h3>\n<p>Named routing is another technique for implementing navigation in Flutter. It allows you to refer to your routes using predefined string identifiers, known as \"names,\" instead of directly dealing with the routes themselves.</p>\n<p>In named routing, navigation is achieved by calling <code>Navigator.pushNamed()</code>, passing the name of the route you want to navigate to. For example:</p>\n<pre><code class=\"language-dart\">Navigator.pushNamed(context, '/details');\n</code></pre>\n<p>To go back to the previous screen, you can simply pop the current route using <code>Navigator.pop()</code>:</p>\n<pre><code class=\"language-dart\">Navigator.pop(context);\n</code></pre>\n<p>Named routing provides a more organized and readable way of managing routes, especially in larger applications where you have multiple screens to navigate between. It allows you to define your routes using strings, making it easier to maintain and modify your navigation logic.</p>\n<h2>Passing Arguments to Named Routes</h2>\n<p>In a Flutter application, there may be instances where you need to pass data or arguments from one screen to another. This is often referred to as \"passing arguments\" to a route. Named routing in Flutter provides a convenient way to achieve this.</p>\n<p>To pass arguments to a named route, you can include them as parameters when calling <code>Navigator.pushNamed()</code>. For example:</p>\n<pre><code class=\"language-dart\">Navigator.pushNamed(\n  context,\n  '/details',\n  arguments: 'Hello from HomeScreen!',\n);\n</code></pre>\n<p>In this example, we are passing the string <code>'Hello from HomeScreen!'</code> as an argument to the <code>'/details'</code> route.</p>\n<p>To receive the arguments in the destination screen, you can access them through the <code>ModalRoute</code> class. Here's an example of how you can do it:</p>\n<pre><code class=\"language-dart\">class DetailScreen extends StatelessWidget {\n  const DetailScreen({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    // Accept the arguments passed from the previous screen\n    final String message = ModalRoute.of(context)!.settings.arguments as String;\n\n    // Use the arguments in your screen\n    return Scaffold(\n      appBar: AppBar(title: const Text('Detail Screen')),\n      body: Center(child: Text(message)),\n    );\n  }\n}\n</code></pre>\n<p>In this example, we retrieve the arguments passed from the previous screen using <code>ModalRoute.of(context)!.settings.arguments</code>. We then use the retrieved arguments to display the desired content in the <code>DetailScreen</code>.</p>\n<p>By leveraging named routing and passing arguments, you can create dynamic and interactive screens that enhance the user experience in your Flutter app.</p>\n<h2>Best Flutter Routing Packages</h2>\n<p>While Flutter provides built-in support for navigation and routing through the Navigator class, there are several routing packages available that can enhance and simplify your routing logic. Let's take a look at some of the best Flutter routing packages:</p>\n<ol>\n<li><strong>Auto Route</strong>: Auto Route is a powerful routing package for Flutter that provides a strongly typed routing setup. It helps you avoid errors and improves code readability by generating route-related code for you. Auto Route also supports route guards, path parameters, and much more.</li>\n<li><strong>Go Router</strong>: Go Router is a declarative routing package for Flutter that simplifies screen navigation using URLs. It allows you to handle deep links and manage various navigation scenarios in your app. Go Router provides a convenient and straightforward API for navigating between different screens based on URLs.</li>\n<li><strong>flutter_modular</strong>: Flutter Modular is a modular and easy-to-use package for routing in Flutter. It not only provides routing capabilities but also offers dependency injection, making it well-suited for large-scale applications. Flutter Modular promotes code organization and separation of concerns, allowing you to build modular and maintainable Flutter apps.</li>\n</ol>\n<p>These are just a few examples of the many routing packages available for Flutter. Each package has its own unique features and advantages, so it's important to choose the one that best suits your project's requirements.</p>\n<h2>Best Practices for Flutter Routing</h2>\n<p>To ensure that your routing implementation is efficient and maintainable, it's important to follow some best practices. Here are a few tips to keep in mind when working with routing in Flutter:</p>\n<ol>\n<li><strong>Route Generator</strong>: Implement a route generator function that creates routes based on their names. This function should be responsible for creating and returning the relevant widget for each identified route. By centralizing your route creation logic, you can easily handle erroneous or unknown routes and keep your codebase organized.</li>\n<li><strong>Use the Navigator Class</strong>: Flutter provides the Navigator class to manage routing and navigation within your app. It allows you to push new routes onto the stack, pop routes off it, and handle transitions between screens. Familiarize yourself with the methods and properties of the Navigator class to effectively navigate through your app.</li>\n<li><strong>Integrate with State Management</strong>: Consider integrating a state management solution like Provider, Riverpod, or Flutter Bloc with your routing logic. State management helps separate your UI from the business logic, making your codebase more organized and scalable. By combining routing with state management, you can create a robust and maintainable Flutter app.</li>\n<li><strong>Handle Nested Routing</strong>: Flutter supports nested routing, which allows you to handle multiple independent navigators, each with its own navigation stack. This is useful when you want to maintain the state of various screens while navigating within them. By properly setting up nested routing, you can create a more complex and interactive user interface in your Flutter app.</li>\n</ol>\n<p>By following these best practices, you can ensure that your routing implementation is efficient, maintainable, and scalable, leading to a better overall user experience in your Flutter app.</p>\n<h2>Conclusion</h2>\n<p>Navigation and routing are essential aspects of building Flutter applications. They play a crucial role in creating a seamless user experience, enabling users to navigate through different screens and access the information they need. With the powerful Navigator class and the flexibility of named routing, Flutter provides a robust framework for implementing navigation and routing in your app.</p>\n<p>By following best practices and leveraging the capabilities of routing packages like Auto Route and Go Router, you can enhance your routing logic and create more dynamic and interactive Flutter apps. So, whether you're building a simple app or a complex application, mastering navigation and routing in Flutter is a crucial skill that will greatly contribute to the success of your projects.</p>"},{"url":"/posts/adding-flutter-web-to-an-existing-application/","relativePath":"posts/adding-flutter-web-to-an-existing-application.md","relativeDir":"posts","base":"adding-flutter-web-to-an-existing-application.md","name":"adding-flutter-web-to-an-existing-application","frontmatter":{"title":"Adding Flutter web to an existing application","stackbit_url_path":"posts/adding-flutter-web-to-an-existing-application","date":"2020-08-03T07:16:00.000Z","excerpt":"","tags":["flutter","flutterweb","fluttermobile","flutterdevelopment"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*1orxIbVfgZa4mB_qEL17Yg.jpeg"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*1orxIbVfgZa4mB_qEL17Yg.jpeg\"></p>\n<p>As it stands now flutter web is not ready for production use, to get started however they have provided the required steps at the <a href=\"https://flutter.dev/web\">Flutter Docs</a>.</p>\n<p>One thing os note is, and possibly the biggest hindrance in more mature codebase would be the fact that dart:io does not yet support web and you would need to be using dart:html.</p>\n<p>There is a way to do this though, as dart does support conditional imports, but the size of your codebase is going to impact the level of refactoring that needs to be done in order to achieve this.</p>\n<p>For starters, you would no longer be able to directly reference dart:io in your codebase. You would then not be able to use HttpClient you would need to use <a href=\"https://pub.dev/packages/dio\">Dio</a> or http from http/http.dart.</p>\n<p>To control the “switch” between mobile and web you can create a delegation service, a set of files you can then use to define the methods you need to use that are available form both dart:io and dart:html.</p>\n<p>You are going to need to create 4 files, I called them: platform_delegate_main.dart, platform_delegate_web.dart, platform_delegate_mobile.dart and plaform_delegate.dart.</p>\n<p>In this example, I am going to use a helper that I used to wrap Platforms so that I could maintain the testability of functions that needed access to platforms.</p>\n<p>I have an abstract class SupportedPlatforms:</p>\n<pre><code class=\"language-dart\">abstract class SupportedPlatforms {\n bool isAndroid();\n bool isIos();\n}\n</code></pre>\n<p>The platform_delegate.dart simply handles the export and the conditions for which platform you are using.</p>\n<pre><code class=\"language-dart\">// The export file\n// platform\\_delegate.dart\n\nexport 'platform\\_delegate\\_main.dart'\n  if (dart.library.js) 'platform\\_delegate\\_main\\_web.dart'\n  if (dart.library.io) 'platform\\_delegate\\_main\\_mobile.dart';\n</code></pre>\n<p>Each file then needs to contain the same methods/classes.</p>\n<pre><code class=\"language-dart\">// platform\\_delegate\\_main.dart\nimport 'supported\\_platform\\_helpers';\n\nclass SupportedPlatformsImp implements SupportedPlatforms {\n   @override\n   bool isAndroid() => false;\n   @override\n   bool isIos() => false;\n}\n\n// platform\\_delegate\\_main\\_web.dart\nimport 'dart:html' as html;\nimport 'supported\\_platform\\_helpers';\n\nclass SupportedPlatformsImp implements SupportedPlatforms {\n   @override\n   bool isAndroid() => false;\n   @override\n   bool isIos() => false;\n}\n\n//platform\\_delegate\\_main\\_mobile.dart\nimport 'dart:io' as io;\nimport 'supported\\_platform\\_helpers';\n\nclass SupportedPlatformsImp implements SupportedPlatforms {\n   @override\n   bool isAndroid() => Platform.isAndroid;\n   @override\n   bool isIos() => Platform.isIOS;\n}\n</code></pre>\n<p>When using functions you could either return an acceptable default or throw an UnsupprtedError.</p>\n<pre><code class=\"language-dart\">void myFunction() => throw UnsupportedError('myFunction is Unsupported')\n</code></pre>\n<p>Then at implementation time, you will be importing platfomr_delegate.dart</p>\n<pre><code class=\"language-dart\">import 'platform\\_delegate.dart';\n\nvoid main() {\n  if (SupportedPlatform().isIos()) {\n    // Do stuff for apple...\n  }\n}\n</code></pre>\n<p>Here I can still maintain platform-specific conditions while supporting web and mobile, as on Android or Web isIOS() will safely return false and we are no longer worried about dart:io preventing flutter web from functioning.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you liked it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/widget-testing-passed-in-function-kpi/\">Widget testing passed in function</a></li>\n</ul>"},{"url":"/posts/automated-flutter-unit-testing-with-github-actions/","relativePath":"posts/automated-flutter-unit-testing-with-github-actions.md","relativeDir":"posts","base":"automated-flutter-unit-testing-with-github-actions.md","name":"automated-flutter-unit-testing-with-github-actions","frontmatter":{"title":"Automating Unit Testing for Your Flutter Project with GitHub Actions","stackbit_url_path":"posts/automated-flutter-unit-testing-with-github-actions","date":"2023-02-20T09:00:00.000Z","excerpt":"","tags":["flutter","flutterweb","unittesting","githubactions"],"template":"post","thumb_img_path":"https://images.unsplash.com/photo-1556075798-4825dfaaf498?q=80&w=1000&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8N3x8bG9naWN8ZW58MHx8MHx8fDA%3D","cover_image":"https://images.unsplash.com/photo-1556075798-4825dfaaf498?q=80&w=1000&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8N3x8bG9naWN8ZW58MHx8MHx8fDA%3D","published_at":"2023-02-20T09:00:00.000Z","canonical_url":"https://remelehane.dev/posts/automated-flutter-unit-testing-with-github-actions/"},"html":"<p><img src=\"https://images.unsplash.com/photo-1556075798-4825dfaaf498?q=80&#x26;w=1000&#x26;auto=format&#x26;fit=crop&#x26;ixlib=rb-4.0.3&#x26;ixid=M3wxMjA3fDB8MHxzZWFyY2h8N3x8bG9naWN8ZW58MHx8MHx8fDA%3D\"></p>\n<p>In the world of software development, ensuring the quality and reliability of your code is paramount. One way to achieve this is through automated unit testing. By automating the process of running tests on your code, you can catch issues early, prevent broken code from going into production, and improve overall code quality. In this article, we will explore how you can use GitHub Actions to automate unit testing for your Flutter project.</p>\n<h2>What is GitHub Actions?</h2>\n<p>GitHub Actions is a powerful workflow automation tool provided by GitHub. It allows you to define custom workflows that can be triggered by various events, such as code pushes, pull requests, or manual triggers. With GitHub Actions, you can automate tasks and processes within your software development workflow, including building, testing, and deploying your code.</p>\n<h2>Setting Up the Workflow</h2>\n<p>To get started with automating unit testing for your Flutter project, you'll need to define a workflow in your GitHub repository. The workflow is written in YAML format and consists of a series of steps to be executed. Let's take a look at an example workflow:</p>\n<pre><code class=\"language-yaml\">name: Flutter Testing\non:\n  workflow_dispatch:\n  pull_request:\n    branches: [main]\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - uses: subosito/flutter-action@v1.5.3\n      - name: Install packages\n        run: flutter pub get\n      - name: Run generator\n        run: flutter pub run build_runner build\n      - name: Run test\n        run: flutter test test\n</code></pre>\n<p>In this example, we define a workflow called \"Flutter Testing\" that will be triggered on both <code>workflow_dispatch</code> (manual trigger) and when a pull request is made against the <code>main</code> branch. The workflow consists of a single job called \"test\" that runs on the <code>ubuntu-latest</code> environment.</p>\n<h2>Understanding the Workflow</h2>\n<p>Now let's take a closer look at each step in the workflow and understand what it does.</p>\n<h3>Step 1: Checkout the Code</h3>\n<p>The first step in the workflow is to check out the code into the instance of the action. This is done using the <code>actions/checkout</code> action:</p>\n<pre><code class=\"language-yaml\">- uses: actions/checkout@v2.3.4\n</code></pre>\n<p>By checking out the code, we ensure that the subsequent steps have access to the latest version of the codebase.</p>\n<h3>Step 2: Installing Flutter</h3>\n<p>Since we are working with a Flutter project, we need to install Flutter into the instance. This is done using the <code>subosito/flutter-action</code> action:</p>\n<pre><code class=\"language-yaml\">- uses: subosito/flutter-action@v1.5.3\n</code></pre>\n<p>By default, this action installs the latest stable release of Flutter. However, you can configure it to use a different release or even pin it to a specific version.</p>\n<h3>Step 3: Installing Packages</h3>\n<p>Next, we need to install all the required packages for our Flutter project. This is done by running the following command:</p>\n<pre><code class=\"language-yaml\">- name: Install packages\n  run: flutter pub get\n</code></pre>\n<p>This step ensures that all the necessary dependencies are installed and ready for testing.</p>\n<h3>Step 4: Running Code Generation (Optional)</h3>\n<p>If your project makes use of code generation, you can include a step to run the code generator. This step is optional and can be skipped if your project doesn't require code generation. Here's an example:</p>\n<pre><code class=\"language-yaml\">- name: Run generator\n  run: flutter pub run build_runner build\n</code></pre>\n<p>Running the code generator will generate code based on annotations in your project, such as serializers, routes, or database models.</p>\n<h3>Step 5: Running Unit Tests</h3>\n<p>Finally, we come to the most important step—running the unit tests for your Flutter project. This is done using the following command:</p>\n<pre><code class=\"language-yaml\">- name: Run test\n  run: flutter test test\n</code></pre>\n<p> This command runs all the tests located in the <code>test</code> directory of your project. You can customize the path if your tests are located in a different directory.</p>\n<h2>Running the Workflow</h2>\n<p>Once you have defined your workflow, it will be automatically triggered whenever a pull request is made against the <code>main</code> branch or manually triggered using the GitHub Actions interface. The workflow will run on the specified environment (in this case, <code>ubuntu-latest</code>) and execute each step in the defined order.</p>\n<p>The time it takes to run the automated tests will depend on the size and complexity of your project. Smaller projects with a handful of files may complete in just over a minute, while larger projects with thousands of files and extensive test coverage may take several minutes to complete.</p>\n<h2>Conclusion</h2>\n<p>Automating unit testing for your Flutter project using GitHub Actions is a simple yet powerful way to ensure code quality and prevent issues from reaching production. By defining a workflow and specifying the necessary steps, you can easily run tests on your code with every push or pull request. This helps catch bugs early, improves overall code quality, and gives you confidence in the reliability of your codebase.</p>\n<p>If you have any questions, comments, or improvements, feel free to drop a comment below. Happy testing and enjoy your Flutter development journey!</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/getting-creative-with-shorebird/\">Getting creative with Shorebird</a></li>\n<li><a href=\"https://remelehane.dev/posts/essential-tools-for-a-flutter-developer/\">Essential Tools for Flutter Developers: Boosting Productivity and Efficiency</a></li>\n</ul>"},{"url":"/posts/automated-unit-testing-with-github-actions/","relativePath":"posts/automated-unit-testing-with-github-actions.md","relativeDir":"posts","base":"automated-unit-testing-with-github-actions.md","name":"automated-unit-testing-with-github-actions","frontmatter":{"title":"Automated Unit Testing with GitHub Actions","stackbit_url_path":"posts/automated-unit-testing-with-github-actions","published":false,"date":"2021-09-12T09:00:00.000Z","excerpt":"How to automate your flutter unit testing with GitHub Actions","tags":["development","unit-testing","GitHub","automated-testing"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/flutter_gh_actions.jpg","cover_image":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/flutter_gh_actions.jpg","canonical_url":"https://remelehane.dev/posts/automated-unit-testing-with-github-actions"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/flutter_gh_actions.jpg\" alt=\"flutter_gh_actions\"></p>\n<p>Today we going to discuss the nicely simple way in which you can use GitHub's actions to automate the unit testing for your Flutter project. This can be very handy to prevent broken code from going to production, or even just as a sanity check for the code reviews. </p>\n<h3>Let's get started</h3>\n<p>Firstly, let's get a look at what our result is going to look like...</p>\n<pre><code class=\"language-yml\">name: Flutter Testing\n\non:\n  workflow_dispatch:\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - uses: subosito/flutter-action@v1.5.3\n      - name: Install packages\n        run: flutter pub get\n      - name: Run generator\n        run: flutter pub run build_runner build\n      - name: Run test\n        run: flutter test test\n</code></pre>\n<p>Now let's dive into what is going on here.</p>\n<p>First, we simply start off with a name and the triggers, this action will trigger for any pull-request made against the main branch as well as on \"workflow_dispatch\", which is GitHub for manually.</p>\n<p>The jobs section is where the actual work happens.</p>\n<p>GitHub exposes Linux, Windows and macOS environments for you to run actions within, as unit tests are platform agnostic, I prefer to run these against Linux, in part is it is the \"cheapest\" option, while for OpenSource projects you have unlimited minutes, private projects are collectively limited to 2000 minutes per month, with time multipliers based on the platform being used, you can read up about that <a href=\"https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions\">HERE</a>.</p>\n<p>The steps describe the order of flow for your action, which almost always will start with <a href=\"https://github.com/actions/checkout\">actions/checkout@v2.3.4</a>, which is the action that checks out the code into the instance of the action.</p>\n<p>As we are trying to test a Flutter project, we need to install flutter into the instance, for this we are calling <a href=\"https://github.com/subosito/flutter-action\">subosito/flutter-action@v1.5.3</a>, but default this will install the latest stable release, but you can configure this to another release or even pin it to a specific version.</p>\n<p>Next, we start interacting with our own code, we start by running flutter pub get so that we can install all our packages into the instance.</p>\n<p>The \"Run Generator\" step is an optional one for those of us who make use of code generation in our projects, something you can skip if you are not already running it locally.</p>\n<p>Lastly, we run our tests with <code>flutter test test</code>, while the 2nd \"test\" is not required, it is actually the path reference to the test folder, something I need to define in order for some of the mocking functions to work correctly within a few of my projects.</p>\n<h3>It's really that simple</h3>\n<p>Yes, it really is that simple, that is all you need to be able to run your automated tests using GitHub actions, how long it takes would depend on the size of your project. My smallest project which is about a handful of files takes just over a minute, one of my largest was thousands of files with just over 1k test over 12k LOC and 80% coverage took about 9 minutes.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you liked it, a heart would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/learning-by-solving-a-problem/\">Learning, by solving a “problem”</a></li>\n<li><a href=\"https://remelehane.dev/posts/why-choose-flutter/\">Why choose Flutter?</a></li>\n</ul>"},{"url":"/blog/","relativePath":"blog/index.md","relativeDir":"blog","base":"index.md","name":"index","frontmatter":{"title":"Blog","seo":{"title":"Blog | Reme Le Hane | Flutter Developer","description":"Blog | Reme Le Hane | Flutter Developer","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Blog | Reme Le Hane | Flutter Developer","keyName":"property"},{"name":"og:description","value":"Blog | Reme Le Hane | Flutter Developer","keyName":"property"},{"name":"og:image","value":"images/1.jpg","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Blog | Reme Le Hane | Flutter Developer"},{"name":"twitter:description","value":"Blog | Reme Le Hane | Flutter Developer"},{"name":"twitter:image","value":"images/1.jpg","relativeUrl":true}]},"template":"blog"},"html":""},{"url":"/posts/bringing-localization-into-your-widget-testing/","relativePath":"posts/bringing-localization-into-your-widget-testing.md","relativeDir":"posts","base":"bringing-localization-into-your-widget-testing.md","name":"bringing-localization-into-your-widget-testing","frontmatter":{"title":"Bringing localization into your Widget testing","stackbit_url_path":"posts/bringing-localization-into-your-widget-testing","date":"2020-07-20T07:16:01.000Z","excerpt":"The more accurate you make your test, the higher the quality of the test itself.","tags":["widgettesting","unittesting","flutter","mockito"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*KcSljL8cBi93F7WyFYOYQg.jpeg"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*KcSljL8cBi93F7WyFYOYQg.jpeg\" alt=\"Localization logo\"></p>\n<p>The more accurate you make your test, the higher the quality of the test itself.</p>\n<p>Many apps these days are built to be more accessible, one thing we do to ensure this is we localize our applications, allowing people who do not speak the same language as we do, to also use the application.</p>\n<p>In our application, we have been using <a href=\"https://pub.dev/packages/easy_localization\">easy_localization</a>, I know there are quite a few choices, but for us, this was one of the easier ones to implement and for us, the JSON support was a big win with how we manage our localization.</p>\n<p>To ensure we have the most accurate widget tests, we rather use “real” localizations than having to mock the helper classes.</p>\n<p>To do this we keep a local copy of the locale JSON files to keep them safe from external updates and have created a helper function createLocalizedWidgetFortesting which looks like:</p>\n<pre><code class=\"language-dart\">Widget createLocalizedWidgetForTesting({Widget child}) {\n  return EasyLocalization(\n    path: '$TEST\\_MOCK\\_STORAGE/locale',\n    useOnlyLangCode: true,\n    assetLoader: FileAssetLoader(),\n    fallbackLocale: const Locale('en'),\n    supportedLocales: globals.supportedLocale,\n    saveLocale: false,\n    child: MaterialApp(\n      home: Scaffold(\n        body: child,\n      ),\n    ),\n  );\n}\n</code></pre>\n<p>As you will see, EasyLocatlizationrequires a path, that is simply a constant that we have defined a little higher in the file, as it is used as part of other mocks.</p>\n<pre><code class=\"language-dart\">const TEST\\_MOCK\\_STORAGE = './test/fixtures/core';\n</code></pre>\n<p>Beyond that, everything else is pretty much how it is set up in main.dart.</p>\n<p>Here is a simplified example of how a test would look with this implementation.</p>\n<pre><code class=\"language-dart\">void main() {\n  testWidgets(\n    'Should render localized widget',\n    (\n      WidgetTester tester,\n    ) async {\n      await tester.pumpWidget(\n        createLocalizedWidgetForTesting(\n          child: SampleWidget(),\n        ),\n      );\n\n      await tester.pumpAndSettle();\n\n      // expectations to follow\n    }\n  );\n}\n</code></pre>\n<p>Through this would be able to run proper expectations like:</p>\n<pre><code class=\"language-dart\">expect(find.text(\"Sample localized text\", findsOneWidget);\n</code></pre>\n<p>More importantly, if you have a language switcher that a user can select you can test for text changes through a setup flow.</p>\n<p>I hope you found this useful if you want to learn more about flutter testing why not take a look at some of the other posts we have written…</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you liked it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<p><a href=\"https://remelehane.dev/posts/widget-testing-passed-in-function-kpi/\">Widget testing passed in function</a></p>"},{"url":"/apps/","relativePath":"apps.md","relativeDir":"","base":"apps.md","name":"apps","frontmatter":{"title":"Applications","hide_title":false,"seo":{"title":"Applications | Reme Le Hane | Flutter Developer","description":"Applications | Reme Le Hane | Flutter Developer","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Reme Le Hane | Flutter Developer","keyName":"property"},{"name":"og:description","value":"Reme Le Hane | Flutter Developer","keyName":"property"},{"name":"og:image","value":"images/4.jpg","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Reme Le Hane | Flutter Developer"},{"name":"twitter:description","value":"Reme Le Hane | Flutter Developer"},{"name":"twitter:image","value":"images/4.jpg","relativeUrl":true}]},"template":"page"},"html":"<h2>Calorie Diff</h2>\n<p>\n    <img src=\"https://raw.githubusercontent.com/RemeJuan/calorie_diff/main/readme/CalorieDiff_Banner.jpg\"/>\n</p>\n<p><a href=\"https://caloriediff.app/\">Website</a> | <a href=\"https://apps.apple.com/za/app/calorie-diff/id6444097631\">AppStore</a></p>\n<p>I train quite a lot, and with that comes proper nutrition control, I make use of MFP for tracking food, however, it only imports exercise activities from external data sources, which is by no means a complete picture.</p>\n<p>As an Apple user, I was also not able to find an easy way to get the data I wanted out, not even with Shortcuts.</p>\n<p>I simply wanted a quick glance at my caloric status, am I in deficit or surplus.</p>\n<p>This app, while probably an over engineered solution, deals with that, it takes in teh Active, Resting and Dietary energy from AppleHealth and does just that, displays you intake, your output and the difference</p>\n<h2>3D Print Cost Calculator</h2>\n<p>\n  <img src=\"https://raw.githubusercontent.com/RemeJuan/threed_print_cost_calculator/main/android/app/src/main/play_store_feature.jpg\"/>\n</p>\n<p><a href=\"https://3dpcc.pages.dev/\">PWA</a> | <a href=\"https://apps.apple.com/us/app/3d-printer-cost-calculator/id6444106268\">AppStore</a> | <a href=\"https://play.google.com/store/apps/details?id=com.threed_print_calculator\">PlayStore</a></p>\n<p>A small app to help you calculate the cost of printing your 3D models.</p>\n<p>While there are many other out there, I saw none that were both simple for a quick personal check, and allowed you to enter the actual wattage of your printer, which an essential value in an accurate calculation.</p>\n<h2>Playoffs Score Card</h2>\n<p><img src=\"https://play-lh.googleusercontent.com/pQeO7PHNDvS2uTO7TG4G93Lk5X7tgTvTsEfEID08ywrT9JUjipQfVn0thxfnnryF4w=w832-h470\"/></p>\n<p><a href=\"https://playoffs-score-tracker.pages.dev/\">PWA</a> | <a href=\"https://play.google.com/store/apps/details?id=com.playoffs_score_card\">GooglePlay</a> | <a href=\"https://apps.apple.com/us/app/playoffs-score-card/id6444212103\">AppStore</a></p>\n<p>A simple web app for users to track their progress across the <a href=\"https://www.f45playoffs.com/\">F45 Playoffs</a>.</p>\n<p>Keeping things simple, you can use this app to track both your current Playoffs or add in past results that you may still have and get a look at your progress.</p>"},{"url":"/posts/changing-your-debugging-browser-for-flutter-macos/","relativePath":"posts/changing-your-debugging-browser-for-flutter-macos.md","relativeDir":"posts","base":"changing-your-debugging-browser-for-flutter-macos.md","name":"changing-your-debugging-browser-for-flutter-macos","frontmatter":{"title":"Changing your debugging browser for Flutter (MacOS)","stackbit_url_path":"posts/changing-your-debugging-browser-for-flutter-macos","date":"2021-08-01T09:00:00.000Z","excerpt":"A quick walkthrough on how to go about changing your default debugging browser to something other than Chrome on MacOs","tags":["flutter","flutterdevelopment","flutterweb","brave"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/1*Pg4bQMyLXDKFUryrgxQrpw.png"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/1*Pg4bQMyLXDKFUryrgxQrpw.png\" alt=\"Be Brave\"></p>\n<p>By default, Flutter expects you to have Chrome installed in order to be able to develop and debug with Flutter for Web. Not all of us like or wish to use chrome, we each may have our preferred flavour of chromium, be it Brave, Opera, Vivaldi or many of the other options.</p>\n<p>While this is specifically for changing to <a href=\"https://brave.com/\">Brave</a>, the process should work the same for whichever your preferred Chromium flavour is.</p>\n<p>All applications are installed in your applications directory, and to override the “Chrome” browser you simply need to set a new path in your environment.</p>\n<p>This can be done by setting CHROME_EXECUTABLE in your bashrc or zshrc file, if you are using Brave, then the following should just work:</p>\n<pre><code>export CHROME_EXECUTABLE = /Applications/Brave Browser.app/Contents/MacOS/Brave Browser\n</code></pre>\n<p>If you are however using a different flavour of Chromium, then the way I found the correct path was to visit the “Application Monitor”. With the browser running.</p>\n<p>Here you would look for the running instance of the browser in the list, there may be more than one, which is normal these days as many chromium browsers isolate each tab in its own running instance for performance and security.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/1*1YjQBN3lVqxZAnpANRAsRw.png\" alt=\"Activity Monitor Screenshot\"></p>\n<p>You should see something similar to the above, once highlighted you want to click on the “I” icon and from the next window, click on the “Open Files and Ports” tab.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/1*9mzFkahUTpL_Grcn_IE30w.png\" alt=\"Brave processor details screenshot\"></p>\n<p>In the above screenshot, the line you are looking for is the 4th one:</p>\n<pre><code>/Applications/Brave Browser.app/Contents/MacOS/Brave Browser\n</code></pre>\n<p>This is the path that you will be setting as the CHROME_EXECUTABLE.</p>\n<p>Then somewhere, probably at the bottom, of the files mentioned above, you will then add:</p>\n<pre><code>export CHROME_EXECUTABLE = \"YOUR PATH HERE...\"\n</code></pre>\n<p>Once done, load the file into your terminal or simply execute that same line within your terminal to update the environment.</p>\n<p>To reload the file simply run:</p>\n<pre><code>. ~/.zshrc\nor\n. ~/.baschrc\n</code></pre>\n<p>Then to confirm everything was successful, run flutter doctor -v and check the output, it should include something like this and the CHROME_EXECUTABLE path should be the one you set.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/1*mnNBY268LRBJ_J_1Zx4XRg.png\" alt=\"Terminal screenshot showing the updated chrome path in Flutter Doctor\"></p>\n<p>If like me you use the built-in tooling for your editor, you may need to restart your editor for the new environment variables to be loaded in, otherwise hitting play may continue to use Chrome.</p>\n<p>It is also possible to run:</p>\n<pre><code>flutter run -d web-server\n</code></pre>\n<p>However, at the time of writing this method did not support hot restart, so while simpler, not as useful down the line</p>\n<p>Thank you for reading, hope you found this useful and can now use your preferred flavour of chromium to better enjoy your flutter development experience.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you liked it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/my-essential-tools-as-a-flutter-developer/\">My essential tools as a Flutter Developer</a></li>\n<li><a href=\"https://remelehane.dev/posts/unit-testing-dattimenow-with-the-help-of-dart-extensions/\">Unit testing DateTime.now() with the help of Dart extensions</a></li>\n</ul>"},{"url":"/posts/dependency-injection-and-testing/","relativePath":"posts/dependency-injection-and-testing.md","relativeDir":"posts","base":"dependency-injection-and-testing.md","name":"dependency-injection-and-testing","frontmatter":{"title":"Dependency Injection and Testing","stackbit_url_path":"posts/dependency-injection-and-testing","date":"2020-08-17T07:16:01.000Z","excerpt":"","tags":["unittesting","widgettesting","flutterdevelopment","flutterappdevelopmen"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*w_Hwise5fi9orTgRt5ClQA.jpeg"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*w_Hwise5fi9orTgRt5ClQA.jpeg\" alt=\"Flutter Header\"></p>\n<p>Using dependency injection can be great for simplifying your code and keeping it DRY, it can also simplify testing and even improve testability.</p>\n<p>If you have not started using dependency injection in your app, you may want to take a look at <a href=\"https://pub.dev/packages/get_it\">get_it</a>.</p>\n<p>For those already using it, this is how you would go about testing your code that implements these injections.</p>\n<pre><code class=\"language-dart\">class DateTimeHelpers {\n int nowInMilliseconds() => DateTime.now().millisecondsSinceEpoch;\n}\n</code></pre>\n<p>That is a small helper I created for use within various UI’s pull-to-refresh logic to track a last updated value to ensure the spinner goes away incase the API data has not changed.</p>\n<p>Obviously not essential to have a simple helper as part of the dependency injection but as all our BloC’s, Cubits, Use Cases, Repositories, etc already is it just keeps in line with the current code-styling.</p>\n<p>If used in a widget, it would be accessed as:</p>\n<pre><code class=\"language-dart\">sl&#x3C;DateTimeHelpers>().nowInMilliseconds()\n</code></pre>\n<p>Where\n<code>sl</code>\nis assigned to G\n<code>etIt.instance</code>\n.</p>\n<p>For testing, you would simply use a mocked class:</p>\n<pre><code class=\"language-dart\">class MockDateTimeHelpers extends Mock implements DateTimeHelpers {}\n</code></pre>\n<p>Now if you were using this in say a bloc you would not need to also mock the dependency injection, you would simply provide the MockClass to your test BLoC, however, if you were to use this in a Widget which would be unlikely for this specific helper, you would need to add a few extra lines to your testing code.</p>\n<p>You would need to initialize your dependencies within your test, same as you would have done in your application code.</p>\n<pre><code class=\"language-dart\">setUp(() {\n  // Setup the application services\n  di.initServices();\n  di.sl.allowReassignment = true;\n});\n</code></pre>\n<p>Within your tests\n<code>setUp</code>\nmethod, you would initialize your dependencies and then beneath that you enable\n<code>allowReassignment</code>\n. That, as the name suggests allows you to reassign your dependencies.</p>\n<p>You can then register a new dependency using your mocked class:</p>\n<pre><code class=\"language-dart\">mockDateTimeHelpers = MockDateTimeHelpers();\n\nsl.registerSingleton&#x3C;DateTimeHelpers>(mockDateTimeHelpers);\n</code></pre>\n<p>This will ensure your code runs, and if you need to control the returned value during your tests you can simply use the\n<code>when</code>\nfrom\n<code>Mokito</code>\nto return a value of your choosing.</p>\n<pre><code class=\"language-dart\">when(mockDateTimeHelpers.nowInMilliseconds).thenReturn(100);\n</code></pre>\n<p>Then for that test or tests, depending on where you added that you can then expect that 100 to be returned whenever the Widget uses that helper.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you liked it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>"},{"url":"/posts/deploy-flutter-app-playsotre-github-actions/","relativePath":"posts/deploy-flutter-app-playsotre-github-actions.md","relativeDir":"posts","base":"deploy-flutter-app-playsotre-github-actions.md","name":"deploy-flutter-app-playsotre-github-actions","frontmatter":{"title":"Deploying Flutter Application with Github Actions (PlayStore)","stackbit_url_path":"posts/deploy-flutter-app-playsotre-github-actions","date":"2023-06-19T09:00:00.000Z","excerpt":"","tags":["flutter","github","cicd","flutterdevelopment"],"template":"post","thumb_img_path":"https://img.freepik.com/free-vector/mobile-app-development-composition-with-flowchart-isometric-platforms-application-icons-human-characters-text-captions-vector-illustration_1284-77306.jpg?size=626&ext=jpg&ga=GA1.1.2116175301.1701561600&semt=ais","cover_image":"https://img.freepik.com/free-vector/mobile-app-development-composition-with-flowchart-isometric-platforms-application-icons-human-characters-text-captions-vector-illustration_1284-77306.jpg?size=626&ext=jpg&ga=GA1.1.2116175301.1701561600&semt=ais","published_at":"2023-06-19T09:00:00.000Z","canonical_url":"https://remelehane.dev/posts/deploy-flutter-app-playsotre-github-actions/"},"html":"<p><img src=\"https://img.freepik.com/free-vector/mobile-app-development-composition-with-flowchart-isometric-platforms-application-icons-human-characters-text-captions-vector-illustration_1284-77306.jpg?size=626&#x26;ext=jpg&#x26;ga=GA1.1.2116175301.1701561600&#x26;semt=ais\"></p>\n<p>‍</p>\n<p>Image Source: FreeImages</p>\n<h2>Introduction</h2>\n<p>As Flutter continues to gain popularity among developers, the need for efficient and streamlined deployment processes has become paramount. One powerful tool that can help in this regard is Github Actions, a continuous integration and continuous delivery (CI/CD) platform provided by GitHub. In this guide, we will explore how to deploy a Flutter application using Github Actions, step by step. We will cover everything from setting up the workflow to signing and deploying the app on the Play Store.</p>\n<h2>Enabling Github Actions and Setting up the Workflow</h2>\n<p>To start leveraging the power of Github Actions for deploying your Flutter application, you need to enable it for your repository. Once enabled, you can add a workflow file that defines the steps and actions to be performed during the deployment process.</p>\n<ol>\n<li>Create a <code>.github/workflows</code> directory at the root of your project.</li>\n<li>In the <code>.github/workflows</code> directory, create a file named <code>build.yml</code>.</li>\n<li>Copy the following instructions into the <code>build.yml</code> file:</li>\n</ol>\n<pre><code class=\"language-yaml\"># Name of the workflow\nname: Build\n\n# Controls what will trigger the workflow. Change it to your needs.\non:\n  # A new push to the \"main\" branch.\n  push:\n    branches: [ \"main\" ]\n  # A new pull request to the \"main\" branch.\n  pull_request:\n    branches: [ \"main\" ]\n  # Allows to trigger the workflow from GitHub interfaces.\n  workflow_dispatch:\n\n# A single workflow can have multiple jobs.\njobs:\n  # 'A new job is defined with the name: \"build_android\"\n  build_android:\n    # Defines what operating system will be used for the actions.\n    # For android, we will use Linux GitHub-Hosted Runner.\n    runs-on: ubuntu-22.04\n\n    # Defines what step should be passed for successful run\n    steps:\n      # Checkout to the selected branch\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      # Download and install flutter packages\n      - name: Install Flutter\n        uses: subosito/flutter-action@v2\n        with:\n          flutter-version: \"3.10.0\" # Change to the version you use in your project\n</code></pre>\n<p>Make sure to customize the workflow file according to your project's specific needs, such as branch names and Flutter versions.</p>\n<h2>Building the App and Generating an Unsigned App Bundle</h2>\n<p>Once you have set up the workflow, the next step is to build your Flutter application and generate an unsigned App Bundle. The App Bundle is a publishing format that contains all the compiled code and resources of your app, optimized for distribution on the Google Play Store.</p>\n<p>To build the app and generate the unsigned App Bundle, follow these steps:</p>\n<ol>\n<li>Remove the release build type 'signingConfig signingConfigs.debug' from <code>./android/app/build.gradle</code>.</li>\n<li>Add the following code to your workflow file:</li>\n</ol>\n<pre><code class=\"language-yaml\"># Build release app bundle\n- name: Build release app bundle\n  run: flutter build appbundle\n</code></pre>\n<p>This command will build the app and generate an unsigned App Bundle in the output directory of your project. This step ensures that every time you push a new commit, a new unsigned App Bundle is generated.</p>\n<h2>Signing the App Bundle</h2>\n<p>Before you can deploy your app to the Play Store, you need to sign the App Bundle with a signing key. Signing the app bundle ensures the integrity and authenticity of your app.</p>\n<p>To sign the App Bundle, follow these steps:</p>\n<ol>\n<li>Generate a signing key using the <code>keytool</code> command. This key will be used to sign the App Bundle. For example:</li>\n</ol>\n<p><code>keytool -genkey -v -keystore mykey.keystore -alias mykey -keyalg RSA -keysize 2048 -validity 10000</code>  </p>\n<ol start=\"2\">\n<li>Encode the keystore file as base64. You can use the following command:</li>\n</ol>\n<p><code>base64 -i ./mykey.keystore -o ./keystore-base64.txt</code></p>\n<ol start=\"3\">\n<li>Add the base64 encoded keystore file, along with other necessary information, as secrets in your GitHub repository. Make sure to remove any spaces when adding the secrets.</li>\n<li>In your workflow file, add the following code to sign the App Bundle:</li>\n</ol>\n<pre><code class=\"language-yaml\"># Sign App Bundle\n- name: Sign App Bundle\n  uses: r0adkll/sign-android-release@v1\n  id: sign_app\n  with:\n    releaseDirectory: build/app/outputs/bundle/release/\n    signingKeyBase64: ${{ secrets.KEYSTORE_BASE64 }}\n    alias: ${{ secrets.KEY_ALIAS }}\n    keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}\n    keyPassword: ${{ secrets.KEY_PASSWORD }}\n</code></pre>\n<p>Replace the secret names (<code>KEYSTORE_BASE64</code>, <code>KEY_ALIAS</code>, <code>KEYSTORE_PASSWORD</code>, <code>KEY_PASSWORD</code>) with the respective secrets you added to your repository.</p>\n<h2>Deploying the App to the Play Store</h2>\n<p>Now that you have a signed App Bundle, you can proceed with deploying your Flutter app to the Play Store. The Play Store is the primary distribution platform for Android apps.</p>\n<p>To deploy the app to the Play Store, follow these steps:</p>\n<ol>\n<li>Create a service account on Google Cloud Console and download the service account JSON file.</li>\n<li>Add the service account JSON as a secret in your GitHub repository.</li>\n<li>Enable the Google Play Android Developer API.</li>\n<li>In your workflow file, add the following code to upload the signed App Bundle to the Play Store:</li>\n</ol>\n<pre><code class=\"language-yaml\"># Upload to Play Store (Internal Testing)\n- name: Upload to Play Store (Internal Testing)\n  uses: r0adkll/upload-google-play@v1.0.18\n  with:\n    serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}\n    packageName: com.example.app\n    releaseFiles: ${{ steps.sign_app.outputs.signedReleaseFile }}\n    mappingFile: ./build/app/outputs/mapping/release/mapping.txt\n    track: internal\n</code></pre>\n<p>Replace <code>com.example.app</code> with your app's package name and <code>SERVICE_ACCOUNT_JSON</code> with the name of the secret containing the service account JSON.</p>\n<h2>Conclusion</h2>\n<p>In this comprehensive guide, we have covered the process of deploying a Flutter application using Github Actions. From enabling Github Actions and setting up the workflow to signing the app bundle and deploying it to the Play Store and App Store, we have explored the entire deployment pipeline. By leveraging the power of Github Actions, you can automate and streamline your deployment process, saving time and effort. We hope this guide has provided you with the knowledge and tools to successfully deploy your Flutter app with ease. Happy deploying!</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/deplying-flutter-application-azure/\">Deploying a Flutter Application on Azure Pipelines: A Comprehensive Guide</a></li>\n<li><a href=\"https://remelehane.dev/posts/the-power-of-flutter/\">The Power of Flutter: Creating Cross-Platform Applications</a></li>\n</ul>"},{"url":"/posts/deploying-a-flutter-app-on-azure-pipeline/","relativePath":"posts/deploying-a-flutter-app-on-azure-pipeline.md","relativeDir":"posts","base":"deploying-a-flutter-app-on-azure-pipeline.md","name":"deploying-a-flutter-app-on-azure-pipeline","frontmatter":{"title":"Deploying a Flutter App on Azure Pipeline","stackbit_url_path":"posts/deploying-a-flutter-app-on-azure-pipeline","date":"2020-05-01T02:27:00.000Z","excerpt":"Recently I decided it was time to remove the build process from my own machine, I had looked at codemagic.io, but cost wise it would not have been feasible when we already had a full azure setup for the rest of our products.","tags":["flutter","android","fastlane","ios"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*8vESVWZfAnEeICajgWOODA.jpeg"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*8vESVWZfAnEeICajgWOODA.jpeg\" alt=\"Flutter Banner Image\"></p>\n<h3>Background:</h3>\n<p>Recently I decided it was time to remove the build process from my own machine, I had looked at codemagic.io, but cost wise it would not have been feasible when we already had a full azure setup for the rest of our products.</p>\n<p>There was not too much info available online as to how to get it work, specifically iOS, and that which I did find, did not work, so just in case anyone else has a tough time, here is what I ended up doing.</p>\n<p>To work around some of the issues I was facing, I needed to add <a href=\"https://fastlane.tools/\">fastlane</a> into the pipeline, which was how I had been doing the deployments up until now.</p>\n<p>Using the available tooling for getting iOS built was not easy to figure out at all and in the end I was never able to work out how to resolve the last (I presume) issue with signing the archive.</p>\n<p>The android tool worked, only issue I had was that it could only build for a single architecture, and I was not using aab for this project, and building a standalone 32b apk resulted in upload failures as it did not pass 64b requirements.</p>\n<p>The android tools worked right off the bat, but for me a big limitation was the inability to build multiple apk’s( — split-per-abi) and at this stage moving over to aab is not an option. This meant I was only able to push up the 64 bit apk as the 32 bit naturally failed the 64 bit check.</p>\n<h3>The Steps:</h3>\n<p>For a quick overview, which covers purely the pipeline here is my yaml file, however a few other code changes where made as well to facilitate these steps.</p>\n<iframe class=\"liquidTag\" src=\"https://dev.to/embed/gist?args=https%3A%2F%2Fgist.github.com%2FRemeJuan%2Fd5bfaf9fc59a666527f519cd4b0266ed\" style=\"border: 0; width: 100%;\"></iframe>\n<p>The first step was simply to install <a href=\"https://fastlane.tools/\">fastlane</a>, which was done using the command-line tool:</p>\n<pre><code>brew install fastlane\n</code></pre>\n<p>I also had to ensure the gem bundler was correctly setup, I included this in a separate command-line script which makes it easier when debugging output.</p>\n<pre><code>gem install bundler\n\nbundle update --bundler\n\nbundle install\n</code></pre>\n<p>On the code side I added a new lane* to fastlane to ensure the provisioning profiles where there and up-to-date. Using a white-label app we use a profile per pipeline/client as it’s easier to manage, especially for the few that use their own store accounts. Fastlane is also capable of generating these for you from the command-line</p>\n<blockquote>\n<p>*a lane is basically command line script group</p>\n</blockquote>\n<pre><code>desc \"Update provisioning profile\"\n lane :profile do\n update\\_project\\_provisioning(\n  xcodeproj: \"Runner.xcodeproj\",\n  profile: \"./provisioning\\_profiles/FILE\\_NAME.mobileprovision\",\n  build\\_configuration: \"Release\",\n )\n  end\n</code></pre>\n<p>These few steps use the built in tooling which may need to be installed from the market place.</p>\n<p><strong>Install provisioning profile</strong> (as from previous step)<br>\n<strong>Install the Apple Developer Certificate<br>\nInstall Flutter<br>\nFlutter Build</strong>  (iOS)</p>\n<p>This was where I had my most issues with the tooling, I could not workout how to get XCode to generate the archive (ipa) so for that I used <a href=\"https://fastlane.tools/\">fastlane</a>.</p>\n<pre><code>bundle exec fastlane ios ci\n</code></pre>\n<p>Which is another lane I added to <a href=\"https://fastlane.tools/\">fastlane</a>, pretty much the default <a href=\"https://fastlane.tools/\">fastlane</a> setup without the push to test flight step:</p>\n<pre><code>build\\_app(\n    workspace: \"Runner.xcworkspace\",\n    scheme: \"Runner\",\n    output\\_directory: \"../build\",\n    output\\_name: \"app.ipa\",\n    clean: true,\n)\n</code></pre>\n<p>The App Store release tooling however works great and requires less config than I would have needed with <a href=\"https://fastlane.tools/\">fastlane</a>.</p>\n<p>I also used <a href=\"https://fastlane.tools/\">fastlane</a> to build the android apk’s, this way I could build all architectures, which is 3 in my case, with a single command.</p>\n<pre><code>$(FlutterToolPath)/flutter build apk --split-per-abi --build-number=$(buildNumber) --build-name=$(package.version)\n</code></pre>\n<p>Finally, using the <strong>Google Play — Release</strong> tool I simply provided the primary apk path as the 64bit one and under advanced options you can pass a path $(Build.SourcesDirectory)/build/app/outputs/apk/release/*.apk so that you can then push all 2 or 3 files generated files.</p>\n<p>If you are however using aab you can simply build that with the available tools.</p>\n<h3>Conclusion:</h3>\n<p>I hope if you have made it this far you found it useful, the android steps are pretty strait forward, using <a href=\"https://fastlane.tools/\">fastlane</a> there is more of a “me” requirement other than something I think will generally be used, it is advisable to use the aab rather, but managing multiple apps for multiple clients I feel may be unnecessarily complicate the process especially seeing as we will need to update existing apps.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you liked it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>"},{"url":"/posts/developing-on-an-m1-mac-flutter/","relativePath":"posts/developing-on-an-m1-mac-flutter.md","relativeDir":"posts","base":"developing-on-an-m1-mac-flutter.md","name":"developing-on-an-m1-mac-flutter","frontmatter":{"title":"Developing on an M1 Mac (Flutter)","stackbit_url_path":"posts/developing-on-an-m1-mac-flutter","date":"2021-06-07T07:02:30.000Z","excerpt":"I recently started working with Flutter during an RnD phase at work after Ionic which had been the planned direction revealed itself to be a non-viable option given the businesses requirement.","tags":["macbookpro","m1chip","flutter","mobiledevelopment"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*Kt-OmebhakPpDpsbBZZHCQ.jpeg"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*Kt-OmebhakPpDpsbBZZHCQ.jpeg\" alt=\"My desk with both the 15&#x22; i9 and 13&#x22; M1 MacBook Pro’s\"><figcaption>My desk with both the 15\" i9 and 13\" M1 MacBook Pro’s</figcaption></p>\n<p>Recently I took a position as a contract worker, while the job was interesting, the timing could have been better as I obviously moved from company-provided hardware to personal hardware.</p>\n<p>As a very comfortable Mac user, having been using one since 2018 already, going back to windows, or even Linux was not really ideal for me, and let’s be honest, a dev quality PC would have cost about the same as the M1 anyway.</p>\n<p>Initially, I had planned on waiting for the upcoming 16\" M1X/M2 or whatever they intend to call it, however, I went ahead and grabbed the 13\" Pro with 16GB ram.</p>\n<p>I got the new Mac before finishing up at the company I was working with, so for a short time, I had both the 15\" I9 Pro and the new 13\" M1 Pro sitting on my desk. This allowed me to have a bit of fun and actually run benchmarks on both and compare.</p>\n<p>I was not planning on writing this at the time, so none of those benchmarks are saved anywhere, but at least on those, it did score higher, pretty close to the 20% ish marks you see in some of the online reviews.</p>\n<h4>Initial impressions…</h4>\n<p>Fast-forward a few weeks, this has been my daily driver for around 3 weeks now and I do find that I actually like the keyboard much better, raised keys just feel nicer for me, maybe I like the longer travel, not something I give too much thought to.</p>\n<p>The smaller screen has not bothered me in the slightest, and personally do not make use of external monitors, for me, with the gestures and virtual desktops, I always found myself more productive, or at least it feels that way and I guess that’s the important bit. Also, I do tend to travel a bit with the machine and I also have both a seated and standing desk in my home office so I am most certainly not about to buy 2 monitors.</p>\n<p>The biggest “con” for me with using the smaller unit is the trackpad, that reduced size I do notice.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*L0a5Si8dT5ACYGpfh6Whzw.jpeg\" alt=\"My desk with the 13&#x22; M1 Macbook Pro\"><figcaption>My desk with the 13\" M1 Macbook Pro</figcaption></p>\n<h4>Development usage…</h4>\n<p>I think the important part really comes down to how well it performs on a day-to-day with actual work.</p>\n<p>For context, the tech I work with daily is Flutter, but I also have a few side/personal projects in node and use docker as part of some of those development requirements.</p>\n<p>My IDE of choice is IntelliJ IDEA, VSCode just does not cut it for me, and I do at least think there are some very useful things I get from II that amaze people using VS, so well worth the small fee.</p>\n<p>So working on both web and mobile apps, the battery life is insane, I can easily get through a really busy, screen practically never off day on a single charge if it gets a bit more chilled and I am focusing more on the requirements and documentation side of things I can get up to 4 days on a single charge. Generally speaking, I would avg 2 days on a single charge, this makes it a great travel machine when you can confidently be away from power for hours on end.</p>\n<p>Comparatively the 15\" that I had, I think the best I ever got off a single charge was around 4 maybe 5 hours, it was about a year old when I got this one and it was pretty close to 2.5, maybe 3 hours.</p>\n<p>Have not paid much attention to charging times, I have so far only had to do that at the end of the day, so plug it in and walk away really. I think it takes about 2–3 hours on my 60w charger.</p>\n<p>So far I am yet to find anything that does not work, or that is obviously working badly with the M1. Generally speaking with apps running in dev mode I seldom get the CPU above 30%, as I am typing this now it is hovering between 15 and 18% and I have Safari and Chrome running with 1 tab in chrome and 18 in Safari, IDEA is running 2 projects both active and am playing music as well as have the usual chat apps, terminal, time logger, etc running.</p>\n<p>The one time I did see it climb up to 99% for a few minutes was when the compiler was running as part of the node install, not entirely sure what it was doing, but kept it up there for a good 10+ minutes.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*qod1YXr25wBQAwLYGn1jyg.png\" alt=\"Screenshot of my battery usage stats\"></p>\n<p>Given what I do on a day-to-day it is pretty hard to compare much else in regards to performance metrics, nothing I do runs any worse than it did on my I9, but nothing was ever intensive enough for me to say anything runs obviously better.</p>\n<h4>Final thoughts…</h4>\n<p>Overall my experience has been a very positive one, I am most certainly not regretting my decision in any way, I may still look into upgrading in the new year to the 16\", depending on what it brings to the table.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment.</p>\n<p>If you liked it, a heart would be awesome, and if you really liked it, a <a href=\"http://buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/react-to-flutter-one-developers-journey-part-1/\">React to Flutter: One Developers Journey — Part 1</a></li>\n<li><a href=\"https://remelehane.dev/posts/working-from-home-works-for-me/\">Working from home works for me…</a></li>\n</ul>"},{"url":"/posts/deplying-flutter-application-azure/","relativePath":"posts/deplying-flutter-application-azure.md","relativeDir":"posts","base":"deplying-flutter-application-azure.md","name":"deplying-flutter-application-azure","frontmatter":{"title":"Deploying a Flutter Application on Azure Pipelines: A Comprehensive Guide","stackbit_url_path":"posts/deploying-flutter-application-azure","date":"2023-04-17T09:00:00.000Z","excerpt":"","tags":["flutter","cicd","devops","azure"],"template":"post","thumb_img_path":"https://img.freepik.com/premium-photo/industrial-marvel-smokestacks-pipelines-beneath-azure-skies_153608-19360.jpg","cover_image":"https://img.freepik.com/premium-photo/industrial-marvel-smokestacks-pipelines-beneath-azure-skies_153608-19360.jpg","published_at":"2023-04-17T09:00:00.000Z","canonical_url":"https://remelehane.dev/posts/deploying-flutter-application-azure/"},"html":"<p><img src=\"https://img.freepik.com/premium-photo/industrial-marvel-smokestacks-pipelines-beneath-azure-skies_153608-19360.jpg\"></p>\n<h2>Introduction</h2>\n<p>As a developer, automating manual tasks is essential for improving productivity and saving time. One way to achieve this is by utilizing DevOps tools, specifically Azure Pipelines, to streamline the build and deployment process. In this comprehensive guide, we will explore the steps involved in deploying a Flutter application on Azure Pipelines. We will cover everything from installing necessary extensions to creating build and deployment pipelines, ensuring a smooth and efficient workflow.</p>\n<h2>Installing Flutter Tasks in Azure DevOps</h2>\n<p>Before we dive into the details of creating pipelines, we need to install the \"Flutter Tasks\" extension in Azure DevOps. This extension is instrumental in executing various Flutter-related tasks within the pipeline. You can download the extension from the Visual Studio Marketplace or use the provided link. Once installed, you will have access to a set of tasks specifically designed for Flutter development.</p>\n<h2>Creating a PR Build Pipeline in DevOps</h2>\n<p>To begin, we need to connect to our Git repository within Azure DevOps. Once connected, we can select the repository and create a starter pipeline. In this case, we are creating a PR (Pull Request) pipeline, which will automatically trigger a build whenever a PR is submitted and targets the \"develop\" branch.</p>\n<p>In the PR YAML file, we specify the necessary tasks for our pipeline. For a Flutter app, we typically include the following tasks:</p>\n<ol>\n<li><strong>FlutterInstall</strong>: This task installs the latest version of Flutter on the stable channel.</li>\n<li><strong>FlutterBuild</strong>: This task builds the Flutter app for both Android and iOS. We can customize various parameters such as build flavor and version number.</li>\n<li><strong>FlutterTest</strong>: This task runs all the tests in our Flutter project.</li>\n</ol>\n<p>By adding these tasks to our PR pipeline, we ensure that our app is built and tested whenever a PR is created. This helps maintain code quality and catch any potential issues early in the development process.</p>\n<h2>Setting Up a Deployment Pipeline in DevOps</h2>\n<p>Once our PR pipeline is in place, we can move on to creating a deployment pipeline for our Flutter app. The deployment pipeline will handle the process of releasing our app to different platforms. To create the deployment pipeline, we can leverage the existing YAML file from the PR pipeline and expand on it.</p>\n<p>To begin, we need to define some variables in the Library that will be used in the deployment pipeline. For Android, we need to add the key alias, password, and keystore variables. Similarly, for iOS, we need to add the certificate password, Certificates.p12 file, and provisioning profile variables.</p>\n<p>Once the necessary variables are set up, we can proceed with the deployment pipeline configuration. We start by adding the trigger at the top of the YAML file, specifying that the pipeline should be triggered whenever code is merged into the \"develop\" branch.</p>\n<h2>Android Signing and Publishing</h2>\n<p>For Android, we need to sign and publish our app so that it can be released to the Google Play Store. By using the Flutter tools and the available tasks in Azure DevOps, we can streamline this process.</p>\n<p>To sign and publish the Android app, we can use the following steps:</p>\n<ol>\n<li>Build the Android AAB for easy distribution through the Google PlayStore</li>\n<li>Use the Google Play - Release tool in Azure DevOps to upload the App Bundles to the Google Play Console.</li>\n</ol>\n<p>By following these steps, we can automate the process of signing and publishing the Android app, ensuring that it is ready for distribution on the Google Play Store.</p>\n<h2>iOS Signing and Publishing</h2>\n<p>For iOS, the process of signing and publishing the app is slightly different. One challenge with iOS is setting up the provisioning profiles and certificates correctly. To overcome this challenge, we can leverage the power of Fastlane, a popular tool for automating iOS and Android deployments.</p>\n<p>To sign and publish the iOS app, we can use the following steps:</p>\n<ol>\n<li>Install Fastlane using the command-line tool, ensuring that the gem bundler is correctly set up.</li>\n<li>Add a Fastlane lane to update the provisioning profiles. This lane will ensure that the profiles are up-to-date and ready for the build process.</li>\n<li>Use the Fastlane build command to generate the iOS archive (IPA) file. Specify the necessary parameters such as the workspace, scheme, and output directory.</li>\n<li>Finally, use the App Store release tooling in Azure DevOps to distribute the IPA file to the App Store. This tool simplifies the process of releasing the app and requires minimal configuration compared to Fastlane.</li>\n</ol>\n<p>By utilizing Fastlane and Azure DevOps, we can automate the signing and publishing process for iOS, making it easier and more efficient to deploy our Flutter app to the App Store.</p>\n<h2>Conclusion</h2>\n<p>In this comprehensive guide, we have explored the process of deploying a Flutter application on Azure Pipelines. We have covered everything from installing the necessary extensions to creating build and deployment pipelines for both Android and iOS.</p>\n<p>By leveraging the power of Azure DevOps and tools like Fastlane, we can automate the build, signing, and publishing processes, saving time and improving productivity. Whether you are targeting the Google Play Store or the App Store, Azure Pipelines provides a robust and efficient solution for deploying your Flutter app.</p>\n<p>Remember to stay updated with the latest tools and best practices in the Flutter ecosystem to ensure a smooth and successful deployment process. Happy Flutter development and may your apps reach new heights!</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/widget-testing-rendeflex-overflow/\">Widget testing: Dealing with Renderflex Overflow Errors</a></li>\n<li><a href=\"https://remelehane.dev/posts/up-your-testing-game/\">Flutter: Up your testing game</a></li>\n</ul>"},{"url":"/posts/diy-node-cache-for-docker-ci/","relativePath":"posts/diy-node-cache-for-docker-ci.md","relativeDir":"posts","base":"diy-node-cache-for-docker-ci.md","name":"diy-node-cache-for-docker-ci","frontmatter":{"title":"DIY node_modules cache for Docker in your CI","stackbit_url_path":"posts/diy-node-cache-for-docker-ci","date":"2022-08-01T09:00:00.000Z","excerpt":"A custom solution for speeding up docker builds within your CI using a custom node_modules cache container.","tags":["node","docker","ci","node_modules"],"template":"post","thumb_img_path":"https://raw.githubusercontent.com/RemeJuan/remelehane/main/2022/07/upgit_20220727_1658922123.webp","cover_image":"https://raw.githubusercontent.com/RemeJuan/remelehane/main/2022/07/upgit_20220727_1658922123.webp","canonical_url":"https://remelehane.dev/posts/diy-node-cache-for-docker-ci"},"html":"<p><img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/2022/07/upgit_20220727_1658922123.webp\" alt=\"timelab-pro-yx20mpDyr2I-unsplash\"></p>\n<h2>Background</h2>\n<p>While I am no DevOps expert, I have been working with CI tools for quite some time, and throughout my career, I have always aimed for optimal performance and efficiency both in my workflows and the products/web applications I build.</p>\n<p>While this in no means is a perfect solution, and to be honest it may not be the best one, but it does work pretty well in my testing.</p>\n<h2>Problem</h2>\n<p>Most applications we build today take as much advantage as possible/feasible of automated workflows. With everything from our testing, to deployments and more recently to some degree our code writing...</p>\n<p>One problem I have seen is when it comes to building images for JS based web applications, things like Vue and React, personally I have worked with React for many years and previously working on Azure we had build times of around 12 minutes for our web applications, more recently I have been working with Google Cloud and am seeing times of around 10 minutes.</p>\n<p>Now this is likely nothing to do with the CI tool, but to do with the size and complexity of the applications as much of this time is taken up by 1 common step, <code>npm install</code>, and given that this is an online action, many factors can influence how long this step takes.</p>\n<h2>Solution (?)</h2>\n<p>Recently while walking my dog, I had this crazy idea of creating my own caching container for node, I am a big fan of using multi-stage builds and had just updated the project to take care of this, prior to that update we where shipping the base node image which builds to about 1.6GB, switching to multi-stage and shipping the alpine container got it down to 140mb.</p>\n<p>While this idea is probably less viable, or at least beneficial for newer projects, older more mature and stables ones could see reasonable improvements with this idea.</p>\n<hr>\n<hr>\n<p>It starts with creating a cache image, a simple image that builds with the required base node image, and simply installs the node modules, we then copy those over to an alpine image and we done.</p>\n<pre><code class=\"language-yaml\">FROM node:18 as build\n\nCOPY package*.json ./\n\nRUN npm install --no-audit --progress=false\n\nFROM alpine as release\n\nCOPY --from=build /node_modules ./node_modules\n</code></pre>\n<p>This image becomes our \"cache\" image, and when in a more stable project, can be rebuilt weekly or even monthly as these package would be reasonably constant.</p>\n<p>From there, one simply includes it as part of the build stages, as you will see from the first line <code>FROM node-cache as cache</code>, where <code>node-cache</code> is whichever name you provided to the image, which may need to include a reference to the container registry.</p>\n<p>Do not forget that before this is used on a CI, the cache image does need to have been built and pushed to a container registry.</p>\n<pre><code class=\"language-yaml\">FROM node-cache as cache\n\n# Build Stage\nFROM node:18 as build\nCOPY --from=cache /node_modules ./node_modules\nCOPY package*.json ./\nCOPY . ./\nRUN npm install --no-audit --progress=false --prefer-offline\nRUN npm run build\n\n# Release stage\nFROM node:18-alpine as release\n# Copy files over from build stage\nCOPY --from=build /build ./build\nCOPY --from=build package*.json ./\nCOPY --from=build /server.js ./server.js\n\nRUN npm install --only=production\n\nCMD [ \"npm\", \"run\", \"prod\" ]\n</code></pre>\n<h3>Build Stage</h3>\n<p>This is where we make use of the cache, for this step we use the <code>node-18</code> image, the same image that was used as part of building the original cache image, and the key part of this is the line <code>COPY --from=cache /node_modules ./node_modules</code>, this line is copying the node modules folder from our cache into our build stage.</p>\n<p>Doing this means we now have access to the relevant installed package, in a like environment, within our build stage. We then copy over the package files specifically followed by the remaining files in the directory.</p>\n<p>It should also be noted that your project should include a <code>dockerignore</code> file, and <code>node_modules</code> should be specified in that file, otherwise the <code>COPY . ./</code> step would override the node_modules folder within the container.</p>\n<p>Next we run the <code>npm install</code> step, the additional arguments can speed things up a bit, but the also specify that npm needs to check locally before checking online, this would ensure that only packages added, or upgraded, since the cache images last build would then be downloaded.</p>\n<h3>Release Stage</h3>\n<p>If we take a look a bit further down at the release stage, the first few steps are to copy of the build directory (our compiled web app), the package.json file as well as the <code>server.js</code>.</p>\n<p>The <code>server.js</code> is a small <code>express</code> server, allowing us to access our application held within the docker container, from the web.</p>\n<pre><code class=\"language-js\">const http = require('http');\nconst Express = require(\"express\");\nconst path = require('path');\n\nconst port = process.env.PORT || 7010;\n\nconst app = Express();\nconst server = http.createServer(app);\n\nserver.listen(port, function () {\n    console.log(`Server listening on port ${port}`);\n});\n\napp.get('/', function(req, res) {\n    res.sendFile(path.join(__dirname, \"build\", \"index.html\"));\n});\n\napp.use(Express.static(path.join(__dirname, \"build\")));\n\nmodule.exports = server;\n</code></pre>\n<p>The second to last command is <code>RUN npm install --only=production</code>, that included flag instructs node to only install packages listed within the \"dependencies\" key of the <code>package.json</code>, ignoring anything in \"devDependencies\", so for this particular example, only <code>express</code> is being installed into the <code>alpine</code> image.</p>\n<p>For this to work best, you need to ensure your <code>package.json</code> is split up correctly to ensure only required packages are listed as dependencies, all the rest should be devDependencies.</p>\n<hr>\n<p>In my local testing, this resulted in an over 60% improvement in build times, with the average builds taking at least 150 seconds before this update, to under 50 seconds after.</p>\n<p>In the pipeline, we saw a 40-45% improvement in build times, which would be as a result of images needed to be downloaded first.</p>\n<p>For those who would like to take a further look, and even test out this solution, I have created a <a href=\"https://github.com/RemeJuan/docker-cache-example\">REPO</a> using the standard <a href=\"http://create-react-app.dev\">CRA</a>, where you will find similar Docker files, and you can follow the steps in the readme to get things going.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Also feel free to share a better solution if you have one :smile:</p>\n<p>If you liked it, a like would be awesome.</p>\n<p>Thanks for reading.</p>\n<hr>\n<p>Wish to carry on with the topic of Unit Testing, take a look at:</p>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/widget-testing-rendeflex-overflow/\">Widget testing: Dealing with Renderflex Overflow Errors</a></li>\n<li><a href=\"https://remelehane.dev/posts/up-your-testing-game/\">Flutter: Up your testing game</a></li>\n</ul>\n<p>Photo by <a href=\"https://unsplash.com/@timelabpro?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\">Timelab Pro</a> on <a href=\"https://unsplash.com/s/photos/container?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\">Unsplash</a></p>"},{"url":"/posts/essential-tools-for-a-flutter-developer/","relativePath":"posts/essential-tools-for-a-flutter-developer.md","relativeDir":"posts","base":"essential-tools-for-a-flutter-developer.md","name":"essential-tools-for-a-flutter-developer","frontmatter":{"title":"Essential Tools for Flutter Developers: Boosting Productivity and Efficiency","stackbit_url_path":"posts/essential-tools-for-a-flutter-developer","date":"2023-03-27T09:00:00.000Z","excerpt":"","tags":["flutter","flutterweb","fluttermobile","flutterdevelopment"],"template":"post","thumb_img_path":"https://img.freepik.com/free-vector/app-development-illustration_52683-47743.jpg?size=626&ext=jpg&ga=GA1.1.1412446893.1704931200&semt=ais","Cover_image":"https://img.freepik.com/free-vector/app-development-illustration_52683-47743.jpg?size=626&ext=jpg&ga=GA1.1.1412446893.1704931200&semt=ais","published_at":"2023-03-27T09:00:00.000Z","canonical_url":"https://remelehane.dev/posts/essential-tools-for-a-flutter-developer/"},"html":"<p><img src=\"https://img.freepik.com/free-vector/app-development-illustration_52683-47743.jpg?size=626&#x26;ext=jpg&#x26;ga=GA1.1.1412446893.1704931200&#x26;semt=ais\"></p>\n<p>Image Source: FreeImages‍</p>\n<p>As a Flutter developer, having the right set of tools is crucial to enhance productivity and simplify the development process. In this article, we will explore a curated list of essential tools that can help Flutter developers maximize their potential and create high-quality software applications. From integrated development environments (IDEs) to productivity apps, we will cover a range of tools that cater to different aspects of Flutter development.</p>\n<h2>IntelliJ IDEA: Powerhouse IDE for Flutter Development</h2>\n<p>IntelliJ IDEA is a popular integrated development environment (IDE) that offers a powerful set of features specifically designed for Flutter development. While many developers prefer using VSCode, IntelliJ IDEA has gained prominence due to its user-friendly interface, robust functionality, and excellent performance with large projects.</p>\n<p>One of the standout features of IntelliJ IDEA is its global search functionality, which allows developers to easily locate files, classes, and functions. This feature becomes particularly handy when you are unsure of the exact name or location of a specific element. Additionally, IntelliJ IDEA offers an intuitive commit functionality that allows for granular control over the changes being committed. Unlike the complexity of achieving similar functionality in VSCode, IntelliJ IDEA enables developers to selectively choose relevant changes and create more meaningful commit descriptions.</p>\n<p>IntelliJ IDEA also provides support for web-related languages such as JavaScript, HTML, and CSS, making it a versatile tool for Flutter developers working on projects that involve a mix of web and mobile development.</p>\n<h3>Installed Plugins for IntelliJ IDEA</h3>\n<p>To further enhance productivity, Flutter developers can leverage a range of plugins available for IntelliJ IDEA. Here are some recommended plugins that can make your development experience even better:</p>\n<ul>\n<li>BLoC: This plugin offers enhanced support for the BLoC (Business Logic Component) architecture, a popular pattern in Flutter development.</li>\n<li>Flutter Enhancement Suite: A comprehensive suite of tools and features that enhance the Flutter development experience, including code snippets and shortcuts.</li>\n<li>Flutter Snippets: A collection of code snippets that can accelerate development by providing ready-to-use templates for common Flutter components and patterns.</li>\n<li>GitToolBox: A plugin that integrates Git version control directly into IntelliJ IDEA, allowing for seamless collaboration and code management.</li>\n<li>Rainbow Brackets: This plugin enhances code readability by colorizing matching brackets, making it easier to navigate complex code structures.</li>\n<li>Save Actions: Automates code formatting and cleanup actions, ensuring consistent code style and reducing manual effort.</li>\n</ul>\n<p>By leveraging these plugins, Flutter developers can streamline their workflow and save valuable time while building robust and efficient Flutter applications.</p>\n<h2>Alfred: Boosting Efficiency with Spotlight Replacement</h2>\n<p>If you are a Mac user, Alfred can be a game-changer for your productivity. Alfred is a powerful spotlight replacement that offers extensive customization options and workflow automation capabilities. It serves as an all-in-one tool for launching applications, performing web searches, conducting calculations and conversions, and more.</p>\n<p>One of the most useful features of Alfred is the ability to create custom web searches. By defining shortcuts, you can quickly access specific webpages related to Flutter development or any other topic of interest. For example, you can set up a shortcut like \"ppac\" to directly search for Flutter packages on pub.dev.</p>\n<p>Another noteworthy workflow provided by Alfred is the \"calculate anything\" feature. This workflow utilizes natural language processing to perform calculations, currency conversions, and unit conversions. Simply type in a query like \"50 USD in euro\" to get the desired conversion result. Additionally, you can set a base currency for quicker conversions, such as \"50 USD\" if your base currency is euro.</p>\n<p>Alfred also offers a range of other helpful workflows, such as GitHub repository search, process killing, and intelligent notifications for emails. With its extensibility and customization options, Alfred empowers Flutter developers to optimize their daily tasks and streamline their workflow.</p>\n<h2>ZSH + oh-my-zsh: Supercharging Your Command Line</h2>\n<p>ZSH, a powerful shell scripting language, combined with the extensive customization capabilities of oh-my-zsh, can significantly enhance developer productivity. ZSH, an improvement over the traditional bash shell, offers numerous features and plugins that can help Flutter developers work more efficiently.</p>\n<p>The real power of ZSH lies in its ability to create aliases and shortcuts. With oh-my-zsh, developers can easily set up aliases for frequently used commands, reducing the need for repetitive typing. This feature alone can save significant time and effort in everyday development tasks. Additionally, oh-my-zsh provides a vast library of plugins that can further enhance the development workflow by adding useful functionalities.</p>\n<p>The theming options available in ZSH and oh-my-zsh also contribute to a personalized and visually appealing working environment. By adding colors and displaying the active branch when working in a version-controlled folder, ZSH adds a touch of customization to the command-line interface.</p>\n<p>To get started with ZSH and oh-my-zsh, you can refer to the provided link to access a sample zshrc file. This file showcases some of the available features and can serve as a reference for configuring your own ZSH environment.</p>\n<h2>Spark: Simplifying Email Management</h2>\n<p>Managing multiple email accounts efficiently is essential for developers. Spark, a mail application designed for simplicity and user-friendliness, addresses this need by providing a unified interface for handling multiple email accounts and calendars. While the web UI is often preferred for managing emails, Spark offers a convenient alternative by consolidating all your mail accounts and calendars in one place.</p>\n<p>Spark's intelligent features make email management a breeze. It offers accurate suggestions for organizing and archiving emails, saving you from the hassle of manual sorting. Additionally, Spark leverages Single Sign-On (SSO) during the initial setup, allowing your accounts to sync seamlessly across multiple devices.</p>\n<p>One of the standout features of Spark is its intelligent notification system. It assigns importance levels to incoming emails, ensuring that you are notified only for crucial messages. This feature is similar to GMail's priority mail functionality. However, it is worth noting that the importance categorization may differ across devices, resulting in varying notification behavior.</p>\n<p>Spark also allows for granular control over notifications on a per-account and per-device basis. This flexibility ensures that you can tailor your notification settings according to your preferences. For example, you can choose to receive work email notifications only on your Mac and exclude them from your phone or iPad.</p>\n<p>With its user-friendly interface and thoughtful features, Spark simplifies email management for Flutter developers, enabling them to stay organized and focused on their development tasks.</p>\n<h2>Conclusion</h2>\n<p>In this article, we have explored a range of essential tools that can significantly enhance the productivity and efficiency of Flutter developers. From IntelliJ IDEA, a powerful IDE optimized for Flutter development, to Alfred, a spotlight replacement with extensive customization options, each tool offers unique features and functionalities.</p>\n<p>By leveraging the power of ZSH and oh-my-zsh, Flutter developers can supercharge their command-line experience with aliases, shortcuts, and theming options. Additionally, Spark simplifies email management by providing a unified interface for handling multiple accounts and intelligent email organization.</p>\n<p>Remember, the right tools can make a significant difference in your development workflow. Experiment with these tools, explore their features, and customize them to suit your specific needs. As a Flutter developer, optimizing your tool stack can lead to increased productivity, improved code quality, and a more enjoyable development experience. So, go ahead and equip yourself with these essential tools to unlock your full potential as a Flutter developer!</p>\n<hr>\n<p>Wish to carry on with the topic of Unit Testing, take a look at:</p>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/automated-unit-testing-with-github-actions/\">Automated Unit Testing with GitHub Actions</a></li>\n<li>[Unit testing DateTime.now() with the help of Dart extensions](</li>\n</ul>"},{"url":"/posts/flutter-data-testing/","relativePath":"posts/flutter-data-testing.md","relativeDir":"posts","base":"flutter-data-testing.md","name":"flutter-data-testing","frontmatter":{"title":"Flutter: Data Testing","stackbit_url_path":"posts/flutter-data-testing","published":false,"date":"2022-05-09T12:00:00.000Z","excerpt":"This time we take a look at using predicated when testing data classes","tags":["flutter","flutterweb","fluttermobile","flutterdevelopment"],"template":"post","thumb_img_path":"https://raw.githubusercontent.com/RemeJuan/remelehane/main/2022/07/upgit_20220728_1658994619.webp","cover_image":"https://raw.githubusercontent.com/RemeJuan/remelehane/main/2022/07/upgit_20220728_1658994619.webp"},"html":"<p><img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/2022/07/upgit_20220728_1658994619.webp\" alt=\"shahadat-rahman-BfrQnKBulYQ-unsplash\"></p>\n<p>In a previous post, we discussed using <code>find.byPredicate</code> for more accurate and bulletproof widget testing.</p>\n<p><a href=\"https://remelehane.dev/posts/up-your-testing-game/\">Flutter: Up your testing game</a></p>\n<p>In this post we are going to quickly go through that same logic, but for data related unit testing.</p>\n<p>For the 95% of my data models, I would use <a href=\"https://pub.dev/packages/freezed\">freezed</a>, a wonderful package that makes one life a lot simpler when it comes to data classes, including adding in a few utility methods as well as simplifying unit testing by handling equality, something I previously achieved manually and with some help from <a href=\"https://pub.dev/packages/equatable\">equatable</a>.</p>\n<p>However, there is a bit of boilerplate when using <code>freezed</code> as it works with code generation.</p>\n<pre><code class=\"language-dart\">enum MenuItemKey {logout, dashboard}\n\nclass MenuItem {\n  final MenuItemKey key;\n  final String localeKey;\n  final PageRouteInfo route;\n\n  MenuItem({\n    required this.key,\n    required this.localeKey,\n    required this.route,\n  });\n  \n  static List&#x3C;MenuItem> menuItems = [...]\n    \n  static List&#x3C;MenuItem> itemsToDisplay(List&#x3C;MenuItemKey> excludedKeys) {\n    return menuItems\n        .where((element) => !excludedKeys.contains(element.key))\n        .toList();\n  }\n}\n</code></pre>\n<p>Take this class, for example, adding in <code>freezed</code> would have been straightforward, add 2 or 3 lines of code and an extra generated file, however to me it felt unnecessary as this is a model I created for simply managing a navigation list, there is no data to test, no relation to an API, no need for equality or the utility methods, etc.</p>\n<p>There is a menu in my application, which gets provided the <code>menuItems</code> list and with that, I generate the nav items.</p>\n<p>However, I do still want to be able to accurately test <code>itemsToDisplay</code>, the 1 bit of logic attached to this class, by default all items are based on the generation function, however not all screens have all the nav items. The login screen would have no need for the Logout button for example.</p>\n<h2>The Test...</h2>\n<p>As with widgets, we can use <code>predicate</code> as part of our expect function, to drill down into data models and compare results with defined values.</p>\n<pre><code class=\"language-dart\">  test('should return only logout menu item', () async {\n    //act\n    final result = MenuItem.itemsToDisplay([\n      MenuItemKey.dashboard,\n      MenuItemKey.support,\n      MenuItemKey.profile,\n    ]);\n    //assert\n    expect(\n      result,\n      predicate(\n        (List&#x3C;MenuItem> items) =>\n            items.length == 1 &#x26;&#x26; items.first.key == MenuItemKey.logout,\n      ),\n    );\n  });\n</code></pre>\n<p>In the above example, we would have had 4 items in the <code>menuItems</code> list and made the decision to filter out all BUT <code>logout</code>.</p>\n<p>In order to verify our function is working then, we use <code>predicate</code> which takes a function as an expectation, to which we have the data type we are expecting and then return a check which yields a boolean result.</p>\n<p>In this case, we had a list that contained 4 menu items, we excluded 3 of them so we verify that our list only has 1 item in it, and to make sure the correct item remains, we verify that the first (only) item in the list has the key of <code>MenuItemKey.logout</code>, which is the enum value assigned to the navigation item.</p>\n<h2>Conclusion...</h2>\n<p>As you can now see, <code>find.byPredicate</code> and <code>predicate</code> are 2 very useful methods that we as testers should keep in mind when writing out tests. They can help with less-standard use cases and allow us to write a higher-quality test.</p>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome.</p>\n<p>Thanks for reading.</p>\n<hr>\n<p>Wish to carry on with the topic of Unit Testing, take a look at:</p>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/widget-testing-rendeflex-overflow/\">Widget testing: Dealing with Renderflex Overflow Errors</a></li>\n<li><a href=\"https://remelehane.dev/posts/up-your-testing-game/\">Flutter: Up your testing game</a></li>\n</ul>\n<p>Photo by <a href=\"https://unsplash.com/@hishahadat?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\">Shahadat Rahman</a> on <a href=\"https://unsplash.com/s/photos/data?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\">Unsplash</a></p>"},{"url":"/posts/firebase-vs-device-time/","relativePath":"posts/firebase-vs-device-time.md","relativeDir":"posts","base":"firebase-vs-device-time.md","name":"firebase-vs-device-time","frontmatter":{"title":"Firebase vs Device Time","stackbit_url_path":"posts/firebase-vs-device-time","date":"2023-09-10T09:00:00.000Z","excerpt":"Solving incorrect timestamps as a result of incorrect device time","tags":["Shorebird","Flutter","FlutterDevelopment","AppDeployment"],"template":"post","thumb_img_path":"https://cdn.hashnode.com/res/hashnode/image/upload/v1696691981119/4e48b387-9962-44f0-bd78-9223d85ec9d4.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp"},"html":"<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1696691981119/4e48b387-9962-44f0-bd78-9223d85ec9d4.png?w=1600&#x26;h=840&#x26;fit=crop&#x26;crop=entropy&#x26;auto=compress,format&#x26;format=webp\" alt=\"Github CoPilot\"></p>\n<p>One of my favourite things about development is solving problems, and I am not one for accepting there is no solution, this one definitely required some more creativity when it came to solving it.</p>\n<h2>Backstory</h2>\n<p>With an application that is used in many various areas, we like to maintain high level of offline capability with the application, as this helps to keep things running smoothly when there is low or no mobile reception.</p>\n<p>Like many others, to aid with this we also make use of Firebase, while it has it's flaws, it does do a great job of managing data transfer when the network conditions are poor to terrible, and the data does always eventually arrive.</p>\n<p>Recently an edge case was brought to our attention, the data that was being pushed directly to Firebase was arriving with incorrect timestamps, as many of these where out by 1-2 hours our initial assumption was timezone, which should be something quite simple to deal with...</p>\n<p>Unfortunately not so simple, Firebase does deal with timezones perfectly fine, and as it turns out the issue was in fact these particular users had actually set their clocks manually, and incorrectly, and why would Firebase assume the source of truth to be wrong.</p>\n<h2>The not so good ideas.</h2>\n<p>While it probably should have been obvious that this idea was too simple to simply work, I was had not yet realised the timezone was not the issue, so as we use an extension on <code>DateTime</code>, which proving to be handy for this scenario was initially introduced to allow <code>DateTime</code> mocking within unit tests.</p>\n<pre><code class=\"language-dart\">extension ExtendedDateTime on DateTime {\n  static DateTime? _customTime;\n\n  static DateTime get current => return _customTime ?? DateTime.now();\n\n  static set customTime(DateTime customTime) {\n    _customTime = customTime;\n  }\n}\n</code></pre>\n<p>So I opened up the extensions files, added <code>.toUTC()</code> and, well that was not it...</p>\n<p>This is when I began really digging into the issue and messing with my test devices time, this is when I realised that timezone was unrelated to the issue and as long as the time was correct, the time zone made no difference.</p>\n<p>If I were lucky, this would have been something easily fixed with Firebase's on utility, <code>FieldValue.serverTimestamp()</code>, however, the data in question is part an array, which is most simply updated by using <code>FieldValue.arrayUnion([])</code>. This however does not support <code>serverTimeStamp</code> which only works when part of the top level <code>set</code> or <code>update</code> methods.</p>\n<p>Next idea was to try out the <a href=\"https://pub.dev/packages/timezone\">timezone</a> package, however this is subject to the same rules of logic and as long as the clock is wrong, so is it.</p>\n<h2>Just crazy enough to work?</h2>\n<p>This was one of those times when I took to my living, breathing \"rubber duck\", aka my dog, and while I never try explaining my code to her, I often find solutions find there way to me while taking her for a walk, this was one of those cases.</p>\n<p>Another package we have for Flutter is the <a href=\"https://pub.dev/packages/ntp\">ntp</a> package, which allows us to get the \"real\" time from a Network Time Protocol server, so a source of truth not bound to the users device</p>\n<p>So while this is naturally an online call, we do not make it whenever we are needing the time, other then being inefficient and a waste of data, it would fail under the worst of conditions.</p>\n<p>No, this call is made quite infrequently, at initial app launch and AppResume, and is small enough to be more resilient to poor network conditions.</p>\n<p>Making use of a global variable, I store the difference between NTP time and Device time, which when the clock is correct is only a few milliseconds.</p>\n<pre><code class=\"language-dart\">  static Future&#x3C;void> setTimeGap() async {\n    final startDate = await NTP.now();\n    final phoneNow = DateTime.now();\n    final diff = startDate.difference(phoneNow);\n\n    ClockDifference = diff;\n  }\n</code></pre>\n<p>Above you will see the simple function written to get this, starting with getting the network time, then the device time and finally storing it on the global <code>ClockDifference</code> variable.</p>\n<p>This leads me to a small update on the extension shown earlier:</p>\n<pre><code class=\"language-dart\">  static DateTime get current {\n    final diff = ClockDifference;\n    final now = DateTime.now();\n\n    if (diff.isNegative) {\n      return now.subtract(diff.abs());\n    } else if (!diff.isNegative &#x26;&#x26; diff != Duration.zero) {\n      return now.add(diff);\n    }\n\n    return _customTime ?? now;\n  }\n</code></pre>\n<p>Using that we check if that difference is negative so we know which way to adjust the time, and for the benefit of testing, or the call having failed we also ensure the difference is not <code>Duration.zero</code> which is also the default value for the global.</p>\n<p>While a solution not without its caveats, this is an edge case as mentioned and for the vast majority of our users this will not really be required, however as some of these timestamps find there way into reports and some of those can form part of financial calculations, its safer if the data is potentially off by a rounding error than a number of hours.</p>\n<p>Time is after all money...</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your development journey :D</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/flutter-data-testing/\">Flutter: Data Testing</a></li>\n<li><a href=\"https://remelehane.dev/posts/widget-testing-rendeflex-overflow/\">Widget testing: Dealing with Renderflex Overflow Errors</a></li>\n</ul>"},{"url":"/posts/flutter-web-should-i-use-it-part-1/","relativePath":"posts/flutter-web-should-i-use-it-part-1.md","relativeDir":"posts","base":"flutter-web-should-i-use-it-part-1.md","name":"flutter-web-should-i-use-it-part-1","frontmatter":{"title":"Flutter Web: Should I use it? (Part 1 — SEO)","stackbit_url_path":"posts/flutter-web-should-i-use-it-part-1","date":"2021-06-20T12:35:28.000Z","excerpt":"Many times online the question has been asked “Is flutter good for web”, and what many developers fail to truly understand is that is a very broad and open question and there are many factors that go into saying yes, no or maybe.","tags":["seo","flutterdevelopment","flutter","flutterwebdeployment"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*DTmKsPfjSR-mjw7sqeVwyQ-20210703101645334.jpeg"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*DTmKsPfjSR-mjw7sqeVwyQ-20210703101645334.jpeg\" alt=\"Header Image - Flutter Web: Should I use it? (Part 1 — SEO)\"></p>\n<p>Many times online the question has been asked “Is flutter good for web”, and what many developers fail to truly understand is that is a very broad and open question and there are many factors that go into saying yes, no or maybe.</p>\n<p>While I am most certainly no expert, I have been around the block for a little over a decade and have spent the last 2+ years working with flutter for mobile and web and have learned a few things, both before and during that, that gives me hopefully some useful insight into that question, insight that may help you answer that question for yourself.</p>\n<p>The main problems that is highlighted is SEO, and the justifications given for that are <strong>Search Indexing **capability or lack thereof</strong>, <strong>and **Performance</strong>, which are very valid concerns in general, but there is actually more to it than that.</p>\n<h2>Search Indexing…</h2>\n<p>Let’s start with what is probably the most thrown around is the concern, that Flutter for the web is bad for indexing, as Flutter paints with canvas, it cannot be scrapped by current web scrapers (bots), however, I feel that most of the people screaming this from the rooftops have little to no understanding of what that actually means and seem to feel that your website is the one and the only thing you need to concern yourself when evaluating SEO and search rankings, which is impossibly far from the truth, that would be like saying that the sun would make a good holiday destination.</p>\n<p>SEO is a massive thing, you could almost think about it as a living organism that evolves and grows with every interaction and encounter through its journey through the “world”. Search engines are constantly evolving their algorithms and scaling up their scrapers/bots to get the most accurate information possible, filter out the fake and the garbage and tailor the search results to be as relevant to YOU as they can, and this is even more so when it comes to Google.</p>\n<p>Google has been keeping tabs on you for years, if not decades, it probably knows you better than you do yourself, and when using it, you are one of the biggest factors it considers when it considers how relevant a result is.</p>\n<p>Many believe that for a site to be “good” for SEO it needs metadata and text content, and this is not wrong, but it’s also very contextual, a small site with minimal text is not generally enough for a web scrapper and the search engines to determine relevance and quality.</p>\n<h3>An Example…</h3>\n<p>Take <a href=\"https://www.boringcompany.com/not-a-flamethrower\">The Boring Company</a> as an example, when the site first launched it was nothing but a picture of the “not a flamethrower” and maybe a paragraph's worth of text, by many peoples understanding of how SEO works, as this site has little not no text content for these scrappers to analyze, it really better than a small Flutter site which is not scannable? In that context, the site is nearly as worthless, yet we probably all know about it, and most of us have visited the site before and probably googled for it.</p>\n<p>2 key things work in that sites favour with regards to SEO, Elon himself is probably the biggest, but he is merely a catalyst, and then the name “not a flamethrower”, it’s pretty unique, especially when you combine these 2 factors.</p>\n<p>Here is pretty much what happens to make a site that seemingly worthless for SEO, and SEO gold mine, Elon, he tweets about it, thousands, if not tens of thousands of his follower's retweet, from then bloggers, YouTubers and legitimate news outlets pick up on it. Now the entire internet is talking about it, linking to it, discussing what it is or could be.</p>\n<p>All of this talk, reference and backlinking is giving the search engine algorithms reference and context to what this website is, or could be, about and not only that, they are finding this link and visiting and revisiting this site hundreds of thousands of times, from places like Twitter, Facebook, blogs and news sites.</p>\n<p>Now, all of a sudden, this apparently meaningless, contextless thing is probably one of the most important things on the internet. How the site is built, or how much text it has, how much text these scrapers can scrape from it is utterly meaningless, it has zero bearings on this particular websites SEO capabilities, the main things Flutter is being slated for.</p>\n<p>**Back to Flutter and Search Indexing…\n**In the grand scheme of things, Flutter is neither good nor bad for SEO when you consider its ability to be scraped by a web scraper. Its performance does not help it, but we will touch on that a bit later.</p>\n<p>Especially in their early days React, Angular and Vue all suffered from the same handicap, then came out services like <a href=\"https://prerender.io/\">prerender.io</a> and capabilities like Server-Side Rendering (SSR), which allowed us to detect when a search engine bot or web crawler was hitting the website and give them static HTML version of that particular page if it was a less dynamic site we could even simply SSR it for everyone, which would help with performance.</p>\n<p>For Flutter, at least to the best of my knowledge, there is no current way of implementing an SSR solution, and given how reliant Flutter still is on the canvas for rending, it may not be entirely possible or viable to attempt such a thing at this stage.</p>\n<hr>\n<p>In the next part, we will get into Performance, the next big factor to consider when deciding on Flutter for web in your project.</p>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/react-to-flutter-one-developers-journey-part-1/\">React to Flutter: One Developers Journey — Part 1</a></li>\n<li><a href=\"https://remelehane.dev/posts/developing-on-an-m1-mac-flutter/\">Developing on an M1 Mac (Flutter)</a></li>\n</ul>"},{"url":"/posts/flutter-using-self-signed-ssl-certificates-in-development/","relativePath":"posts/flutter-using-self-signed-ssl-certificates-in-development.md","relativeDir":"posts","base":"flutter-using-self-signed-ssl-certificates-in-development.md","name":"flutter-using-self-signed-ssl-certificates-in-development","frontmatter":{"title":"Flutter: Using Self Signed SSL Certificates in Development","stackbit_url_path":"posts/flutter-using-self-signed-ssl-certificates-in-development","date":"2019-07-06T17:43:20.000Z","excerpt":"I recently started working with Flutter during an RnD phase at work after Ionic which had been the planned direction revealed itself to be a non-viable option given the businesses requirement.","tags":["flutterdevelopment","development","sslcertificate","flutter"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*73IgUxPfyXUKZAaIXgutrw.png"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*73IgUxPfyXUKZAaIXgutrw.png\" alt=\"Banner Image\"></p>\n<p>I recently started working with Flutter during an RnD phase at work after Ionic which had been the planned direction revealed itself to be a non-viable option given the businesses requirement. Personally, probably professionally and potentially even for the business, that was a blessing in disguise.</p>\n<p>That problem introduced us all to flutter, and I myself was very happy with the discover, it was easy to use, tutorial were abundant and coming from a Typescript Front-end environment it was both different and familiar.</p>\n<p>It’s early days still, but so far I have only run into 1 significant problem working with it, and that was when trying to connect to my local api, which naturally has a self signed cert. Getting around this, or more accurately working with this seemed far more complicated than I would have expected.</p>\n<p>While many results to come through on google, unfortunately for someone 4 days into Flutter, none of the answers gave enough context for me to understand what I needed to do, many hours later and lots of reading I began to discover the context through the various code bits and posts that I read through.</p>\n<blockquote>\n<p>This is simply the documentation of that in the hopes that the next new guy find it and gets a complete picture that is hopefully a lot easier to understand.</p>\n</blockquote>\n<p>As Far as my Google Fu indicated, only 2 packages that I could find had support for working with <strong>bad</strong> certificates, and that is <a href=\"https://api.dartlang.org/stable/2.4.0/dart-io/HttpClient-class.html\">HttpCllient</a> and <a href=\"https://github.com/flutterchina/dio\">Dio</a>, I had mostly worked out my own solution by the time I got to Dio, so the following code is for HttpClient.</p>\n<p>HttpClient has a method called <em>badCertificateCallback</em>, I had written a class for managing cookies for all my API calls which contains, for now, my GET and POST.</p>\n<pre><code>static HttpClient client = new HttpClient()\n    ..badCertificateCallback = (\\_certificateCheck);\n</code></pre>\n<p>So when instantiating the HttpClient class, I instantiated it with the <em>badCertificateCallback</em> which is a function, which I wrote as:</p>\n<pre><code>static bool \\_certificateCheck(X509Certificate cert, String host, int port) => host == 'local.domain.ext';\n</code></pre>\n<p>The function itself is simply expecting a bool, many of the posts I found simply suggested having it return true, but thats unsafe, even if this were left in and made it to production, it poses a very low risk.</p>\n<p>In simple terms this is what you need to do to get your Self Signed Cert working withing your dev environment, now to ensure complete context and maybe glean a few extra ideas, here is the current version of the Class I am using:</p>\n<iframe class=\"liquidTag\" src=\"https://dev.to/embed/gist?args=https%3A%2F%2Fgist.github.com%2FRemeJuan%2F3ab63fc2adc948e0804b63f4f3b4244f\" style=\"border: 0; width: 100%;\"></iframe>\n<p>I have both the GET and POST, with helpers for dealing with Cookies using <a href=\"https://github.com/flutterchina/cookie_jar\">Cookie_Jar</a>, so for each request I am updating CJ with any cookies coming down from the API which are then attached to any subsequent calls.</p>\n<p>I have not fully tested the cookie side of this Class yet, I will update the Gist if any changes are made.</p>\n<p>Thanks for reading, I hope you have found this useful/informative. Drop me a comment if you have any questions or suggestions/improvements, we are all always learning. Don’t forget the clap, and share if you think someone else may benefit from it.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>"},{"url":"/posts/flutter-web-should-i-use-it-part-3/","relativePath":"posts/flutter-web-should-i-use-it-part-3.md","relativeDir":"posts","base":"flutter-web-should-i-use-it-part-3.md","name":"flutter-web-should-i-use-it-part-3","frontmatter":{"title":"Flutter Web: Should I use it? (Part 3 — Other considerations)","stackbit_url_path":"posts/flutter-web-should-i-use-it-part-3","date":"2021-07-04T06:58:00.000Z","excerpt":"Many times online the question has been asked “Is flutter good for web”, and what many developers fail to truly understand is that is a very broad and open question and there are many factors that go into saying yes, no or maybe.","tags":["seo","flutterdevelopment","flutter","flutterwebdeployment"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*DTmKsPfjSR-mjw7sqeVwyQ-20210703101645334.jpeg"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/1*DTmKsPfjSR-mjw7sqeVwyQ-20210703203135334.jpeg\" alt=\"Post header image\"></p>\n<p>If you have not yet, it is worth reading the previous part of this series for the best context.</p>\n<p><a href=\"https://remelehane.dev/posts/flutter-web-should-i-use-it-part-2/\">Flutter Web: Should I use it? (Part 2 — Performance)</a></p>\n<p>While SEO with its scrapper and performance factors are definite considerations to take, they are not the only things you should consider when deciding whether or not to use Flutter.</p>\n<p>While Web is probably the weakest side of Flutter at this point, that is very likely to change in the future, and especially if you are working on a larger or a longer-term project, what is true today is almost certain to not be so, or at least to a much greater extent further down the line, and possibly even a non-issue by the time the project is ready.</p>\n<p>As I mentioned in the first post, you/your team are the only ones who can truly determine whether or not choosing Flutter is a good choice, you are the only one(s) in a position to fully understand the potential costs of any framework you choose for your project.</p>\n<h2>What am I/we Building…</h2>\n<p>What you are planning on building and what its intended purpose should be a strong deciding factor in which technology you choose, just because Flutter is the newest kid on the block does not make it the “obvious” choice.</p>\n<h3>Platforms required…</h3>\n<p>What platforms you need this project to run on from day 1, this is naturally a very important question, if it's for Web-only and the project is a smaller one that is customer-centric and will probably only take a few months, then Flutter may not be the best choice for that future “day 1”, as users, especially first time users, will be less happy with the performance of Flutter, modern internet users are used to not waiting, they are used to things being quick or near-instant, and right now, that is not the case for Flutter Web.</p>\n<p>However, if you need to support multiple platforms, and Web is in fact more of a nice to have or a secondary entry point, then Flutter probably is the better choice, right now it’s the closest competitor is React-Native, which only support Android and iOS, with Web being made available through 3rd party resources which will not have the same support and backing.</p>\n<p>At the time of writing, Flutter was working on mobile, web, desktop, consoles, smartwatches, and even cars. Canonical has set it as the preferred language for Ubuntu applications, so if looking to grow your support base, Flutter is not only the best tool but the only one with such wide-reaching support.</p>\n<h3>Team skills…</h3>\n<p>Something that you always need to consider is the skills of your available team, while it is quite likely that few or even none of your team members have significant or possibly any skills with Flutter, it is not an extremely difficult language/framework to learn. Personally, I spent close to 8 years working almost exclusively with JavaScript libraries and frameworks and was able to pick up enough in a reasonably short space of time.</p>\n<p><a href=\"https://remelehane.dev/posts/react-to-flutter-one-developers-journey-part-1/\">React to Flutter: One Developers Journey — Part 1</a></p>\n<p>If you have an already skilled team of developers, they will have no trouble picking it up and there are some fantastic resources out there to help you one, ones I used personally are <a href=\"https://fluttercrashcourse.com\">FlutterCrashCourse</a> and <a href=\"https://www.youtube.com/resocoder\">ResoCoder</a> on YouTube.</p>\n<h3>It’s a personal project…</h3>\n<p>This one almost makes it an easy choice to go for Flutter, while yes it has its flaws now, the technology and the community is growing rapidly, more and more companies are starting up teams to build applications in Flutter, and even if those teams are not going to be using Web, the way Flutter works are that no matter the platform, the code is the same. You write the code and it takes care of how things show up at their destination.</p>\n<p>That makes it an invaluable learning experience for YOU as a developer, it can easily put you ahead of the curve for other applicants at your first or next job, even if the project itself is not great, it will still be something you can put on your portfolio, a GitHub link you can send along with your CV to show that you may have more experience than the next person.</p>\n<p>It also shows initiative, a willingness, and a passion for learning and self-improvement. These are all things that hiring managers will value when picking between a group of potential candidates.</p>\n<p>There is always value in learning a new skill, even if you do not end up using that skills, it helps develop you into a more experienced, more understanding, and well-rounded developer, one who walks around with a toolbox instead of trying to make every project work for your only tool. You would not hang a painting with a sledgehammer now, would you?</p>\n<h3>Final Thoughts…</h3>\n<p>We have covered a lot of the things one needs to consider when choosing Flutter Web and to some extent Flutter itself. In the end, it is still an immensely powerful and capable Framework, and therein lies its greatest value. Today it may have problems, but tomorrow it is likely to have solutions and I for one believe that it will be one of the bigger frameworks of the future.</p>\n<p>In the final part of this series I will go through some suggestions and things to consider if you have decided that for you or your team, Flutter is the best way to go.</p>\n<p><a href=\"https://remelehane.dev/posts/flutter-web-should-i-use-it-part-4/\">Flutter Web: Should I use it? (Part 4 — I believe so)</a></p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you liked it, a heart would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/developing-on-an-m1-mac-flutter/\">Developing on an M1 Mac (Flutter)</a></li>\n<li><a href=\"https://remelehane.dev/posts/working-from-home-works-for-me/\">Working from home works for me…</a></li>\n</ul>"},{"url":"/posts/flutter-web-should-i-use-it-part-2/","relativePath":"posts/flutter-web-should-i-use-it-part-2.md","relativeDir":"posts","base":"flutter-web-should-i-use-it-part-2.md","name":"flutter-web-should-i-use-it-part-2","frontmatter":{"title":"Flutter Web: Should I use it? (Part 2 — Performance)","stackbit_url_path":"posts/flutter-web-should-i-use-it-part-2","date":"2021-06-27T14:35:35.000Z","excerpt":"Many times online the question has been asked “Is flutter good for web”, and what many developers fail to truly understand is that is a very broad and open question and there are many factors that go into saying yes, no or maybe.","tags":["seo","flutterdevelopment","flutter","flutterwebdeployment"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/1*DTmKsPfjSR-mjw7sqeVwyQ-20210703161045175.jpeg"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/1*DTmKsPfjSR-mjw7sqeVwyQ-20210703161045175.jpeg\" alt=\"Post header image\"></p>\n<p>I hope you enjoyed the first part of this series where I covered SEO and Web Scrappers and their bearing on using Flutter for Web, if you have not read it yet, it is definitely worth checking out first.</p>\n<p><a href=\"https://dev.to/remejuan/flutter-web-should-i-use-it-part-1-seo-271k\"><strong>Flutter Web: Should I use it? (Part 1 — SEO)</strong></a></p>\n<p>In this part, we go into one of the other big SEO factors, performance, while search engines are scraping the text content of your website in order to be able to analyze and categorize what it may be about for later use when a user searches, they are also paying close attention to the performance of your website.</p>\n<p>Performance is measured in a few ways, of the more important ones to consider and probably the easiest ones we as developers can solve or at least mitigate is download time and time to first meaningful paint.</p>\n<h3>Download Time…</h3>\n<p>Download time should be pretty obvious, but that is how long it takes for your website to finish downloading to the user's browser or in the case the search engines testing “browser”, naturally faster is better, and ways to improve would be to reduce the overall payload site and optimize the network request, and in some cases more is less.</p>\n<p>A modern browser can handle numerous network requests, between tens and even hundreds so lots of small, cachable files can be more beneficial than a single bundle file, JS devs will remember the vendeor.js file.</p>\n<p>In the case of Flutter for the web, the payload is still pretty large, after Flutter 2 was released I put together a small app to look into null-safety from a clean slate instead of upgrading an existing project.</p>\n<p>It was very simple with a single page and a single API call built with riverpod. You can take a look <a href=\"https://crypto_pricing.codemagic.app\">HERE</a>, and the <a href=\"https://github.com/RemeJuan/crypto_pricing\">source code</a>.</p>\n<p>The payload size here, for an HTML build, is about 3MB, in React it probably would have been around 400kb if not less, it would be about double the size in a canvas build that downloads a web assembly runtime of about 3MB.</p>\n<h3>Time to first meaningful paint…</h3>\n<p>This is a measurement of how long it takes for something meaningful to the user to show up on the screen, something past the browser's default white page or your website's main background colour.</p>\n<p>This could be text or even a loading spinner, something that indicates to the user that something is happening.</p>\n<p>As you can imagine, this is impacted by that download speed, unless you have enough of your website downloaded, there is not much you can actually paint on the screen, in the case of Flutter, you mainly waiting for main.js to finish downloading before anything does appear in the screen.</p>\n<h3>Analyzing Performance…</h3>\n<p>For those who have not heard of it before, one of the more common tools for measuring a site's performance is <a href=\"https://developers.google.com/web/tools/lighthouse/\">Google’s Lighthouse</a>, here you can input yours, or any website address and get quite a bit of useful information as to the performance and bottlenecks within the website, this information can be very valuable in finding the best way to improve the performance of one's website.</p>\n<p>Lighthouse will give you an analysis for both web and mobile, with mobile being one of the more important considerations these days, a far larger percentage of users spend time on websites/app from their mobile devices instead of computers.</p>\n<p>You can take a look at the score for that small app I mentioned earlier <a href=\"https://developers.google.com/speed/pagespeed/insights/?url=https%3A%2F%2Fcrypto_pricing.codemagic.app%2F&#x26;tab=mobile\">HERE</a>, as you will see the score is pretty low for mobile, and slightly better on desktop.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3848/1*7o-l3Sou38uSn-7ex1YoUw.png\" alt=\"Lighthouse Score (Mobile) for Crypto Pricing App.\"></p>\n<p>As you can see one of the first metrics the site “fails” on is *First Contentful Paint, *which only happens in at around 15s, which is probably about 13–14 seconds too slow.</p>\n<p>Further down the page, you will see specific diagnostics pointing to specific “pain” points for the site, one of the main ones being the main.js file which right now is quite large so not only takes some time to download but also time to process.</p>\n<p>We also need to conisder that this was run against an HTML build, flutter can be optionally built specifying either to use <code>canvaskit</code> or <code>html</code> as the rendering engine, for reasons I had to specify HTML, however by default it will effectivel ybuild with both, opting for <code>canvaskit</code>on desktop and <code>html</code>on mobile. </p>\n<p>This would mean that on desktop, there would be an additional 2.5 - 3mb for the <code>wasm</code> web assembly file that is needed for <code>canvaskit</code> which would have an additional cost towards download speed and First Contentful pait.</p>\n<p>Lighthouse, is also an indicator of a users first visist, or first visit per deploy, which would pretty much be the worst case scneario, susequint visits would be substantially faster, as many, if not most, of the files would be cached on the users device so they should in effect on experience this long delay once per app deploy.</p>\n<h3>What can we do to improve these…</h3>\n<p>For either of these factors, right now there is not too much you as the developer can do to help improve or mitigate these unless of course, you are experienced enough to be able to help the core team improving Flutter web.</p>\n<p>For now, we simply have to wait for them to improve the compiler and maybe give us a bit more control over how the bundle is built, it is possible that if we could break the bundle up into smaller chunks and get all the essentials in a main.js and the rest of the code in chunks, we could greatly improve both the download and first meaningful paint times.</p>\n<hr>\n<p>Next time we will go into other factors I believe, you as the developer should consider when deciding on Flutter for the web for your project.</p>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/developing-on-an-m1-mac-flutter/\">Developing on an M1 Mac (Flutter)*</a></li>\n<li><a href=\"https://remelehane.dev/posts/react-to-flutter-one-developers-journey-part-1/\">React to Flutter: One Developers Journey — Part 1</a></li>\n</ul>"},{"url":"/posts/flutter-web-should-i-use-it-part-4/","relativePath":"posts/flutter-web-should-i-use-it-part-4.md","relativeDir":"posts","base":"flutter-web-should-i-use-it-part-4.md","name":"flutter-web-should-i-use-it-part-4","frontmatter":{"title":"Flutter Web: Should I use it? (Part 4— I believe so)","stackbit_url_path":"posts/how-to-download-files-on-web-with-flutter","date":"2021-07-11T09:00:42.000Z","excerpt":"The final part of the series, let's go through suggestions on what to do when you are planning on using Flutter Web","tags":["flutter","flutterdevelopment","flutterweb","brave"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/1*DTmKsPfjSR-mjw7sqeVwyQ.jpeg"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/1*DTmKsPfjSR-mjw7sqeVwyQ.jpeg\" alt=\"Post header image\"></p>\n<p>This is the final part of the series, if you have not already, here is the previous one for context.</p>\n<p><a href=\"https://blog.remelehane.dev/flutter-web-should-i-use-it-part-3-other-considerations\">Flutter Web: Should I use it? (Part 3— Other considerations)</a></p>\n<p>In this part, I am going to go through some ideas and suggestions that I think will work best for those of you working on a Flutter Web project.</p>\n<h3>Just a web project…</h3>\n<p>This one is pretty easy, as you only targeting one platform type setting up the codebase is straightforward, simply follow the documentation from <a href=\"https://flutter.dev/\">flutter.dev</a></p>\n<h3>Adding or targeting web with a mobile app…</h3>\n<p>This is where I think you should spend some time thinking about a cleaner way, there are significant differences between web and mobile and catering for all of that may unintentionally bloat your codebase.</p>\n<p>If you wish to ensure that all users, both on the web and mobile, have a great experience when using your application you may want to consider a more separated project approach.</p>\n<p>Mobile is pretty consistent when it comes to the layout, phones all generally follow the tall thin display approach so a consistent look and user experience is pretty easy.</p>\n<p>Browsers on the other hand come in numerous resolutions, users are not always in full screen, and they may use it on phones and tablets as well so Media Queries can become quite important here, and you may also want to adjust the way certain controls or interaction happen just for a more web-like user experience.</p>\n<h3>Setup suggestion…</h3>\n<p>While it is definitely possible and will most certainly work having both your web and mobile code sitting in the same project and folder, you may wish to actually split it up into 3 separate parts at this point.</p>\n<p>You could consider the following layers</p>\n<ul>\n<li>Web</li>\n<li>Mobile</li>\n<li>Shared</li>\n</ul>\n<p>In the Web and Mobile layers, you would implement your layout code primarily, things like Containers, Drawer, AppBar, BottomNavigation, etc.</p>\n<p>All your UI specific Widgets, things that will be the same across Web and Mobile you would put in the Shared layer, all the custom Widget groups and possibly some complete screens could be stored there and then be shared with your Web and Mobile layers so that the components themselves, which would be reusable and configurable, can maintain their UI structure and logic while still being laid out in a way that best suits the target platform.</p>\n<p>In addition to widgets, the shared layer could also store certain aspects of the business logic and some of the network logic, state especially is quite likely to be sharable across the layers as what you would be showing and when would remain consistent, it's the \"how it looks\" that we are trying to maintain a bit more control over.</p>\n<p>Using platform delegates from within the shared layer could simplify logic sharing as well, if you consider something like file downloading, this works more seamlessly on mobile than on web, with the web requiring a little bit of creativity to achieve, which would also result in having to use web-specific code which would prevent unit testing.</p>\n<p>I go into some details on how to setup platform delegate here: <a href=\"https://dev.to/remejuan/adding-flutter-web-to-an-existing-application-4da9\">Adding Flutter web to an existing application</a></p>\n<p>This allows you to still maintain an extremely reusable codebase while also having a lot more control over the specific user experience for the targeted platform.</p>\n<p>On mobile you would more freely be able to drop it in and almost forget about it, only needing to be concerned with landscape and portrait.</p>\n<p>For the web you can take more control over the layouts, perhaps manipulating your widgets to display in 2 columns of data side-by-side or adjust how they scale across the various breakpoints.</p>\n<p>You would then also be able to more easily and cleanly implement top horizontal navigation for the web at the larger breakpoints and only drop back into the drawer at smaller breakpoints and not use bottom navigation, while for mobile a drawer and bottom navigation.</p>\n<p>For that scenario, Drawer could be used as a shared widget, while Top Nav would only exist with the web side of the project and Bottom on the mobile, that way also reducing unnecessary code with the platforms.</p>\n<h3>Things to be aware of…</h3>\n<p>So far, in my experience the code side of Web has been seamless, the only real things I would point out are:</p>\n<p>Flutter does not define a render engine at build time, by default it will select canvas for web and HTML for mobile.</p>\n<p>You can make the choice by appending your build command with <code>-web-rendered [html|canvas]</code>.</p>\n<p>If you are making use of externally sourced images, as I am in the projected referenced in part one where I was getting the icons for the various cryptocurrencies from an external source, it would be simpler to for HTML as your rendering engine at build time as currently canvaskit only supports same-origin images, in order to use remote images you would first need to convert the image data to byte code and provide that to the <code>Image</code> widget.</p>\n<p>As mentioned above, however, it is important to note that <code>dart:html</code> cannot be imported into files that are going to be unit tested, you would need to ensure that the logic for code be written within a platform delegate to ensure that the testing framework makes use of the mobile implementation.</p>\n<h2>Conclusion</h2>\n<p>That is it from me on this series, I hope that I have given you enough detail to make a more informed decision on whether or not Flutter's Web implementation is a workable idea for your next project.</p>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you liked it, a heart would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/developing-on-an-m1-mac-flutter/\">Developing on an M1 Mac (Flutter)</a></li>\n<li><a href=\"https://remelehane.dev/posts/working-from-home-works-for-me/\">Working from home works for me…</a></li>\n</ul>"},{"url":"/posts/flutter-widget-testing/","relativePath":"posts/flutter-widget-testing.md","relativeDir":"posts","base":"flutter-widget-testing.md","name":"flutter-widget-testing","frontmatter":{"title":"Flutter Widget Testing: Enhancing the Accuracy and Efficiency of Your App Testing","stackbit_url_path":"posts/flutter-widget-testing","date":"2023-10-23T09:00:00.000Z","excerpt":"","tags":["flutter","fluttermobile","unittesting","testing","flutter testing"],"template":"post","thumb_img_path":"https://img.freepik.com/free-vector/travel-booking-app-screens_23-2148629033.jpg?size=626&ext=jpg&ga=GA1.1.1880011253.1699833600&semt=ais","cover_image":"https://img.freepik.com/free-vector/travel-booking-app-screens_23-2148629033.jpg?size=626&ext=jpg&ga=GA1.1.1880011253.1699833600&semt=ais","published_at":"2023-10-23T09:00:00.000Z","canonical_url":"https://remelehane.dev/posts/flutter-widget-testing/"},"html":"<p><img src=\"https://img.freepik.com/free-vector/travel-booking-app-screens_23-2148629033.jpg?size=626&#x26;ext=jpg&#x26;ga=GA1.1.1880011253.1699833600&#x26;semt=ais\"></p>\n<p>‍</p>\n<p>Image Source: FreeImages</p>\n<h2>Introduction</h2>\n<p>As a Flutter developer, you know that testing is a crucial aspect of app development. Among the various testing techniques, unit testing and widget testing play a pivotal role in ensuring the accuracy and efficiency of your app. In this article, we will explore how to leverage Flutter's testing framework to enhance the quality of your widget tests. We will delve into the techniques that can help you write more accurate and reliable tests, allowing you to identify and fix potential issues early on in the development process.</p>\n<h2>The Power of Flutter's Testing Framework</h2>\n<p>Flutter's testing framework provides developers with a robust set of tools and utilities to accurately test their widgets. The framework offers various methods, such as <code>find.byType</code>, <code>find.text</code>, and <code>find.byKey</code>, which are commonly used to test widgets. These methods are simple to use and yield valuable results in most scenarios. However, there are instances where these basic tests may not provide the desired accuracy.</p>\n<p>Consider a scenario where you have a widget called <code>SampleWidget</code> that renders different icons based on a boolean value. In this case, using <code>find.byType</code> or <code>find.text</code> may not accurately test the specific icon being rendered. To overcome this limitation, Flutter's testing framework offers a powerful utility called <code>find.byWidgetPredicate</code>.</p>\n<h2>Accurate Testing with <code>find.byWidgetPredicate</code></h2>\n<p><code>find.byWidgetPredicate</code> allows you to write tests that can uniquely identify individual widgets based on their attributes. This function-based lookup takes the widget as its argument, enabling you to target specific instances of the same widget with precision.</p>\n<p>Let's revisit the <code>SampleWidget</code> example and modify the test using <code>find.byWidgetPredicate</code>:</p>\n<pre><code>testWidgets('Should render the circle_outlined icon', (tester) async {\n  await tester.pumpApp(const SampleWidget(complete: false));\n  await tester.pumpAndSettle();\n\n  final iconFinder = find.byWidgetPredicate(\n    (widget) => widget is Icon &#x26;&#x26; widget.icon == Icons.circle_outlined,\n  );\n\n  expect(iconFinder, findsOneWidget);\n});\n</code></pre>\n<p>In this updated test, we are looking for a widget that is an <code>Icon</code> and has the <code>Icons.circle_outlined</code> icon. By using <code>find.byWidgetPredicate</code>, we can ensure that the test accurately identifies the desired icon. If, for some reason, the icon were to change to a different value, the test would fail, providing valuable feedback on the widget's behavior.</p>\n<h2>Testing Localization with Easy Localization</h2>\n<p>Localization is an essential aspect of app development, allowing users from different regions to use your app in their preferred language. When testing localized widgets, it is important to use real localizations instead of mocking helper classes. This ensures that the tests reflect the actual behavior of the app in different languages.</p>\n<p>One popular localization package in Flutter is <code>easy_localization</code>, which provides support for JSON-based localization management. To test localized widgets accurately, you can create a helper function called <code>createLocalizedWidgetForTesting</code>. This function sets up the necessary configurations for testing with real localizations:</p>\n<pre><code>Widget createLocalizedWidgetForTesting({Widget child}) {\n  return EasyLocalization(\n    path: '$TEST_MOCK_STORAGE/locale',\n    useOnlyLangCode: true,\n    assetLoader: FileAssetLoader(),\n    fallbackLocale: const Locale('en'),\n    supportedLocales: globals.supportedLocale,\n    saveLocale: false,\n    child: MaterialApp(\n      home: Scaffold(\n        body: child,\n      ),\n    ),\n  );\n}\n</code></pre>\n<p>In this function, <code>EasyLocalization</code> is configured with the path to the localization files, the desired fallback locale, and other necessary parameters. By using this helper function, you can create a localized environment for testing your widgets accurately.</p>\n<h2>Dealing with RenderFlex Overflow Errors</h2>\n<p>RenderFlex overflow errors are a common issue that developers encounter while building UI layouts. When such errors occur during widget testing, they can disrupt the test execution and make it challenging to identify the actual problems in the code. To overcome this obstacle, it is crucial to handle render overflow errors gracefully during widget testing.</p>\n<p>One approach to handling render overflow errors is to create a helper function called <code>ignoreOverflowErrors</code>. This function prevents the test runner from failing when encountering such errors, allowing the test to continue executing:</p>\n<pre><code>void ignoreOverflowErrors(FlutterErrorDetails details, { bool forceReport = false }) {\n  bool ifIsOverflowError = false;\n  bool isUnableToLoadAsset = false;\n\n  var exception = details.exception;\n\n  if (exception is FlutterError) {\n    ifIsOverflowError = !exception.diagnostics.any(\n      (e) => e.value.toString().startsWith(\"A RenderFlex overflowed by\"),\n    );\n\n    isUnableToLoadAsset = !exception.diagnostics.any(\n      (e) => e.value.toString().startsWith(\"Unable to load asset\"),\n    );\n  }\n\n  if (ifIsOverflowError || isUnableToLoadAsset) {\n    debugPrint('Ignored Error');\n  } else {\n    FlutterError.dumpErrorToConsole(details, forceReport: forceReport);\n  }\n}\n</code></pre>\n<p>In this helper function, the render overflow error is detected by checking if the exception diagnostics contain the specific error message. If the error is an overflow error or an error related to asset loading, it is ignored. Otherwise, the error is reported as usual. By assigning this helper function to <code>FlutterError.onError</code>, you can handle render overflow errors effectively during widget testing.</p>\n<p>To apply this error handling mechanism, include the following line in your test:</p>\n<pre><code>FlutterError.onError = ignoreOverflowErrors;\n</code></pre>\n<p>By doing so, you can ensure that render overflow errors do not disrupt your widget tests, enabling you to focus on testing the logic and behavior of your widgets effectively.</p>\n<h2>Conclusion</h2>\n<p>Effective testing is essential for building robust and reliable Flutter applications. By leveraging Flutter's testing framework and employing techniques like <code>find.byWidgetPredicate</code>, testing localized widgets with real localizations, and handling render overflow errors gracefully, you can enhance the accuracy and efficiency of your widget tests. These techniques allow you to identify and fix issues early in the development process, ensuring the quality and usability of your app. Incorporate these best practices into your testing workflow and enjoy a smoother Flutter development journey.</p>\n<p>Remember, testing is an ongoing process, and continuous learning and improvement are crucial for staying ahead in the ever-evolving world of app development. Stay curious, explore new testing techniques, and strive for excellence in your Flutter projects. Happy testing!</p>\n<p>Additional Information:</p>\n<ul>\n<li>Flutter's testing framework provides developers with a robust set of tools and utilities to accurately test their widgets.</li>\n<li><code>find.byWidgetPredicate</code> allows developers to write tests that can uniquely identify individual widgets based on their attributes.</li>\n<li>Easy Localization is a popular package in Flutter for handling app localization.</li>\n<li>RenderFlex overflow errors can be handled gracefully during widget testing using a helper function.</li>\n<li>Effective testing is crucial for building robust and reliable Flutter applications.</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/firebase-vs-device-time/\">Firebase vs Device Time</a></li>\n<li><a href=\"https://remelehane.dev/posts/flutter-web-should-you-use-it/\">The Power of Flutter for Web Development: Should You Use it?</a></li>\n</ul>"},{"url":"/posts/getting-creative-with-shorebird/","relativePath":"posts/getting-creative-with-shorebird.md","relativeDir":"posts","base":"getting-creative-with-shorebird.md","name":"getting-creative-with-shorebird","frontmatter":{"title":"Getting creative with Shorebird","stackbit_url_path":"posts/getting-creative-with-shorebird","date":"2023-07-10T09:00:00.000Z","excerpt":"Working with shorebird to replace a manual distribution channel","tags":["Shorebird","Flutter","FlutterDevelopment","AppDeployment"],"template":"post","thumb_img_path":"https://cdn.hashnode.com/res/hashnode/image/upload/v1688732912936/2b17ed9c-a6b7-4cf7-8f48-42da5c1d1c14.webp"},"html":"<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1688732912936/2b17ed9c-a6b7-4cf7-8f48-42da5c1d1c14.webp\" alt=\"Github CoPilot\"></p>\n<h2>Some background</h2>\n<p>We have started doing initial testing with a new client, however, they place restrictions on their devices as well as what can be accessed online, this, unfortunately, includes Google Play Store. Naturally that makes getting them updates a little complicated.</p>\n<p>The initial test group is quite small with 5 users, and they are all located at a single location, once the initial test phase is done the full rollout will include about 3000 devices across an entire country. So right now, driving 50km at 5 am, while not fun, to install updates on those devices, is most certainly not viable beyond this phase.</p>\n<p>SO boy was I happy to have found Shorebird the week before this all started, not that I had time to try it out then...</p>\n<p>In its early stages, it does have some complications that are less ideal for our current workflow, but those are still better than whatever the alternative would end up being.</p>\n<h2>Version Constraints</h2>\n<p>While Shorebird allows one to build a  patch update, which by looking at the CI is done by creating a diff from the current release, the release is tied to the version in the <code>pubspec.yaml</code> file. While not actually easy itself and generally easily manageable, our workflow relies on semantic versioning both for support post-release as well as managing builds and deployments.</p>\n<p>Under normal circumstances, one would rely only on Shorebird for more urgent hotfixes, so being tied to a release would not be a major issue as the Play Store/Appstore would handle normal features or bug fixes.</p>\n<p>As you can imagine, however, for this scenario I would be looking at Shorebird as an additional distribution channel, and while it can only patch dart code changes, the occasional APK update that can be sent to users, either via IT support or some other means can be managed as it would be very infrequent.</p>\n<p>However as is the nature of software development we release quite regularly, during the testing phase (we worked on-prem) we did about 10 releases, and while that is slowing down we would still be looking at 1-3 per week for the next few weeks.</p>\n<h3>The workaround</h3>\n<p>From a release management standpoint I have defined a fixed version, unrelated to our actual application version for this client, this allows me to work with the following script</p>\n<pre><code class=\"language-bash\">#/bin/sh\n\n# get the current version from pubspec.yaml\npubspec_yaml=$(cat \"pubspec.yaml\")\nversion_key=$(echo \"$pubspec_yaml\" | grep -E \"version:\")\nv=$(echo \"$version_key\" | sed -E \"s/version: //g\")\n# Set the version to 0.0.0\nfvm flutter pub run cider version 0.0.0\n\nshorebird patch --flavor production --artifact apk\n\nfvm flutter pub run cider version $v\n</code></pre>\n<p>For some clarification, this script starts by getting the actual version from the yaml and storing it in a variable.</p>\n<p>Next, using <a href=\"https://pub.dev/packages/cider\">cider</a> I set the version to the one that would be used for this client, run the patch and then set the version to what is stored in the variable.</p>\n<p>There is a similar release script which would be used when an actual new APK is used, but the flow is much the same.</p>\n<p>As for the support aspect, we use cider for managing versioning as well, so as part of that script, I simply <code>echo</code> the version number into a <code>version.txt</code> file which is read up into the app, and instead of getting the app version of <code>PlatformInfo</code>, it now comes from that text file, at least that way both Shorebird and non-Shorebird clients will still see the \"correct\" version.</p>\n<h2>The correct APK</h2>\n<p>Another small thing I ran into, which was very quickly resolved by messaging them on Discord, and is actually just something missing from the docs, the release command by default builds an app bundle, which is perfect/preferred for dealing with the Play Store. Not so much when needing to distribute manually.</p>\n<p>After contacting them I found out that <code>shorebird build</code>, while wrapping Flutter's build command, allowing me to get an APK, does not include the patch flow, so it will not get updated when patches are pushed out. </p>\n<p>If one needs an APK that will, you need to append <code>--artifact apk</code> to the release command. In my case, however, that was not the last of it...</p>\n<h3>My Device Does Not Play Well With Others</h3>\n<p>For testing, my device is a Samsung A23, however, I noticed when swiping the app away, the patch was not coming through, no matter how long I left the app open or how many times I killed it. So I installed some network monitoring tools into the device and noticed that no calls were being made to <code>api.shorebird.dev</code>, which is how updates are queries.</p>\n<p>Turns out, at last on this device, which would also be a modification Samsung made to the OS, swiping the app away, does not actually \"kill\" it. I was only able to get the patch to install when going into the applications setting and hitting \"Force Kill\".</p>\n<p>Once again support to the rescuer, Shorebird has a <a href=\"https://pub.dev/packages/shorebird_code_push\">package</a> one can install, that allows you to trigger the update checks/downloads from within the application which would be essential for scenarios like this one.</p>\n<p>One could either hook this up to the AppLifecycle events or perhaps attach it to a button, which was the approach I took, as the specific devices said client uses do not trigger these events #FunTimes.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your development journey :D</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/flutter-data-testing/\">Flutter: Data Testing</a></li>\n<li><a href=\"https://remelehane.dev/posts/widget-testing-rendeflex-overflow/\">Widget testing: Dealing with Renderflex Overflow Errors</a></li>\n</ul>"},{"url":"/posts/flutter-web-should-you-use-it/","relativePath":"posts/flutter-web-should-you-use-it.md","relativeDir":"posts","base":"flutter-web-should-you-use-it.md","name":"flutter-web-should-you-use-it","frontmatter":{"title":"The Power of Flutter for Web Development: Should You Use it?","stackbit_url_path":"posts/flutter-web-should-you-use-it","date":"2023-05-15T09:00:00.000Z","excerpt":"","tags":["flutter","flutterweb","fluttermobile","flutterdevelopment"],"template":"post","thumb_img_path":"https://images.unsplash.com/photo-1550063873-ab792950096b?q=80&w=3540&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D","cover_image":"https://images.unsplash.com/photo-1550063873-ab792950096b?q=80&w=3540&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D","published_at":"2023-05-15T09:00:00.000Z","canonical_url":"https://remelehane.dev/posts/flutter-web-should-you-use-it/"},"html":"<p><img src=\"https://images.unsplash.com/photo-1550063873-ab792950096b?q=80&#x26;w=3540&#x26;auto=format&#x26;fit=crop&#x26;ixlib=rb-4.0.3&#x26;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"></p>\n<p>In the ever-evolving world of technology, developers are constantly seeking new frameworks and tools to streamline their workflow and create powerful applications. One such framework that has gained significant attention is Flutter. Known for its ability to build cross-platform mobile apps, Flutter has also made its way into web development. But the question remains: should you use Flutter for web development?</p>\n<p>In this comprehensive guide, we will explore the benefits and challenges of using Flutter for web development. We will delve into the technical aspects, performance considerations, SEO implications, and the overall suitability of Flutter for building web applications. By the end of this article, you will have a clear understanding of whether Flutter is the right choice for your web development needs.</p>\n<h2>What is Flutter?</h2>\n<p>Before diving into the specifics of using Flutter for web development, let's take a moment to understand what Flutter is and why it has gained such popularity. Flutter is an open-source UI framework developed by Google. It allows developers to build natively compiled applications for multiple platforms using a single codebase. With Flutter, you can create visually appealing and highly performant applications for Android, iOS, web, desktop, and beyond.</p>\n<h2>The Benefits of Flutter for Web Development</h2>\n<h3>1. Single Codebase, Multiple Platforms</h3>\n<p>One of the biggest advantages of using Flutter for web development is the ability to have a single codebase for multiple platforms. This means that you can write your web application once and deploy it seamlessly on Android, iOS, and the web. By eliminating the need to write platform-specific code, Flutter significantly reduces development time and effort.</p>\n<h3>2. Hot Reload for Rapid Iteration</h3>\n<p>Flutter's hot reload feature is a game-changer for developers. It allows you to see the changes you make in real-time without having to restart the application. This rapid iteration process saves valuable time and enhances productivity. Whether you are fine-tuning the UI or debugging a complex functionality, Flutter's hot reload feature enables you to iterate quickly and efficiently.</p>\n<h3>3. Robust Widget Support</h3>\n<p>Flutter offers a rich set of customizable UI widgets that make building web applications a breeze. From buttons and text fields to complex layouts and animations, Flutter provides a vast library of pre-built widgets. These widgets are highly flexible and can be easily customized to suit your application's specific needs. With Flutter, you have the power to create stunning and interactive user interfaces.</p>\n<h3>4. High Performance</h3>\n<p>Performance is a critical factor in web development, and Flutter excels in this area. Flutter's rendering engine, powered by Skia, ensures smooth animations and fast UI rendering. The framework is designed to deliver native-like performance, providing users with a seamless and responsive experience. Whether it's handling complex interactions or rendering data-intensive views, Flutter's performance capabilities are unmatched.</p>\n<h3>5. Backed by Google and a Growing Community</h3>\n<p>Flutter's association with Google provides developers with the assurance of a stable and well-supported framework. Google is actively invested in the growth and development of Flutter, continuously releasing updates and improvements. Additionally, Flutter has a thriving community of developers who contribute to its ecosystem. This community-driven approach ensures that you have access to a wealth of resources, tutorials, and libraries to enhance your web development journey.</p>\n<h2>Challenges of Using Flutter for Web Development</h2>\n<p>While Flutter offers numerous benefits for web development, it is important to consider the challenges as well. Here are some factors to keep in mind:</p>\n<h3>1. Web-Specific Performance Considerations</h3>\n<p>Flutter's performance on the web is a topic of debate among developers. While Flutter excels in mobile app development, its performance on the web may not be on par with traditional web frameworks. The initial load time and bundle size of a Flutter web application can be relatively higher compared to other web technologies. This can impact the user experience, especially on slower internet connections.</p>\n<h3>2. Search Engine Optimization (SEO)</h3>\n<p>SEO is a crucial aspect of web development, and Flutter's impact on SEO is a point of concern for many developers. Since Flutter renders content using a canvas, traditional web scrapers may struggle to analyze and index the content. This can affect the discoverability of your web application on search engines. However, it's worth noting that search engines are continuously evolving, and Google, being the creator of Flutter, is likely to address this issue in the future.</p>\n<h3>3. Limited Web-Specific Libraries</h3>\n<p>Flutter is still relatively new to web development, which means that the availability of web-specific libraries and packages may be limited compared to more mature web frameworks. This can pose challenges when you need to integrate specific functionalities or third-party services into your web application. However, the Flutter community is growing rapidly, and more web-focused libraries and packages are being developed.</p>\n<h3>4. Learning Curve for Web Developers</h3>\n<p>If you are primarily a web developer transitioning to Flutter, there may be a learning curve involved. Flutter uses the Dart programming language, which may be unfamiliar to web developers accustomed to JavaScript-based frameworks. However, with dedication and resources like Flutter's official documentation and online tutorials, web developers can quickly get up to speed and unlock the full potential of Flutter for web development.</p>\n<h3>5. Browser Compatibility</h3>\n<p>Browser compatibility is always a concern in web development, and Flutter is no exception. Although Flutter strives to provide a consistent experience across different browsers, there may be slight variations or compatibility issues to consider. It's important to thoroughly test your Flutter web application on various browsers and devices to ensure a seamless user experience for all users.</p>\n<h2>Is Flutter the Right Choice for Your Web Project?</h2>\n<p>Now that we have explored the benefits and challenges of using Flutter for web development, the question remains: should you use Flutter for your web project? The answer depends on several factors:</p>\n<h3>1. Project Requirements</h3>\n<p>Consider the specific requirements of your web project. If you need to build a web application that primarily targets web users and requires extensive SEO optimization, there may be other more mature web frameworks that better suit your needs. However, if your project requires cross-platform compatibility and you prioritize code reusability, Flutter can be a viable choice.</p>\n<h3>2. Development Timeline</h3>\n<p>If you are working on a tight deadline and need to launch your web application quickly, Flutter's single codebase and rapid development capabilities can be a significant advantage. However, if you have more time to invest in web development and prefer a framework with a larger ecosystem and established web-specific libraries, you may consider alternatives to Flutter.</p>\n<h3>3. Team Expertise</h3>\n<p>Evaluate the expertise and skill set of your development team. If your team is already proficient in Flutter or has experience with Dart, adopting Flutter for web development can be a smooth transition. However, if your team is primarily experienced in web technologies like JavaScript or frameworks like React or Angular, they may need some time to upskill and adapt to Flutter's unique development paradigm.</p>\n<h3>4. Long-Term Vision</h3>\n<p>Consider the long-term vision and scalability of your web project. If you anticipate expanding your application to multiple platforms in the future, Flutter can provide significant benefits in terms of code reusability and maintaining a consistent user experience. Flutter's versatility makes it a compelling choice for projects with long-term growth potential.</p>\n<h2>Conclusion</h2>\n<p>In conclusion, Flutter has emerged as a powerful framework for web development, offering a range of benefits such as a single codebase, rapid development, robust widget support, and high performance. However, it does come with its challenges, including web-specific performance considerations, SEO implications, and a learning curve for web developers.</p>\n<p>When deciding whether to use Flutter for web development, carefully evaluate your project's requirements, timeline, team expertise, and long-term vision. Consider the trade-offs and weigh them against the unique advantages that Flutter brings to the table. Ultimately, the decision should align with your project's goals and the needs of your target audience.</p>\n<p>Flutter's journey in the web development space is still evolving, and as the framework continues to mature, many of the challenges faced today may be addressed in the future. Whether you choose Flutter or opt for other web frameworks, remember that the success of your web project relies on sound development practices, user-centric design, and regular updates to adapt to evolving technologies and user expectations.</p>\n<p>Embrace the power of Flutter and explore its potential for web development. With the right approach and a deep understanding of its capabilities, Flutter can be a valuable asset in your quest to build exceptional web applications. Happy coding!</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/automated-flutter-unit-testing-with-github-actions/\">Automating Unit Testing for Your Flutter Project with GitHub Actions</a></li>\n<li><a href=\"https://remelehane.dev/posts/the-power-of-flutter/\">The Power of Flutter: Creating Cross-Platform Applications</a></li>\n</ul>"},{"url":"/posts/getting-started-with-flutter/","relativePath":"posts/getting-started-with-flutter.md","relativeDir":"posts","base":"getting-started-with-flutter.md","name":"getting-started-with-flutter","frontmatter":{"title":"Getting Started with Flutter for Mobile Application Development","stackbit_url_path":"posts/getting-started-with-flutter","date":"2024-01-22T09:00:00.000Z","excerpt":"","tags":["flutter","flutterweb","fluttermobile","flutterdevelopment"],"template":"post","thumb_img_path":"https://img.freepik.com/premium-vector/learn-code-flutter-mobile-ui-framework-laptop-screen-programming-language-code-illustration-vector-isolated-white-background-eps-10_399089-1925.jpg","cover_image":"https://img.freepik.com/premium-vector/learn-code-flutter-mobile-ui-framework-laptop-screen-programming-language-code-illustration-vector-isolated-white-background-eps-10_399089-1925.jpg","published_at":"2024-01-22T09:00:00.000Z","canonical_url":"https://remelehane.dev/posts/getting-started-with-flutter/"},"html":"<p><img src=\"https://img.freepik.com/premium-vector/learn-code-flutter-mobile-ui-framework-laptop-screen-programming-language-code-illustration-vector-isolated-white-background-eps-10_399089-1925.jpg\"></p>\n<p>Image Source: FreeImages</p>\n<h2>Introduction</h2>\n<p>In today's fast-paced world, mobile application development is crucial for businesses to stay relevant and reach their target audience. Flutter, an open-source UI toolkit developed by Google, has emerged as a popular choice for building high-quality, fast, and beautiful applications for iOS, Android, and the web. In this comprehensive guide, we will take you through the process of getting started with Flutter and developing your first mobile application.</p>\n<h2>What is Flutter?</h2>\n<p>Flutter is an open-source mobile application development framework created by Google. It allows developers to build cross-platform applications using a single codebase. With Flutter, you can develop apps that are visually appealing and provide a native-like user experience on both iOS and Android devices. The framework uses Google's Dart programming language, which offers a reactive programming model for building user interfaces.</p>\n<p>One of the key benefits of Flutter is its hot reload feature, which allows developers to see the changes they make to the code immediately without having to wait for the code to compile. This makes the development process faster and more efficient. Flutter also provides a rich set of pre-designed widgets that can be customized to create beautiful interfaces. These widgets include complex elements like scrolling lists, navigations, and sliders, which help save development time and effort.</p>\n<p>Another advantage of Flutter is its performance. The framework uses Skia, a powerful graphics engine, to draw every pixel on the screen. This enables Flutter to achieve smooth animations and deliver a consistent user experience, even on lower-end devices. Additionally, Flutter has a large and growing community of developers who contribute to the framework, ensuring continuous improvement and support.</p>\n<h2>Setting Up Your Flutter Environment</h2>\n<p>Before you can start developing Flutter applications, you need to set up your development environment. Flutter provides detailed instructions on how to install the Flutter SDK and configure your editor of choice. In this guide, we will use Visual Studio Code (VS Code) as the development environment. However, you can use any editor that supports Flutter, such as Android Studio or IntelliJ IDEA.</p>\n<p>To install Flutter, follow the official installation guide provided by <a href=\"https://docs.flutter.dev/get-started/install\">Flutter</a>. The guide includes instructions for different operating systems, such as Windows, macOS, and Linux. Make sure to install the Flutter SDK, the Flutter plugin for your editor, and any additional tools required by your chosen development target (e.g., Android Studio for Android development).</p>\n<p>Once you have installed Flutter, open VS Code and ensure that the Flutter plugin is activated. You can do this by going to the Extensions view in VS Code and searching for \"flutter\". If the plugin is not installed, click on the Install button to add it to your editor.</p>\n<h2>Creating Your First Flutter App</h2>\n<p>Now that you have set up your Flutter environment, it's time to create your first Flutter app. </p>\n<p>Flutter provides a command for this:</p>\n<pre><code class=\"language-shell\">flutter create my_flutter_app\n</code></pre>\n<p>For the benefit of a more detailed explanation, I will make use of the manual approach for this section.</p>\n<p>Open the command palette in VS Code by pressing F1 or Ctrl+Shift+P, and type \"flutter new\" to create a new project. Select the Flutter: New Project command and choose a folder to create your project in.</p>\n<p>Next, name your project and wait for Flutter to create the project folder. Once the project is created, open the pubspec.yaml file in the project directory. This file is used to specify the dependencies and assets for your app. Replace the contents of the file with the following:</p>\n<pre><code class=\"language-yaml\">name: my_flutter_app\ndescription: A sample Flutter application\nversion: 1.0.0\n\ndependencies:\n  flutter:\n    sdk: flutter\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n</code></pre>\n<p>This pubspec.yaml file defines the basic information about your app, including its name, description, and version. It also includes the dependency on the Flutter SDK, which is required for building Flutter apps.</p>\n<p>Next, open the lib/main.dart file in your project directory. This is the entry point of your Flutter app. Replace the contents of the file with the following code:</p>\n<pre><code class=\"language-dart\">import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'My Flutter App',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: MyHomePage(),\n    );\n  }\n}\n\nclass MyHomePage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('My Flutter App'),\n      ),\n      body: Center(\n        child: Text(\n          'Welcome to my Flutter app!',\n          style: TextStyle(fontSize: 24),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n<p>This code sets up a basic Flutter app with a home page that displays a welcome message. The <code>main()</code>function calls the <code>runApp()</code> function with an instance of the <code>MyApp</code> class, which is a widget that represents the entire app. The <code>build()</code> method of the <code>MyApp</code> widget returns a <code>MaterialApp</code> widget, which provides the basic structure for the app. The <code>MaterialApp</code> widget defines the title and theme of the app, and sets the home page to an instance of the <code>MyHomePage</code> widget.</p>\n<p>The <code>MyHomePage</code> widget, which extends the <code>StatelessWidget</code> class, defines the layout and content of the home page. In this case, it consists of an <code>AppBar</code> at the top and a centered <code>Text</code> widget that displays the welcome message.</p>\n<h2>Running Your Flutter App</h2>\n<p>To run your Flutter app, connect a physical device or start an emulator. In VS Code, click on the device selection button in the bottom-right corner of the window and choose the device you want to run the app on. If you don't see any devices listed, make sure you have set up your development target correctly and that the device is connected or the emulator is running.</p>\n<p>Once you have selected a device, click on the play button in the top-right corner of the window to start the app in debug mode. This will launch the app on the selected device or emulator. You should see the welcome message displayed on the screen.</p>\n<p>To make changes to your app and see them reflected in real-time, use the hot reload feature of Flutter. Simply make changes to your code, save the file, and Flutter will automatically update the app on the device or emulator. This allows for a faster and more efficient development process, as you can instantly see the effects of your changes without having to restart the app.</p>\n<h2>Building a User Interface with Flutter Widgets</h2>\n<p>One of the key features of Flutter is its extensive set of pre-designed widgets, which can be used to build the user interface of your app. Widgets are the building blocks of a Flutter app, and they represent everything from buttons and text fields to complex layouts and animations.</p>\n<p>Flutter provides a wide range of widgets for different purposes, such as:</p>\n<ul>\n<li>Material widgets: These widgets follow the Material Design guidelines and provide a visually appealing and consistent look and feel across different platforms. Examples include AppBar, FloatingActionButton, and Card.</li>\n<li>Cupertino widgets: These widgets mimic the iOS design style and are used to create apps with a native iOS look and feel. Examples include CupertinoNavigationBar, CupertinoButton, and CupertinoTextField.</li>\n<li>Layout widgets: These widgets help you arrange other widgets on the screen in a specific layout, such as rows, columns, grids, and stacks. Examples include Row, Column, GridView, and Stack.</li>\n<li>Input widgets: These widgets allow users to input data, such as text, numbers, and dates. Examples include TextField, DropdownButton, and DatePicker.</li>\n<li>Animation widgets: These widgets enable you to create smooth and interactive animations in your app. Examples include AnimatedContainer, AnimatedOpacity, and Hero.</li>\n</ul>\n<p>These are just a few examples of the many widgets available in Flutter. You can explore the full list of widgets in the Flutter documentation to find the ones that best fit your app's needs.</p>\n<p>To use a widget in your app, simply create an instance of the widget and add it to the widget tree. The widget tree is a hierarchical structure that represents the layout and composition of your app's user interface. Each widget has a parent and can have one or more children, forming a tree-like structure.</p>\n<p>For example, to add a button to your app, you can use the ElevatedButton widget:</p>\n<pre><code class=\"language-dart\">ElevatedButton(\n  onPressed: () {\n    // Action to perform when the button is pressed\n  },\n  child: Text('Click me'),\n)\n</code></pre>\n<p>In this code snippet, the onPressed property specifies the action to perform when the button is pressed, and the child property defines the text displayed on the button. You can customize the appearance and behavior of the button by modifying its properties.</p>\n<h2>Adding Functionality to Your Flutter App</h2>\n<p>In addition to building the user interface, you can also add functionality to your Flutter app by handling user interactions and implementing business logic. Flutter provides various mechanisms for handling user input, such as button presses, text input, and gestures.</p>\n<p>To handle button presses, you can use the onPressed property of the button widget and specify the function to be called when the button is pressed. For example:</p>\n<pre><code class=\"language-dart\">ElevatedButton(\n  onPressed: () {\n    // Action to perform when the button is pressed\n    print('Button pressed!');\n  },\n  child: Text('Click me'),\n)\n</code></pre>\n<p>In this example, the <code>print()</code> function is called when the button is pressed, and it will display the message \"Button pressed!\" in the console.</p>\n<p>To handle text input, you can use the <code>TextField</code> widget, which allows users to enter text. You can specify a controller to manage the text input and access the entered text. For example:</p>\n<pre><code class=\"language-dart\">final TextEditingController _textController = TextEditingController();\n\nTextField(\n  controller: _textController,\n  decoration: InputDecoration(\n    labelText: 'Enter your name',\n  ),\n)\n</code></pre>\n<p>In this code snippet, the <code>\\_textController</code> is used to manage the text input, and the <code>labelText</code> property of the <code>InputDecoration</code> widget sets the label text for the text field.</p>\n<p>To handle gestures, such as taps, swipes, and drags, you can use gesture recognizer widgets, such as <code>GestureDetector</code> and <code>InkWell</code>. These widgets allow you to detect and respond to different types of gestures. For example:</p>\n<pre><code class=\"language-dart\">GestureDetector(\n  onTap: () {\n    // Action to perform when the widget is tapped\n    print('Widget tapped!');\n  },\n  child: Container(\n    width: 200,\n    height: 200,\n    color: Colors.blue,\n  ),\n)\n</code></pre>\n<p>In this example, the <code>onTap</code> property of the <code>GestureDetector</code> widget specifies the action to perform when the widget is tapped, and the child property defines the widget to be tapped. When the widget is tapped, it will display the message \"Widget tapped!\" in the console.</p>\n<p>By combining these mechanisms, you can create interactive and engaging user experiences in your Flutter app.</p>\n<h2>Testing and Debugging Your Flutter App</h2>\n<p>Testing and debugging are crucial steps in the development process to ensure the quality and reliability of your Flutter app. Flutter provides various tools and techniques for testing and debugging, allowing you to identify and fix issues efficiently.</p>\n<p>Flutter includes a built-in testing framework called Flutter Test, which allows you to write unit, integration, and widget tests for your app. Unit tests verify the functionality of individual units of code, such as functions or classes, while integration tests check the interaction between different components of your app. Widget tests are used to test the user interface and ensure that it behaves as expected.</p>\n<p>To write tests for your Flutter app, you can create test files in the test directory of your project. Flutter Test provides a set of APIs and matchers that you can use to define test cases and assertions. Here's an example of a simple unit test:</p>\n<pre><code class=\"language-dart\">import 'package:flutter_test/flutter_test.dart';\n\nint add(int a, int b) {\n  return a + b;\n}\n\nvoid main() {\n  test('Addition test', () {\n    expect(add(2, 3), equals(5));\n  });\n}\n</code></pre>\n<p>In this example, the <code>test()</code> function defines a test case named \"Addition test\". The <code>expect()</code> function is used to define assertions and check if the actual result of the <code>add()</code> function matches the expected result.</p>\n<p>To run tests for your Flutter app, you can use the <code>flutter test</code> command in the terminal. This command will execute all the tests in your project and display the results. You can also run tests from within your editor by using the provided test runner.</p>\n<p>In addition to testing, Flutter provides powerful debugging tools to help you identify and fix issues in your app. The Flutter DevTools is a suite of performance profiling and debugging tools that can be accessed from within your browser. DevTools allows you to inspect the widget tree, view logs and errors, analyze performance, and debug layout issues.</p>\n<p>To launch DevTools, run your app in debug mode and open the following URL in your browser: <a href=\"http://localhost:8080/\">http://localhost:8080/</a>. This will open the DevTools interface, where you can explore the various debugging and profiling features. DevTools provides a comprehensive set of tools to help you diagnose and resolve issues in your Flutter app.</p>\n<h2>Deploying Your Flutter App</h2>\n<p>Once you have developed and tested your Flutter app, it's time to deploy it to the desired platforms. Flutter supports multiple platforms, including iOS, Android, web, and desktop. However, the deployment process may vary slightly for each platform.</p>\n<p>For iOS deployment, you need to have a Mac computer with Xcode installed. Xcode is the official development environment for iOS and macOS apps. To deploy your Flutter app to an iOS device or the App Store, you need to create an iOS code signing certificate, configure the project settings in Xcode, and build the app using Xcode.</p>\n<p>For Android deployment, you can deploy your Flutter app to an Android device or distribute it through the Google Play Store. To deploy to an Android device, make sure you have enabled USB debugging on your device and connect it to your computer. You can then run the flutter run command with the appropriate device selected to install and run the app on the device.</p>\n<p>To distribute your Flutter app through the Google Play Store, you need to generate a release build of your app using the flutter build apk command. This will create an APK file that can be uploaded to the Play Store. You also need to sign the APK with a digital certificate and provide the necessary app metadata and screenshots.</p>\n<p>For web deployment, Flutter provides experimental support for building web applications. To deploy your Flutter app to the web, you need to run the flutter build web command, which will generate a set of static files that can be hosted on a web server. You can then deploy these files to a web hosting provider or serve them locally for testing.</p>\n<p>For desktop deployment, Flutter supports building applications for Windows, macOS, and Linux. The process involves creating a release build of your app using the flutter build command and configuring the necessary platform-specific settings. Once the build is complete, you can distribute your app as an executable file or package it for distribution through app stores or package managers.</p>\n<h2>Conclusiong</h2>\n<p>Flutter offers a powerful and efficient framework for developing high-quality mobile applications for iOS, Android, web, and desktop platforms. With its rich set of pre-designed widgets, hot reload feature, and performance optimizations, Flutter enables developers to create visually appealing and responsive apps with ease.</p>\n<p>In this guide, we have covered the basics of getting started with Flutter, including setting up your development environment, creating your first app, building user interfaces with widgets, adding functionality, testing and debugging, and deploying your app to different platforms. By following these steps and exploring the vast capabilities of Flutter, you can embark on your journey as a Flutter developer and unlock the potential of cross-platform app development.</p>\n<p>Remember to continuously explore the Flutter documentation, community resources, and online tutorials to deepen your understanding and enhance your skills in Flutter app development. With dedication and practice, you can become proficient in Flutter and create amazing mobile apps that delight users on multiple platforms.</p>\n<p>Happy coding with Flutter!</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/flutter-data-testing/\">Flutter: Data Testing</a></li>\n<li><a href=\"https://remelehane.dev/posts/widget-testing-rendeflex-overflow/\">Widget testing: Dealing with Renderflex Overflow Errors</a></li>\n</ul>"},{"url":"/posts/githib-copilot-flutter-developer/","relativePath":"posts/githib-copilot-flutter-developer.md","relativeDir":"posts","base":"githib-copilot-flutter-developer.md","name":"githib-copilot-flutter-developer","frontmatter":{"title":"Using GitHub CoPilot as a Flutter Developer","stackbit_url_path":"posts/githib-copilot-flutter-developer","date":"2023-12-18T09:00:00.000Z","excerpt":"","tags":["flutter","copilot","flutter","githubcopilot"],"template":"post","thumb_img_path":"https://images.unsplash.com/photo-1654277041218-84424c78f0ae?q=80&w=3524&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D","cover_image":"https://images.unsplash.com/photo-1654277041218-84424c78f0ae?q=80&w=3524&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D","published_at":"2023-12-18T09:00:00.000Z","canonical_url":"https://remelehane.dev/posts/githib-copilot-flutter-developer/"},"html":"<p><img src=\"https://images.unsplash.com/photo-1654277041218-84424c78f0ae?q=80&#x26;w=3524&#x26;auto=format&#x26;fit=crop&#x26;ixlib=rb-4.0.3&#x26;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"></p>\n<h1>Introduction</h1>\n<p>In the ever-evolving world of software development, staying ahead of the curve is crucial. One of the latest advancements in the field is the introduction of AI code generation tools, such as CoPilot, designed to streamline and enhance the coding process. For Flutter developers, CoPilot offers a range of features that can significantly improve productivity and efficiency. In this article, we will explore the capabilities of CoPilot, its impact on the Flutter development workflow, and how it can revolutionize the way developers write code.</p>\n<h2>Understanding CoPilot: The AI Assistant for Flutter Developers</h2>\n<p>CoPilot is an AI-powered assistant developed by GitHub and OpenAI, specifically designed to assist developers in writing code. It leverages the power of artificial intelligence to analyze vast amounts of publicly available code and provides intelligent suggestions for completing code snippets, automating repetitive tasks, and even generating entire API/backend code.</p>\n<h2>The Evolution of CoPilot: From GPT-3 to GPT-4</h2>\n<p>CoPilot made its debut in 2021, powered by the GPT-3 model. However, since then, it has undergone significant improvements and now utilizes the more advanced GPT-4 model. This upgrade brings enhanced accuracy, improved suggestions, and a deeper understanding of code context. These advancements make CoPilot an indispensable tool for Flutter developers looking to streamline their coding process and improve overall productivity.</p>\n<h2>Pricing Plans for CoPilot</h2>\n<p>Before diving into the features and functionalities of CoPilot, let's take a quick look at the available pricing plans. CoPilot offers different plans to cater to the diverse needs of developers:</p>\n<ul>\n<li>Enterprise ($39/month, available from Feb 2024)</li>\n<li>Business ($19/month)</li>\n<li>Individual ($10/month)</li>\n<li>Free for verified students, teachers, and maintainers of popular open-source projects</li>\n</ul>\n<p>Choose the plan that best suits your requirements and sign in with your GitHub account to get started with CoPilot.</p>\n<h1>Getting Started with CoPilot</h1>\n<p>Now that we have a basic understanding of CoPilot and its pricing plans, let's explore how to get started with this powerful AI assistant for Flutter development.</p>\n<h2>Installing CoPilot in Your IDE</h2>\n<p>To begin using CoPilot, you need to install the necessary extensions in your preferred IDE, such as Visual Studio Code or Android Studio. Simply search for the \"GitHub Copilot\" extension in the respective extension marketplace and install it. Once installed, you'll see the CoPilot icon in your IDE's toolbar.</p>\n<h2>Authenticating CoPilot with Your GitHub Account</h2>\n<p>To activate CoPilot, you'll need to authenticate it with your GitHub account. Click on the CoPilot icon in your IDE's toolbar and follow the authentication process. If you're using CoPilot for the first time, you may need to request access from GitHub.</p>\n<h2>Using CoPilot for Autocompletion and Code Suggestions</h2>\n<p>With CoPilot successfully installed and authenticated, you can now take advantage of its autocompletion and code suggestion capabilities. As you write code in your Flutter project, CoPilot will analyze the context and provide intelligent suggestions to complete your code. Simply press the Tab key to accept a suggestion or explore different suggestions in the CoPilot tab on the side panel of your IDE.</p>\n<h2>Benefit 1: Streamlining Repetitive Code</h2>\n<p>One of the significant advantages of using CoPilot is its ability to streamline the process of writing repetitive code. For Flutter developers, this can be particularly useful when dealing with common patterns and boilerplate code. CoPilot can generate code snippets for various Flutter components, such as widgets, layouts, and state management, saving developers valuable time and effort.</p>\n<h2>Benefit 2: Intelligent API Code Generation</h2>\n<p>CoPilot goes beyond autocompletion and offers intelligent API code generation. It can automatically generate code for API calls, eliminating the need to manually write model classes, API calling code, parsing logic, and even state management code. This feature is especially valuable for Flutter developers working on projects that involve interacting with APIs and backend systems.</p>\n<h2>Benefit 3: Unit Testing Made Easier</h2>\n<p>Writing unit tests is an essential part of ensuring the quality and reliability of your code. CoPilot can significantly simplify the process of writing unit tests by generating test cases based on your existing code. By simply writing the first test case, CoPilot can suggest additional test cases with a high level of accuracy. This feature not only saves time but also encourages developers to adopt a test-driven development approach.</p>\n<h2>Benefit 4: Assistance with Code Documentation</h2>\n<p>Proper code documentation is essential for maintaining code quality and ensuring ease of collaboration among team members. CoPilot can assist in generating code documentation by suggesting comments and explanations based on the context of your code. This feature helps developers save time and ensures that important details are not overlooked when documenting their code.</p>\n<h2>Benefit 5: Learning and Improving as You Code</h2>\n<p>CoPilot is not just a tool for generating code; it is also a valuable learning resource. As you interact with CoPilot and utilize its suggestions, you can gain insights into best practices, coding patterns, and new techniques. By observing how CoPilot generates code and analyzing its suggestions, developers can enhance their own coding skills and expand their knowledge base.</p>\n<h1>Limitations and Considerations</h1>\n<p>While CoPilot offers numerous benefits and can greatly enhance the Flutter development process, it's important to be aware of its limitations and consider certain factors when using it.</p>\n<h2>Imperfect Code Suggestions</h2>\n<p>CoPilot's suggestions may not always be perfect or error-free. It's crucial for developers to review and validate the generated code to ensure its correctness and adherence to project requirements. While CoPilot can save time and effort, it should never replace careful manual code review and quality assurance processes.</p>\n<h2>Dependency on Context and Training Data</h2>\n<p>CoPilot's performance and accuracy depend on the context of your code and the training data it has been exposed to. It may perform better in some scenarios than others, and its effectiveness can vary based on the complexity of the code and the specific libraries and packages being used. Developers should be mindful of the limitations and adapt their usage of CoPilot accordingly.</p>\n<h2>Potential Learning Bias</h2>\n<p>As CoPilot is trained on publicly available code, it is important to note that the quality of the training data can vary. CoPilot may generate code that is suboptimal or reflects outdated practices present in the training data. Developers should exercise caution and rely on their own expertise and knowledge to ensure the generated code aligns with best practices and current industry standards.</p>\n<h1>Conclusion</h1>\n<p>CoPilot is a powerful AI assistant that can revolutionize the way Flutter developers write code. With its autocompletion, code generation, and suggestion capabilities, CoPilot streamlines repetitive tasks, simplifies API integration, and enhances the overall development workflow. While it is not a replacement for manual coding and careful review, CoPilot offers valuable assistance and learning opportunities for developers looking to boost their productivity and efficiency. By leveraging the power of AI, Flutter developers can take their coding skills to new heights and deliver high-quality applications in less time.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/flutter-web-should-you-use-it/\">The Power of Flutter for Web Development: Should You Use it?</a></li>\n<li><a href=\"https://remelehane.dev/posts/riverpod-vs-bloc/\">Flutter State Management: Exploring RiverPod and BLoC</a></li>\n</ul>"},{"url":"/posts/ifttt-filters-are-actually-quite-capable/","relativePath":"posts/ifttt-filters-are-actually-quite-capable.md","relativeDir":"posts","base":"ifttt-filters-are-actually-quite-capable.md","name":"ifttt-filters-are-actually-quite-capable","frontmatter":{"title":"IFTTT filters are actually quite capable","stackbit_url_path":"posts/ifttt-filters-are-actually-quite-capable","date":"2021-06-15T07:02:15.000Z","excerpt":"I have been on the pro subscription for [IFTTT](http://ifttt.com), and was not until recently that I decided to actually take in and take a look at just what it could do.","tags":["automate","life","iffff","javascript"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*yPXQ1XYpS3VHJsPrLK24FQ.png"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*yPXQ1XYpS3VHJsPrLK24FQ.png\" alt=\"If This Then That banner image\"></p>\n<p>I have been on the pro subscription for <a href=\"http://ifttt.com\">IFTTT</a>, and was not until recently that I decided to actually take in and take a look at just what it could do.</p>\n<p>I have been using IFTTT itself for many years so have quite a lot of workflows already set up, many of them just tweet articles I like from sites like Reddit or Medium, but that usually also means hitting my <a href=\"https://www.twitter.com/RemeJuan\">Twitter</a> account with a few to quite a few new posts in a single shot. I decided it may be better to trickle that a bit and bring <a href=\"https://buffer.com\">Buffer</a> into the mix, for me the free one with up to 10 posts in the queue would have been fine, does not matter if a few get lost.</p>\n<p>Once I had updated all these workflows to use Buffer instead of Twitter directly, I thought maybe the filter could help with another workflow that was not possible directly.</p>\n<h4>Filters, first stab…</h4>\n<p>The first stab was really simple, I wanted to tweet photos that I liked (upvoted), but only if it was from <a href=\"https://www.reddit.com/r/EarthPorn\">/r/EarthPorn</a>, this would then trigger a post with an attached image.</p>\n<p>I presumed filters would be this somewhat complex set of dragging and dropping logic around, which is why it was not yet available on mobile, I was quite happy to see that what we got was actually a code window that took JavaScript, with a reasonable sprinkling of ES6 in the mix too.</p>\n<p>This also then explains why it was not available on mobile, I did manage to put together the very simple workflow I wanted for /r/EarthPorn via my iPad on their website, but when I dove into a move complex one that failed pretty quickly.</p>\n<p>In order to set up a filter, you do need to provide both the if and then first, this is required for you to be able to get the correct environment variables that will be available.</p>\n<pre><code>const sub = Reddit.newLikeByYouReddit.Subreddit.toLowerCase();\n\nif (sub != 'earthporn') {\n  Buffer.addToBufferWithPhoto.skip();\n}\n</code></pre>\n<p>This is the very simple one that I had set up, as you can see all I am doing is checking that the SubReddit’s name is EarthPorn, if not, it simply skips this post, which would then NOT add this to my Buffer queue.</p>\n<h4>Let’s increase the complexity…</h4>\n<p>This is where I dove into a more creative filter flow.</p>\n<p>A lot of what gets shared is often interesting article that I come across from Reddit, and bookmarking the post is the easiest way to trigger an automated flow, far simpler than me manually sharing the URL to Twitter myself.</p>\n<blockquote>\n<p>I will spend 2 days automating a 2-minute repetitive task just so that I don’t have to keep repeating it…</p>\n</blockquote>\n<p>In this case, filters would actually allow me to not only automate the posting, trickle them as to not flood my feed, but also enhance them, as with some reasonably simple logic I can manipulate the entire post, and for this case, very simply add in likely appropriate hast tags.</p>\n<pre><code>const sub = Reddit.newSaveByYouReddit.Subreddit.toLowerCase();\nconst title = Reddit.newSaveByYouReddit.Title.toLowerCase();\n\nconst tags = [];\n\n// FE/JS Dev\nconst feSub = sub == \"frontend\" || sub == \"javscript\";\nif (feSub) {\n  tags.push(\"frontend\", \"development\", sub);\n\nif (title.indexOf(\"css\") != -1) tags.push(\"css\", \"styles\", \"web\");\n  if (title.indexOf(\"html\") != -1) tags.push(\"html\", \"layout\", \"web\");\n  if (title.indexOf(\"javascript\") != -1) tags.push(\"javascript\");\n  if (title.indexOf(\"ecmascript\") != -1) tags.push(\"javascript\", \"ecmascript\");\n}\n\nconst uniqueTags = tags.filter((value, index, self) => {\n  return self.indexOf(value) === index;\n});\n\nconst hashTags = tags.map((t) => `#${t}`);\n\nconst url = Reddit.newSaveByYouReddit.PostURL;\n\nconst message = `\n${title} vi a/r/${sub} ${url}\n${hashTags.toString().replace(/,/g, ' ')}\n`;\n\nBuffer.addToBuffer.setMessage(message);\n</code></pre>\n<p>As you can see, this one is a bit more involved than my first attempt, and this is not all of it, but it’s pretty repetitive as I am just applying much of the same logic across different subs.</p>\n<p>I am pulling out both the title and the subreddit into variables as lowercase versions for easier comparison and have an empty array to push tags into.</p>\n<p>Depending on the sub I add a set of basic tags as well as check the title for keywords for other possible relevant tags.</p>\n<p>To be safe I also iterate through the resulting list of tags to ensure there are no duplicates, from there I build up a new message to be tweeted and use the available setMessage function provided by the buffer filter to override the message that would have been sent.</p>\n<h4>Final thoughts…</h4>\n<p>As you can see, the second one is more complex, at their core both of these are still pretty simple use cases and I can imagine that will a little creative thinking and possibly some further enhancements from IFTTT down the line, this could become a very capable tool for automation.</p>\n<p>Tweets are probably one of the simplest things one could achieve via IFTTT, I know I have some other, simple, yet interesting ones, including one that switches on my geyser when I finish a cycle. Who doesn't like a hit shower… lol.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<p><a href=\"https://remelehane.dev/posts/working-from-home-works-for-me/\">Working from home works for me…</a></p>"},{"url":"/posts/github-copilot-1-year-later/","relativePath":"posts/github-copilot-1-year-later.md","relativeDir":"posts","base":"github-copilot-1-year-later.md","name":"github-copilot-1-year-later","frontmatter":{"title":"GitHub CoPilot one year later...","stackbit_url_path":"posts/github-copilot-1-year-later","date":"2022-12-26T09:00:00.000Z","excerpt":"My thoughts on GitHub's CoPilot after a year of using it.","tags":["GitHub","CoPilot","aiprogramming","aicoding"],"template":"post","thumb_img_path":"https://cdn.hashnode.com/res/hashnode/image/stock/unsplash/81543ecbe4f5223bc251b9a7e0a0d11c.jpeg"},"html":"<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/stock/unsplash/81543ecbe4f5223bc251b9a7e0a0d11c.jpeg\" alt=\"Github CoPilot\"></p>\n<p>AI is one of the current hot topics, although CoPilot may be somewhat older news. As one of the early adopters, I thought it was about time I put my thoughts down.</p>\n<p>I started using CoPilot near the end of the beta phase, and back then I will admit I was not too impressed, but as someone who likes new toys, I stuck with it, and eventually, it grew on me, and it started becoming useful.</p>\n<p>I never gave it the best odds, I am predominantly a Flutter developer, and neither dart nor flutter was listed as one of the supported languages, yet it soon started making very useful suggestions, nothing groundbreaking, nothing I would not have typed out myself, but boy was it handy to replace a few hundred keystrokes with a simple tap of the \"Tab\" key.</p>\n<h2>Is it replacing developers?</h2>\n<p>I think this question by now has been answered to death, but I also feel like people are also not done asking it, and the simple answer is No.</p>\n<p>Fundamentally I think there are 2 main reasons for this, the important one being it is very far off from any form of sentience. What it writes is useful, but flawed,</p>\n<p>The second one is, clients, I have been a developer for over 12 years, and I am yet to find a customer who both knows what they want and how to articulate it, their idea of a brief is a paragraph and a few grunts.</p>\n<p>Up until customers, people in general, actually know what they want, and how to articulate it, AI may as well be a rock.</p>\n<h2>Where is it most useful?</h2>\n<p>As mentioned, I have been using it for some time, and I have found that it's proven itself most valuable in the areas of tedium, as well as the occasional google prevention.</p>\n<h3>The Tedium...</h3>\n<p>What I mean by this, is those areas of simpler, repetitive code, one of my first \"wow\" moments, back when it was way more wrong than right, I was writing a simple function to either choose text or an icon, something reasonably simple, and the crux of the function would have been a switch statement on the incoming argument.</p>\n<p>I typed \"switch\" and the preceding 15 lines were suggested, just like that, and 100% correct too.</p>\n<p>Since then it has gotten both better and worse, it seems at times to lose a bit of context of the app and suggest the correct variable or type for example but choose a different <em>style,</em> so where I am using \"qr_code\" it would instead suggest \"qrCode\".</p>\n<p>Not a train smash at all, and honestly, it takes far less time to fix up the few odd mistakes like that, which the highlighted by the editor anyway, than to have written the entire thing out.</p>\n<p>Another place it has proven to be quite useful is unit tests, if I am testing a function or class, I can often get away with only writing the first test and it will start suggesting with above 90% accuracy the rest of them, and they get more accurate once I begin correcting it, that alone has probably saved me many hours.</p>\n<h3>The Googling...</h3>\n<p>This is something I run into less often, but can also prove itself to be very handy, one of the things you can do with CoPilot, is \"request\" code via comments, I have used this many times for simple functions, or even ones similar he switches above, where I can get a 90%+ accurate function, off basically asking it a question.</p>\n<p>This also helps a lot with memory, the problem with being a developer for over a decade is there is a lot to remember, and sometimes it's the simple things can become less clear in one's head, especially when working in 3 different languages.</p>\n<p>When unclear, the reflex is to simply google it and double-check what is in your head, however, you can get a good enough answer by asking CoPilot.</p>\n<p>The most recent use-case was remembering just how to sort an array by another array, in dart.</p>\n<pre><code class=\"language-dart\">      ..sort((a, b) {\n        final aIndex = sortOrder.indexOf(a.type);\n        final bIndex = sortOrder.indexOf(b.type);\n        return aIndex.compareTo(bIndex);\n      });\n</code></pre>\n<p>This is exactly what I got when I commented:</p>\n<pre><code class=\"language-dart\">// sort the data by type using the sortOrder array\n</code></pre>\n<p>Now this is nothing amazing, or groundbreaking, and as examples go it is also pretty simple, and it can do more, but this is one of those silly, simple things that you probably should not need to, but at that moment do, need to google.</p>\n<p>This way you can stay in your editor, and even if it is not 100%, it will get you close enough to fill in the blanks, and if you are unit testing your code, you also have that third check.</p>\n<h3>Where does it fall short?</h3>\n<p>Not sure this one is needed as I think I have covered many of its shortcomings already, but to reiterate, it's not perfect, it will seldom generate perfect code, and odds are 8 out of 10 times you are going to need to fix at least a couple of things of its suggestions, but at least for my experience, that is good enough, it saves enough time to warrant its usefulness, to warrant it's cost.</p>\n<h3>My Concerns...</h3>\n<p>While it may have come a cross as a lot of praise towards CoPilot, I am also not without my concerns, the problems highlighted of code being imperfect can, in less experienced hands, and especially in an untyped codebase, probably was a lot of time.</p>\n<p>More experienced developers will more easily spot code smell, will more easily spot incorrectly suggested variables, and will more easily spot suboptimal code.</p>\n<p>While it is a tool that can be of great benefit to developers, those still learning, and those new to the game could fall victim to inadvertently learning bad practices, CoPilot is after all trained on pretty much everything on GitHub, not everything is of high quality, some of it even has to be downright garbage.</p>\n<p>Realistically, or at least optimistically, the algorithm was correctly weighted to more likely surface suggestions based on the higher quality code, but that will not always be the case.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your development journey :D</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/automated-unit-testing-with-github-actions/\">Automated Unit Testing with GitHub Actions</a></li>\n<li><a href=\"https://remelehane.dev/posts/diy-node-cache-for-docker-ci/\">DIY node_modules cache for Docker in your CI</a></li>\n</ul>"},{"url":"/posts/importance-of-unit-testing-in-flutter/","relativePath":"posts/importance-of-unit-testing-in-flutter.md","relativeDir":"posts","base":"importance-of-unit-testing-in-flutter.md","name":"importance-of-unit-testing-in-flutter","frontmatter":{"title":"The Importance of Unit Testing in Flutter Development","stackbit_url_path":"posts/importance-of-unit-testing-in-flutter","date":"2023-11-20T09:00:00.000Z","excerpt":"","tags":["flutter","fluttermobile","unittesting","testing","flutter testing"],"template":"post","thumb_img_path":"https://raw.githubusercontent.com/RemeJuan/remelehane/main/2022/07/upgit_20220728_1658994619.webp","Cover_image":"https://raw.githubusercontent.com/RemeJuan/remelehane/main/2022/07/upgit_20220728_1658994619.webp","published_at":"2023-11-20T09:00:00.000Z","canonical_url":"https://remelehane.dev/posts/importance-of-unit-testing-in-flutter/‍"},"html":"<p><img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/2022/07/upgit_20220728_1658994619.webp\"></p>\n<p>As a Flutter developer, it is crucial to ensure the reliability and stability of your code. One of the best ways to achieve this is through unit testing. Unit testing allows you to test individual components of your code to verify that they function correctly. In this article, we will explore the importance of unit testing in Flutter development and discuss some effective strategies for implementing unit tests.</p>\n<h2>What is Unit Testing?</h2>\n<p>Unit testing is a software testing method where individual units or components of a program are tested independently to ensure that they work as expected. In the context of Flutter development, units can refer to functions, classes, or even widgets. By isolating and testing these units, you can catch bugs and errors early in the development process, making it easier to fix issues and maintain code quality.</p>\n<p>Unit tests typically follow a arrange-act-assert pattern. First, you arrange the necessary preconditions and inputs for the unit being tested. Then, you perform the action or operation that you want to test. Finally, you assert that the expected output or behavior is achieved. This process helps identify any discrepancies between the expected and actual behavior of your code.</p>\n<h2>Benefits of Unit Testing in Flutter</h2>\n<p>Unit testing offers several key benefits for Flutter developers:</p>\n<h3>1. Early Bug Detection</h3>\n<p>Unit tests allow you to catch bugs and errors early in the development process. By testing individual units of code, you can identify and fix issues before they propagate to other parts of the application. This helps prevent the accumulation of bugs and reduces the overall time and effort required for debugging.</p>\n<h3>2. Code Maintainability</h3>\n<p>Unit testing promotes code maintainability by making it easier to understand and modify. When you have comprehensive unit tests in place, you can confidently make changes to your codebase without fear of breaking existing functionality. Unit tests act as a safety net, providing reassurance that your changes do not introduce new bugs.</p>\n<h3>3. Code Refactoring</h3>\n<p>Unit tests facilitate code refactoring, allowing you to improve the structure and design of your code without sacrificing functionality. When you refactor code, you can rewrite it in a more efficient and maintainable way. With unit tests in place, you can validate that the refactored code still produces the same expected outcomes, ensuring that you haven't inadvertently introduced errors.</p>\n<h3>4. Collaboration and Documentation</h3>\n<p>Unit tests serve as a form of documentation for your codebase. They provide insights into the intended behavior of individual components and serve as an example of how to use them. Additionally, unit tests make it easier for multiple developers to collaborate on a project. They act as a common understanding of how different parts of the code should behave, enabling developers to work more efficiently and effectively together.</p>\n<h3>5. Regression Testing</h3>\n<p>Unit tests act as a safety net during the development process, especially when you introduce new features or make changes to existing functionality. They allow you to quickly verify that the core functionality of your application has not been compromised by recent modifications. By running unit tests regularly, you can catch regression bugs that may have been introduced unintentionally.</p>\n<h2>Strategies for Unit Testing in Flutter</h2>\n<p>Now that we understand the benefits of unit testing in Flutter development, let's explore some effective strategies for implementing unit tests in your projects.</p>\n<h3>1. Test-Driven Development (TDD)</h3>\n<p>Test-Driven Development (TDD) is a development approach where you write tests before writing the actual code. This process involves creating a test case, running the test (which should fail initially), and then writing the code to make the test pass. TDD promotes a disciplined and iterative development process that ensures code quality and minimizes the risk of introducing bugs.</p>\n<h3>2. Mocking Dependencies</h3>\n<p>In Flutter development, you often have dependencies on external services or APIs. To isolate your code and make it testable, you can use mocking frameworks to create mock objects that simulate the behavior of these dependencies. By replacing real dependencies with mocks, you can control the behavior of external services and focus on testing the specific functionality of your code.</p>\n<h3>3. Test Coverage</h3>\n<p>Test coverage is a metric that measures the proportion of your code that is covered by tests. It is important to aim for high test coverage to ensure that all critical parts of your code are thoroughly tested. By analyzing test coverage reports, you can identify areas of your code that are not adequately covered and prioritize writing additional tests for those areas.</p>\n<h3>4. Test Fixtures</h3>\n<p>Test fixtures are reusable objects or data that are used as inputs for your tests. In Flutter, you can use test fixtures to set up a consistent state for your tests. This can include initializing objects, setting up dependencies, or providing sample data. By using test fixtures, you can ensure that your tests are consistent and repeatable, improving the reliability of your test suite.</p>\n<h3>5. Continuous Integration</h3>\n<p>Integrating unit tests into your continuous integration (CI) pipeline is crucial for maintaining code quality. By running your tests automatically on every code change, you can quickly identify any issues introduced by new code. CI tools can generate reports and notify you of any test failures, allowing you to address them promptly.</p>\n<h2>Conclusion</h2>\n<p>Unit testing is an essential practice in Flutter development. It helps ensure the reliability, maintainability, and quality of your codebase. By catching bugs early, facilitating code refactoring, and promoting collaboration, unit testing plays a vital role in delivering robust and stable Flutter applications. Incorporate unit testing into your development process, follow best practices, and leverage the available tools and frameworks to maximize the benefits of unit testing in your Flutter projects.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/flutter-widget-testing/\">Flutter Widget Testing: Enhancing the Accuracy and Efficiency of Your App Testing</a></li>\n<li><a href=\"https://remelehane.dev/posts/flutter-data-testing/\">Flutter: Data Testing</a></li>\n</ul>"},{"url":"/posts/handling-race-conditions-with-redux-thunk/","relativePath":"posts/handling-race-conditions-with-redux-thunk.md","relativeDir":"posts","base":"handling-race-conditions-with-redux-thunk.md","name":"handling-race-conditions-with-redux-thunk","frontmatter":{"title":"Handling race conditions with redux-thunk","stackbit_url_path":"posts/handling-race-conditions-with-redux-thunk","date":"2018-05-22T04:38:40.000Z","excerpt":"One very important feature included in many modern web applications is search, our users always need to be able to find something, recently I had to hook up a “real-time” search","tags":["react","racecondition","redux"],"template":"post","thumb_img_path":"https://cdn-images-1.medium.com/max/500/1*vuRVtzCDBnbF_YINN6uKRg.png"},"html":"<p><img src=\"https://cdn-images-1.medium.com/max/500/1*vuRVtzCDBnbF_YINN6uKRg.png\" alt=\"Redux Logo\"></p>\n<p>One very important feature included in many modern web applications is search, our users always need to be able to find something, recently I had to hook up a “real-time” search powered by <a href=\"https://www.elastic.co\"><em>elastic search</em></a><em>,</em> as the user types we start returning a short list of what is potentially the most relevant to what your typing.</p>\n<p>To make results more relevant and useful we naturally limited the initial API call to only after the third character was entered and also <a href=\"https://github.com/RemeJuan/debounce-redux-dispatch\">debounced the async dispatch</a>, so all of this works swimmingly and was easy enough to set up.</p>\n<p>This is where potential problems begin to come in, even with a debounce we still have multiple calls that are likely to fire off and there is no way to control the order they return in, to ensure we have the correct results for the user, all we really care about is the last call that we made.</p>\n<p>After some time spent sifting through googles results looking at the various other ideas users had come up with, the idea arose to use timestamps in order to filter out all but the last made call and in turn update the state with the desired result set.</p>\n<p>This solution turned out to work pretty well and was relatively easy to set up with only minor changes needed to how you have already structured you actions/thunks and reducer.</p>\n<p><strong>Action</strong></p>\n<p>You need to set up a start action that includes a data payload, this will be used in the thunk for setting the time in the reducer for the start of the search query, in addition to success and error.</p>\n<pre><code>export const SEARCH_POST_START = 'SEARCH_POST_START';\n\nexport const searchPostNoResults = data => ({\n type: SEARCH_POST_NO_RESULTS, data,\n});\n</code></pre>\n<p><strong>Thunk</strong></p>\n<p>As for the thunk, all you should need to do is update it to include this new action before the API call begins.</p>\n<pre><code>export function search(searchQuery) {\n return async (dispatch, getState) => {\n   const timestamp = Date.now();\n   const startData = { searchText: searchQuery, timestamp };\n   dispatch(searchPostStart(startData));\n   try {\n     const url = `\n${URL}?searchQuery=${searchQuery}\n`;\n     const options = {};\n     const response = await fetch(url, options);\n     const json = await response.json();\n     const success = { searchResults: json, timestamp };\n     return dispatch(searchPostSuccess(success));\n   } catch (error) {\n     const err = { error: true, errorMessage: error };\n     return dispatch(searchPostError(err));\n   }\n };\n}\n</code></pre>\n<p>In the above snippet, you will see at the start of the thunk we dispatch the start action which includes the search query as well as the current timestamp.</p>\n<p>The same logic then applies to the success and error, each of them gains this timestamp from this instance of the call for later comparison in the reducer.</p>\n<p><strong>Reducer</strong></p>\n<p>The final piece happens here, firstly a small helper comes in which does a simple check on the incoming timestamps.</p>\n<pre><code>function actionIsValid(state, data) {\n return data.timestamp >= state.timestamp;\n}\n</code></pre>\n<p>As you can see all it is doing is ensuring that the incoming timestamp is not older than the one stored in the current state.</p>\n<pre><code>export const initialState = {\n  error: false,\n  errorMessage: undefined,\n  isSearching: false,\n  searchResults: [],\n  searchText: '',\n  timestamp: undefined,\n};\n\nfunction actionIsValid(state, data) {\n  return data.timestamp >= state.timestamp;\n}\n\nexport default function searchReducer(state = initialState, action){\n const { type, data } = action;\n\n switch (type) {\n   case SEARCH_POST_SUCCESS: {\n     if (actionIsValid(state, data)) {\n       return {\n         ...state,\n         ...data,\n         isSearching: false,\n       };\n     }\n     return state;\n   }\n\n  case SEARCH_POST_START:\n    return {\n      ...state,\n      ...data,\n      isSearching: true,\n    };\n\n  default:\n    return state;\n  }\n}\n</code></pre>\n<p>I just included the start and success for brevity, you will see I am simply spreading the data object from the action dispatched from the thunk, which was set up with keys matching those in the reducer for error, searchResults, timestamp and based on the is ationIsValid helper you can determine if the state needs to be updated or not.</p>\n<p>For a complete, and better-highlighted example, here is a complete <a href=\"https://gist.github.com/RemeJuan/540800f3d600e95c18f6dad183f4382e\">gist</a>.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>"},{"url":"/posts/improving-user-experience-through-simple-ota-updates-in-flutter/","relativePath":"posts/improving-user-experience-through-simple-ota-updates-in-flutter.md","relativeDir":"posts","base":"improving-user-experience-through-simple-ota-updates-in-flutter.md","name":"improving-user-experience-through-simple-ota-updates-in-flutter","frontmatter":{"title":"Improving User Experience through simple OTA updates in Flutter","stackbit_url_path":"posts/improving-user-experience-through-simple-ota-updates-in-flutter","date":"2020-05-18T07:31:01.000Z","excerpt":"Background  When I started building out the new mobile app for Wyztalk there","tags":["localization","flutter","flutterappdevelopment","flutterui"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*BGGjw3RFKH5yLy75441v2g.jpeg"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*BGGjw3RFKH5yLy75441v2g.jpeg\" alt=\"Wyzetalk Flutter\"></p>\n<p><strong>Background</strong></p>\n<p>When I started building out the new mobile app for <a href=\"https://www.wyzetalk.com\">Wyztalk</a> there where a few things on my personal ToDo list that obviously had great benefit to the business, one was a CI pipeline (<a href=\"https://dev.to/remejuan/deploying-a-flutter-app-on-azure-pipeline-43bo\">Article</a>) which I recently completed, this one however was something I got right quite early on.</p>\n<p>With our current Ionic v1 app we needed to roll out a complete app deploy for CSS or Localization updates. While my implementations for both the UI and locale supported simply being hosted, even being small files, not something you want to be sending down the wire unnecessarily.</p>\n<p>For the <a href=\"https://flutter.dev\">Flutter</a> app I spent quite a bit of time working on a simple way implement this, for the localization we are using <a href=\"https://pub.dev/packages/easy_localization\">easy_localization</a> as it was one of the simpler implementations that both supported json as well as online locale, something very useful for initial development.</p>\n<p>For the UI (CSS) I also opted for a json solution as it allowed me more control over specific elements and edge cases which come up more often in a white label product and ended up being beneficial for this problem as well.</p>\n<p><strong>Solution</strong></p>\n<p>Both solutions are quite similar, but the premise behind it is that at build time we ship the current version of the Styling and Locale files, each of these files also includes a last updated date.</p>\n<p>When the user first launches the app we copy these assets from the asset bundle over to the document storage.</p>\n<p>In the main.dart file we have the following methods being called</p>\n<pre><code class=\"language-dart\">// Copy bundle assets into Documents directory_  \nawait LocaleHelpers._copyLocaleFiles_();\nawait ThemeHelpers._copyTheme_();\n</code></pre>\n<p>then a bit further down we have these 2 to trigger the updates</p>\n<pre><code class=\"language-dart\">// Background update of Locale_  \nunawaited(LocaleHelpers._updateLocale_());\n\n// Check for theme updates_  \nunawaited(ThemeHelpers._updateTheme_());\n</code></pre>\n<p>The key difference between the locale and style copy methods is with the supported locale which can be defined with a build-time config.</p>\n<pre><code class=\"language-dart\">static Future&#x3C;void> _copyLocaleFiles_() async {\n  String path = await FileHelpers._verifyOrCreateDirectory(_directory);\n\n  for (final locale in globals.supportedLocale) {\n    String localeKey = locale.toString();\n    String localePath = '$path$localeKey.json';\n\n// Check if the file already exists, if not copy it over\nif (!FileHelpers._verifyFileExists(localePath)) {\n      String assetPath = \"assets/locale/$localeKey.json\";\n      String data = await rootBundle.loadString(assetPath);\n\n      await FileHelpers._writeStringToFile(localePath, data);\n    }\n  }\n}\n</code></pre>\n<p>For updating the theme we first do a small check with the API by sending the last updated date from our current file to check if an update is available.</p>\n<pre><code class=\"language-dart\">static Future&#x3C;void> _updateTheme() async {\n  String path = await FileHelpers._verifyOrCreateDirectory(_folderName);\n\n  var url = ApiEndpoint.uri('/theme').toString();\n\n  try {\n    bool shouldUpdate = await _checkIfUpdated();\n    if (shouldUpdate) {  \nvar response = await Session.apiGet(url);\n\n      String localePath = '$path/$_fileName';\n      await FileHelpers._writeStringToFile_(\n        localePath, \n        json.encode(response)\n      );\n    }\n  } catch (error) {\n    debugPrint('updateTheme - Unable to update theme');\n  }\n}\n</code></pre>\n<p>The locale function follows the same idea but includes the loop as shown in the copyLocale to check each locale individually for an update.</p>\n<p>While not a massive saving in the grand scheme of things, this does remove the need to host such sparsely updated resources or update a 10mb app for ~7kb of styles or locale.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/deploying-a-flutter-app-on-azure-pipeline/\">Deploying a Flutter App on Azure Pipeline</a></li>\n<li><a href=\"https://remelehane.dev/posts/flutter-using-self-signed-ssl-certificates-in-development/\">Flutter: Using Self Signed SSL Certificates in Development</a></li>\n</ul>"},{"url":"/posts/learning-by-solving-a-problem/","relativePath":"posts/learning-by-solving-a-problem.md","relativeDir":"posts","base":"learning-by-solving-a-problem.md","name":"learning-by-solving-a-problem","frontmatter":{"title":"Learning, by solving a “problem”","stackbit_url_path":"posts/learning-by-solving-a-problem","date":"2021-08-29T09:00:00.000Z","published":false,"excerpt":"We going to take a quick look at how we as developers can better learn new things","tags":["development","developers","learning","learning-projects"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/arnold-francisca-f77Bh3inUpE-unsplash.jpg","cover_image":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/arnold-francisca-f77Bh3inUpE-unsplash.jpg","canonical_url":"https://remelehane.dev/posts/learning-by-solving-a-problem"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/arnold-francisca-f77Bh3inUpE-unsplash.jpg\" alt=\"arnold-francisca-f77Bh3inUpE-unsplash\"></p>\n<h2>Learning, by solving a “problem”</h2>\n<p>As developers, a lot of our time is spent learning, most of the time it’s smaller things like new features in a language or framework we already work with and are quite familiar, sometimes it’s even the soft, real worlds skill that we need to learn, this post is not about that though.</p>\n<p>When it comes to learning the bigger things, like a new language or framework there are many routes that one can take, YouTube is always a good option, online courses, blogs and documentation, etc. However, one of the best ways, at least for myself and I am sure many others, is tackling a project, something with a known goal that is likely to pose challenges we may not easily be able to preempt.</p>\n<p>Recently in a Reddit discussion, I was asked, “How do you find a ‘Learning Project’?”</p>\n<p>I thought the answer, at least my answer, may be useful to more developers or aspiring developers as I am sure that’s a question the more junior developers may be faced with regularly, those “Learning Projects” are great for a portfolio and your GitHub when looking for your first or next job.</p>\n<h3>The challenge…</h3>\n<p>I suspect a lot of people may have an issue with finding a project to start as they are not sure what to do or may not have found their passion just yet.</p>\n<p>There seems to be this premise of solving a problem, which at the face of it would pose a challenge for even us seasoned developers.</p>\n<p>When you think about having to solve a problem, the logical assumption is that you first need to find a problem, which honestly, when you can, you’ll probably end up making loads of money if you solve it and enough people have that problem. However, that in itself poses a challenge and can seem daunting to many.</p>\n<h3>An alternative approach…</h3>\n<p>Solving a problem is great, but when it comes to learning, why does the problem need not already have a solution, the goal here is learning after all.</p>\n<p>You’ll see often in the web related threads users display their WhatsApp or Spotify clones that they made and it was not until having to answer that persons question that I truly understood why they existed.\nThey solved a “problem”, sure it was not a problem that on the surface needed solving, but the actual problem they solved was what they could build in order to learn something new while enjoying learning it and facing some challenges along the way.</p>\n<h3>My suggestion…</h3>\n<p>Like those others, find some that interests you, maybe something you use every day and take some time to think about how you would approach it, don’t just dive into the code. Treat it as a real project.\nPlan ahead, maybe give it a name, type up a goal statement, make your own logo on Canva even, use tools like Trello or Linear to set up a project board and create tasks and set deadlines, sure you may miss them but it’s about setting those goals.</p>\n<p>Following an approach like this, at least in my experience increases your odds of finishing it, which is important both for the learning and showing it off in your portfolio someday.</p>\n<p>It also mixes in some of those soft skills we developers can sometimes be terrible at, like time estimation.\nIt gives you a bit of insight into the management and planning sides of a project which may be useful skills further down the line.</p>\n<p>This is exactly the approach I took for my most recent dive into learning GoLang. I spent about a week thinking about what I would do and how I would approach it. I created the logo, bought the domain, set up the tasks, built a CI pipeline and even deviated from them to deal with some technical debt.</p>\n<p>Was barely a week in and I managed to learn something new that I was not expecting, naturally when learning the language you expect to learn a lot about that, but when the app was ready enough to be deployed I got to learn something new about docker… Yippee…</p>\n<p>It would be fantastic if we could all solve unsolved problems in our spare time, but, until then, let’s find great ways to learn and build great stuff.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"\">Flutter Web: Should I Use It</a></li>\n<li><a href=\"\">Why Choose Flutter?</a></li>\n</ul>"},{"url":"/posts/progressive-web-app-with-webpack/","relativePath":"posts/progressive-web-app-with-webpack.md","relativeDir":"posts","base":"progressive-web-app-with-webpack.md","name":"progressive-web-app-with-webpack","frontmatter":{"title":"Progressive Web App with Webpack","stackbit_url_path":"posts/progressive-web-app-with-webpack","date":"2017-11-21T16:41:40.400Z","excerpt":"Progressive Web App with Webpack","tags":["javascript","pwa","progressivewebapp","webpack"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/3iyxw5l0u9h1hqki52rz.png"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/3iyxw5l0u9h1hqki52rz.png\" alt=\"Progressive Web App with Webpack\"></p>\n<p>Depending on your web application, a progressive web app may not be essential, but it may be useful to some of your users. Going PWA allows your users to save a subset of your website directly on their mobile device to be able to use it off-line.</p>\n<p>All you need to make this work is that you site is HTTPS, a manifest.json file and to register a service working within your current application. With a little bit of time these can quite easily be created manually, however I am going to focus purely on using webpack as a means of integrating it with your existing build process. Similar approaches can be used with gulp/grunt.</p>\n<p>Once setup your site will register as a PWA and on supporting mobile devices/browsers, users will even be prompted to save your app to their home screen, effectively installing it.</p>\n<p>What we going to configure is 2 small webpack plugins that will generate the service worker and manifest required for a PWA to be registers.</p>\n<p>The service worker will configure how your PWA is to function, what assets and URL’s are to be cached and so on.</p>\n<p>The manifest file provides additional instructions and theming to the application, this is the essential piece if you wish users to be prompted to save your application on their devices.</p>\n<h2>Setup</h2>\n<p>To get started simply install\n<code>sw-precache-webpack-plugin</code>\nand\n<code>webpack-pwa-manifest</code>\n.</p>\n<pre><code class=\"language-javascript\">    npm i sw-precache-webpack-plugin webpack-pwa-manifest -D\n    yarn add sw-precache-webpack-plugin webpack-pwa-manifest --dev\n</code></pre>\n<p>In your webpack prod/dist config you then simply require these new modules:</p>\n<pre><code class=\"language-javascript\">    const SWPrecacheWebpackPlugin = require('sw-precache-webpack-plugin');\n    const WebpackPwaManifest = require('webpack-pwa-manifest');\n</code></pre>\n<p>Optionally you can also define a PUBLIC_PATH variable, this is used as part of the ServiceWorker config caching your domain name for later use.</p>\n<pre><code class=\"language-javascript\">    const PUBLIC_PATH = 'https://www.my-domain.com/';\n</code></pre>\n<h2>Service Worker config</h2>\n<p>Add a config similar to below at the end of your current webpack plugins array:</p>\n<pre><code class=\"language-javascript\">    new SWPrecacheWebpackPlugin(\n      {\n        cacheId: 'my-domain-cache-id',\n        dontCacheBustUrlsMatching: /\\.\\w{8}\\./,\n        filename: 'service-worker.js',\n        minify: true,\n        navigateFallback: PUBLIC_PATH + 'index.html',\n        staticFileGlobsIgnorePatterns: [/\\.map$/, /manifest\\.json$/]\n      }\n    ),\n</code></pre>\n<p>As you can see it is pretty strait forward, only thing that really benefits from updating would the cacheId. Additional plugin options for more advanced usage or extra info can be found at SW Precache Webpack Plugin Github.</p>\n<h2>Manifest config</h2>\n<p>Just like the service working, you include another plugin config at the bottom of your webpack plugins array, this will provide you all of your aesthetic options for the offline application.</p>\n<pre><code class=\"language-javascript\">    new WebpackPwaManifest({\n      name: 'My Applications Friendly Name',\n      short_name: 'Application',\n      description: 'Description!',\n      background_color: '# 01579b',\n      theme_color: '# 01579b',\n      'theme-color': '# 01579b',\n      start_url: '/',\n      icons: [\n        {\n          src: path.resolve('src/images/icon.png'),\n          sizes: [96, 128, 192, 256, 384, 512],\n          destination: path.join('assets', 'icons')\n        }\n      ]\n    });\n</code></pre>\n<p>Things to note…</p>\n<p>short_name: This is the name underneath the icon, keep this under 12 characters long.</p>\n<p>background<em>color, theme-color and theme</em>color are all part of theming options for your manifest. The 2 theme versions are for different browser support, those will be styling the address bar.</p>\n<p>icons: here you can provide multiple objects in the array, useful if you wish to provide a different icons for iOS and Android. More details on that Webpack PWA Github.\nI simply added in a singe set WPWA will generate icons at all the sizes provided in the sizes array and place then defined destination path.</p>\n<h2>Output</h2>\n<p>One last thing to do before we finish up, you need to add a publicPath key to your existing output object and set it to the\n<code>PUBLIC_PATH</code>\nconst defined earlier.</p>\n<pre><code class=\"language-javascript\">    output: {\n      // Snip\n      publicPath: PUBLIC_PATH\n    },\n</code></pre>\n<h2>Registering your worker</h2>\n<p>Now that your webpack is all setup, once final piece of code needs to be added to your project.</p>\n<p>Within you applications main js file, you need to add in this Immediately Invoked Function.</p>\n<pre><code class=\"language-javascript\">    (function () {\n      if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.register('./service-worker.js', {scope: '/'})\n        .then(() => console.log('Service Worker registered successfully.'))\n        .catch(error => console.log('Service Worker registration failed:', error));\n      }\n    })();\n</code></pre>\n<p>This will check if the browser your visitor is using supports service workers, and if so registers your service-worker.js.</p>\n<p>Your website, at least to some extent, will now be available offline and can be saved as a PWA on the users device, after their next visit.</p>\n<p>If you run your build process now you should see a few icons as well as a service-worker.js and amanifest.[hash].json in your public/dist folder.</p>\n<p>Google created a Chrome plugin that you can use to test your implementation, <a href=\"https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk?hl=en\">Lighthouse</a>.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*SwvS9fcfHIaCrrELv1AFgg.png\" alt=\"1*SwvS9fcfHIaCrrELv1AFgg.png\"></p>\n<p>Also in chrome developers tools > Audit you should be able to see both your service worker and manifest registered within their respective Application menu items.</p>\n<p>Here is what the PWA’ of my own portfolio site’s initial screen looks like. As you can see the Blue theming. My Icon in the middle as applications name at the bottom.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*LBGKJsZ_JllM9eihTWf5sw.jpeg\" alt=\"1*LBGKJsZ_JllM9eihTWf5sw.jpeg\"></p>\n<p><a href=\"https://github.com/RemeJuan/progressive-web-app-starter\">RemeJuan/progressive-web-app-starter</a></p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>"},{"url":"/posts/my-essential-tools-as-a-flutter-developer/","relativePath":"posts/my-essential-tools-as-a-flutter-developer.md","relativeDir":"posts","base":"my-essential-tools-as-a-flutter-developer.md","name":"my-essential-tools-as-a-flutter-developer","frontmatter":{"title":"My essential tools as a Flutter Developer","stackbit_url_path":"posts/my-essential-tools-as-a-flutter-developer","date":"2021-07-25T09:00:00.000Z","excerpt":"Here are some of the tools that I find essential in my day to day as a Flutter developer","tags":["flutter","flutterdevelopment","fluttertools","flutterappdevelopment"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/1*84xICiaeVfpxyZ4lgDSlLQ.png"},"html":"<h2>My essential tools as a Flutter Developer</h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/1*84xICiaeVfpxyZ4lgDSlLQ.png\" alt=\"Representative technology image\"></p>\n<h2>My essential tools as a Flutter Developer</h2>\n<p>As developers, our daily tools are essential to our productivity and maybe even sanity. For all the complex things we do on a daily basis, we need our tools to either be as simple as possible, or as powerful as possible. Ideally both :D…</p>\n<p>As a Flutter developer, my tool-stack is not a complicated one, there are a few tools that I use all day, every day to make my job, my passion, simpler and more productive.</p>\n<h2>1. IntelliJ IDEA</h2>\n<p>While man, if not most developers I work with make use of VSCode, that is a tool I left behind nearly 4 years ago, it’s actually not even installed on my current machine any longer, and while I am sure most, if not everything IDEA does for me can be done in VSCode, I am past the point of building up my own tooling.</p>\n<p>For me IDEA, especially when working with Flutter, just has that secret sauce, I prefer the user interface, accessibility of certain tools, and functionality. I find it a lot more performant with large projects and the global search functionally is just great, and while VSCode does have that, this just seems to work better and more expansively, being able to do a wildcard search for files, classes and functions all in one place just simplifies finding things when you are not 100% sure what you called it.</p>\n<p>I can also be very verbose when committing, I like to group contexts of changes and when working on a feature or a bug, there are times when you change quite a few things, but not all of them would be related to the same commit message, I will never commit “fixed stuff”, and I have seen that already…</p>\n<p>While VSCode can do this, it is vastly more complex to achieve, and that changes level commits, with IDEA I can go through a file and unselect groups or lines of changes that I feel are not relevant to the commit I am trying to make, things that will be best served with a better commit description.</p>\n<p>I personally use the paid version of IDEA, unlike the free community version it also supports web-related languages like JavaScript, HTML, and CSS, which is handy for the few projects I used to work on before I went all-in on Flutter.</p>\n<h3>Installed Plugins</h3>\n<p>Here are some of the plugins I added to IDDEA to make my life easier.</p>\n<ul>\n<li><a href=\"https://plugins.jetbrains.com/plugin/12129-bloc\">BLoC</a></li>\n<li><a href=\"https://plugins.jetbrains.com/plugin/12693-flutter-enhancement-suite\">Flutter Enhancement Suite</a></li>\n<li><a href=\"https://plugins.jetbrains.com/plugin/12348-flutter-snippets\">Flutter Snippets</a></li>\n<li><a href=\"https://plugins.jetbrains.com/plugin/7499-gittoolbox\">GitToolBox</a></li>\n<li><a href=\"https://plugins.jetbrains.com/plugin/10080-rainbow-brackets\">Rainbow Brackets</a></li>\n<li><a href=\"https://plugins.jetbrains.com/plugin/7642-save-actions\">Save Actions</a></li>\n</ul>\n<p><a href=\"https://www.jetbrains.com/idea/download/\"><strong>LINK</strong></a></p>\n<h2>2. Alfred</h2>\n<p>Alfred is something that will only benefit Mac users, it's a spotlight replacement and then some, it supports pretty much everything spotlight does but is extendable with custom workflows and configurations.</p>\n<p>Alfred is extremely powerful in what you can do with it, from basic things like launching apps on your machine to doing inline web searches and even calculations and conversions.</p>\n<p>What I probably use most from Alfred are some of the custom web searches I have added like <code>ppac</code> which is short for pub package and I can type the name of any dart/flutter plugin after that to just directly the page, or <code>pdev</code> which is a search for pub.dev.</p>\n<p>After that, it would be the “<a href=\"https://github.com/biati-digital/alfred-calculate-anything\">calculate anything</a>” workflow which uses a natural language process to calculate pretty much anything from simple math to currency and unit conversions.</p>\n<p>Simply typing in “50usd in euro” will do the currency conversion for you, you can also set a base currency, which would be the default, so if your base is “euro” then all you would need to type is “50usd”.</p>\n<p><a href=\"https://github.com/edgarjs/alfred-github-repos\">Github Repos</a> is another one I use often, it searches either Github or your own repos depending on your prefix command to quickly launch the selected result.</p>\n<p>Other useful things would be <a href=\"https://github.com/nathangreenstein/alfred-process-killer\">Kill Process</a>, for killing a running process by searching for it.</p>\n<p>These are just some of the workflows I use and a small fraction of what is out there, and if there is not something that does what you need, you can always just write it yourself as workflows can be created in most languages.</p>\n<p><a href=\"https://www.alfredapp.com\">LINK</a></p>\n<h2>3. ZSH + oh-my-zsh</h2>\n<p>Pretty sure by now everyone knows about zsh, but it can definitely no the left off any list of tools for developer efficiency and productivity, as an enhancement on bash, combined with the extendability of oh-my-zsh, there are soo many ways this could improve productivity if for no other reason that the built-in aliases you can enable with plugins, while it’s simple enough to write your own aliases, it’s just easier to get them all set up and with soo many plugins, it’s easy to simply pick and choose the ones that will enhance your workflow. (<a href=\"https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins\">Plugins</a>)</p>\n<p>On top of that, the <a href=\"https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\">theming</a> just adds that touch of personalization to your working environment, spicing it up with color and usually adding the active branch when in a version-controlled folder.</p>\n<p>I have been using it for a good 4 maybe 5 years and do not see myself going back, it’s simple yet powerful.</p>\n<p>As they say</p>\n<blockquote>\n<p> Oh My Zsh will not make you a 10x developer…but you may feel like one.</p>\n</blockquote>\n<p><a href=\"https://ohmyz.sh\">LINK</a> and my <a href=\"https://gist.github.com/RemeJuan/ba8dc0fbcea4d3709b1ef7640d58c572\">zshrc</a> file if you are interested. It will give you a bit of extra insight into some of the available features.</p>\n<h2><strong>4. Spark</strong></h2>\n<p><a href=\"https://sparkmailapp.com\">Spark</a> is probably one of the best and simplest mail apps I have used in my life, while I do often prefer the web UI for managing emails, there is something to be said about the convenience of a single app to deal with multiple mail accounts, I am pretty sure most, if not all of us have at least 2 email accounts, personal and work/professional.</p>\n<p>As a mail app it’s nothing spectacular, but I think that is what makes it great, they added a few useful features, but tried to keep it as simple and user-friendly as possible, they did not try and reinvent the wheel on this one.</p>\n<p>It loads all your mail accounts and calendars into consolidated views, for organizations they offer intelligent, and in my experience, accurate suggestions as to where you would want to archive this mail.</p>\n<p>Spark also uses an SSO when you initially sign up to create a spark account for you, this comes in handy when you have multiple devices as then you only need to set things up on one of them and your accounts sync to your other devices.</p>\n<p>They also support intelligent notifications, which allocate importance to incoming emails to determine whether or not you need to be alerted or simply increment the number on the app badge, much like GMails priority mail. The only thing I found a bit strange, which may be by design, is the importance categorization differs by device, so you may get notified on your iPad and not on your phone for the same mail.</p>\n<p>You can also disable notifications on an account level per device, which can be handy, for me, work emails only notify on my Mac, never my phone or iPad.</p>\n<p>My essential tool stack is actually quite small, obviously, there are many other tools sitting on my Mac right now, but these would be the 4that have the biggest impact on my day-to-day.</p>\n<p>I hope you found this post informative, or entertaining. If you have any questions or comments, please feel free.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you liked it, a heart would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/flutter-web-should-i-use-it-part-1/\">Flutter Web: Should I Use It</a></li>\n<li><a href=\"https://remelehane.dev/posts/why-choose-flutter/\">Why Choose Flutter?</a></li>\n</ul>"},{"url":"/posts/react-to-flutter-one-developers-journey-part-1/","relativePath":"posts/react-to-flutter-one-developers-journey-part-1.md","relativeDir":"posts","base":"react-to-flutter-one-developers-journey-part-1.md","name":"react-to-flutter-one-developers-journey-part-1","frontmatter":{"title":"React to Flutter: One Developers Journey — Part 1","stackbit_url_path":"posts/react-to-flutter-one-developers-journey-part-1","date":"2021-04-26T07:32:34.000Z","excerpt":"Almost 2 years ago while working at Wyzetalk, we decided to build a [Flutter](https://flutter.dev) application, this was the beginning of my journey to a whole new world.","tags":["react","developer","flutterappdevelopmen","development"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*zYJA3LEI08WOn6E8aJ44uw.jpeg"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*zYJA3LEI08WOn6E8aJ44uw.jpeg\" alt=\"React to Flutter: One Developers Journey Banner\"></p>\n<p>Almost 2 years ago while working at Wyzetalk, we decided to build a <a href=\"https://flutter.dev\">Flutter</a> application, this was the beginning of my journey to a whole new world.</p>\n<p><a href=\"https://remelehane.dev/posts/why-we-chose-flutter/\">Why we chose Flutter</a></p>\n<p>I have been developing for just under 10 years, and most of that time was spent in the JavaScript world, I been through many years of frameworks starting jQuery, Backbone, AngularJS and eventually ReactJS/Native, with some dabbling around VueJS, Aurelia and some others.</p>\n<p>For the better part of the last 5 or 6 years, I was focused on the ReactJS space, working on applications in finance, insurance and communication.</p>\n<p>My first impression of Flutter was of some confusion really, looking at the code it felt both familiar and strange at the same time, having worked with modern JavaScript and TypeScript I was familiar with classes and typings, but everything was almost flipped around in a way.</p>\n<p>The very first course I took as an intro Flutter was at <a href=\"https://fluttercrashcourse.com\">https://fluttercrashcourse.com</a>, which proved to be a very good intro into all the basics, I think it took about 3 or so hours over a couple of days in and amongst other work.</p>\n<p>Many mistakes were made in the early days, probably one of the bigger and harder ones to fix was not going with a globally capable state management solution, at the time I believed I could meet the business requirements by simply using the StatefulWidget, which to be honest took us pretty far, but it became clear a few months down the line, that while that was not a bad idea at the time it would prove to be a terrible one in the near future.</p>\n<p>After about 6 months of learning with Flutter, we took a step back and took stock of what we had and what mistakes we made. The first mistake was we had no testing in place, and to be honest the codebase was the furthest thing from testable.</p>\n<p>In comes our next big learning resource, <a href=\"https://www.youtube.com/channel/UCSIvrn68cUk8CS8MbtBmBkA\">Reso Coder</a>, a very skilled Flutter developer with some excellent videos and video series on working with Flutter, one important one for us was <a href=\"https://www.youtube.com/playlist?list=PLB6lc7nQ1n4iYGE_khpXRdJkJEp9WOech\">Flutter TDD Clean Architecture</a>, something we found a fantastic resource on structuring Flutter apps as well as writing more testable code.</p>\n<p>From then we spent many months refactoring the app, going through all our code section by section implementing the domain-driven approach, adding in packages like <a href=\"https://pub.dev/packages/freezed\">freezed</a> to help with null-safety, adding in <a href=\"https://pub.dev/packages/pedantic\">pedantic</a> for stricter code style and structure controls, and naturally tests, lots and lots of tests.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*DmIfnWoj4hgTTgH_Uo8u6w.png\"></p>\n<p>To date we have managed to get 83% of our code tested by following this approach, this has most certainly not been easy and some of our tests have ended up being either very creative or very out there.</p>\n<p><a href=\"https://remelehane.dev/posts/unit-testing-a-utility-function-that-returns-a-widget/\">Unit Testing a Utility function that returns a Widget</a></p>\n<p>At quite a few steps in the process, we have had to re-evaluate some of our package choices as unfortunately, while much of Flutters documentation is fantastic, when it comes to testing is pretty dismal and many packages don’t include any form of documentation or examples as to how to integrate them within the testing space.</p>\n<p>This naturally made the refactor a bit more complex, <a href=\"https://pub.dev/packages/dio\">Dio</a> was one such package that we had to remove, which was a slow process as no matter how much or how far past page 3 in google I went I could not find any form of information relating to how to mock <a href=\"https://pub.dev/packages/dio\">Dio</a> in the testing space, which is quite sad given how powerful a network package it actually is.</p>\n<p>Over this time I have written quite a few blogs around Flutter and testing, in the hopes of helping others out there who are joining Flutter or working on bigger projects and really want to get proper, quality tests in place.</p>\n<p>While our coverage report looks nice, coverage is not everything, the coverage report is there as a sanity check, something for us as developers to use to verify whether or not the tests we have written are actually hitting all the business logic we have implemented, coverage without quality is worthless, no point having a test that does nothing but hit a line without actually properly verifying that line is working properly.</p>\n<p>Through this journey I become somewhat active in the local Flutter communities, eventually finding myself actually presenting at a recent GDC virtual meeting, <a href=\"https://gdg.community.dev/events/details/google-gdg-cape-town-presents-are-you-fluttered-yet/%5C\">Are You Flutter’ed Yet?</a>, which I actually found I enjoyed. While I may present again in the future, I will definitely be attending more of those, while the community is still small, it is a pretty great one and it was great to hear the experiences of others through their Flutter journeys.</p>\n<iframe class=\"liquidTag\" src=\"https://dev.to/embed/youtube?args=oJSMT97rURs\" style=\"border: 0; width: 100%;\"></iframe>\n<p>That idea is what actually inspired this post.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<p>In the next one, we take a step back to the early days to take a look at one specific way Flutter really impressed up.</p>\n<p>Stay tuned :D</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/validating-commit-messages-with-dart-and-lefthook/\">Validating commit messages with dart and Lefthook</a></li>\n<li><a href=\"https://remelehane.dev/posts/improving-user-experience-through-simple-ota-updates-in-flutter/\">Improving User Experience through simple OTA updates in Flutter</a></li>\n</ul>"},{"url":"/posts/react-to-flutter-one-developers-journey-part-2/","relativePath":"posts/react-to-flutter-one-developers-journey-part-2.md","relativeDir":"posts","base":"react-to-flutter-one-developers-journey-part-2.md","name":"react-to-flutter-one-developers-journey-part-2","frontmatter":{"title":"React to Flutter: One Developers Journey — Part 2","stackbit_url_path":"posts/react-to-flutter-one-developers-journey-part-2","date":"2021-05-03T07:33:09.000Z","excerpt":"Almost 2 years ago while working at Wyzetalk, we decided to build a [Flutter](https://flutter.dev) application, this was the beginning of my journey to a whole new world.","tags":["flutterwidget","flutteranimation","flutter","flutterappdevelopmen"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*68CvCy_f3PM9C7fQB1cWLg.jpeg"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*68CvCy_f3PM9C7fQB1cWLg.jpeg\" alt=\"React to Flutter: One Developers Journey Banner\"></p>\n<p>If you haven’t yet, check out part 1:</p>\n<p><a href=\"https://remelehane.dev/posts/react-to-flutter-one-developers-journey-part-1/\">React to Flutter: One Developers Journey — Part 1</a></p>\n<p>When we started the project, the most obvious thing to us was that we did not know, what we did not know, Flutter was extremely new to use, so our “spec” to the UX team, was to design the new version of our app as if we had no limitations because we literally had no idea what they were.</p>\n<p>Naturally, they took this to heart and had a load of fun being creative with our application, trying to create an amazing user experience, something we greatly lacked in our Ionic v1 application.</p>\n<h3>Animation WOW!!</h3>\n<p>It was not long before I really began to enjoy both the ease of use and expanse of what was possible with Flutter, they really had thought of everything and the accompanying documentation was also pretty good for the most part.</p>\n<p>One of the best things I experienced, indirectly, was when bringing another developer into my team, he has been with the company for a few months by that point, it was his first development job right out of varsity, but he was a very exceptional developer with a hunger for learning.</p>\n<p>We had gotten what can be considered a not so basic animation sequence from the UX team to complete, and this was our first dive into animation, beyond the basic loading spinner.</p>\n<p>The requirement was that when a user resets their password, we would start the flow by first fading in a “loading spinner”, which upon a successful API response, switched from a spinner to a checkmark and then expanded into a long “pill” with a success message.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*yY1Nxv4MeKpHfcvwFPW-jg.gif\"></p>\n<p>If I were to do that in JS/CSS, it would probably have taken between half and a full day, but that’s the sort of thing I have done a lot in my career, it’s something I would be able to put together without the help of google.</p>\n<p>I thought this would be a fun task to assign to him, we were early on so no deadline so it would not have mattered if he took a day or a month to finish it, I think he had spent some of his own time diving into flutter and I pulled him over when I had figured something out, but officially this would have been one of his first tasks.</p>\n<p>We were honestly both extremely impressed when around halfway through the next day he was complete with the animation, Flutter had so many useful tools and widgets right out of the box, that even someone with the most basic Flutter experience could achieve a multi-stage animation with such relative ease.</p>\n<p>I think to both us the developers and the UX team, this gave us the impression that there truly were no limitations, not that this was something impossible, or even difficult to do, the ease of which an inexperienced developer with even less Flutter experience was able to implement this was impressive.</p>\n<p>It is probably almost 2 years later and that was most definitely not the most complex idea we got from the UX team and to date, we are yet to run into anything we have been unable to implement.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/bringing-localization-into-your-widget-testing/\">Bringing localization into your Widget testing</a></li>\n<li><a href=\"https://remelehane.dev/posts/unit-testing-your-http-multipartrequest-network-method/\">Unit Testing your http.MultipartRequest network method</a></li>\n</ul>"},{"url":"/posts/riverpod-vs-bloc/","relativePath":"posts/riverpod-vs-bloc.md","relativeDir":"posts","base":"riverpod-vs-bloc.md","name":"riverpod-vs-bloc","frontmatter":{"title":"Flutter State Management: Exploring RiverPod and BLoC","stackbit_url_path":"posts/riverpod-vs-bloc","date":"2023-08-21T09:00:00.000Z","excerpt":"","tags":["flutter","fluttermobile","bloc","riverpod","flutterstatemanagement"],"template":"post","thumb_img_path":"https://images.unsplash.com/photo-1556611832-c5f358b0057e?q=80&w=3540&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D","cover_image":"https://images.unsplash.com/photo-1556611832-c5f358b0057e?q=80&w=3540&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D","published_at":"2023-08-21T09:00:00.000Z","canonical_url":"https://remelehane.dev/posts/riverpod-vs-bloc/"},"html":"<p><img src=\"https://images.unsplash.com/photo-1556611832-c5f358b0057e?q=80&#x26;w=3540&#x26;auto=format&#x26;fit=crop&#x26;ixlib=rb-4.0.3&#x26;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"></p>\n<p>As Flutter continues to gain popularity among developers, the need for effective state management solutions becomes paramount. State management is a critical aspect of application development as it ensures the consistency and integrity of data across different parts of an application. Two popular state management solutions in the Flutter ecosystem are RiverPod and BLoC (Business Logic Component). In this article, we will explore both solutions, comparing their features, advantages, and use cases to help you make an informed decision for your Flutter projects.</p>\n<h2>Understanding State Management in Flutter</h2>\n<p>Before diving into the specifics of RiverPod and BLoC, let's briefly understand the importance of state management in Flutter. In Flutter, state refers to any data that can change over time and affects the behavior and appearance of the application. Managing state effectively is crucial to avoid bugs, inconsistencies, and unpredictable behavior in your app.</p>\n<p>Flutter provides various approaches to state management, each with its own trade-offs and benefits. RiverPod and BLoC are two popular solutions that offer different approaches to managing state in Flutter applications. Let's explore each of them in detail.</p>\n<h2>BLoC: The Business Logic Component</h2>\n<p>BLoC is an architectural pattern that separates the presentation layer from the business logic in a Flutter application. It promotes a clear and predictable flow of data by enforcing unidirectional data flow. The key components of the BLoC pattern are events, states, and the BLoC itself.</p>\n<p><strong>Events</strong>: Events represent occurrences or user actions that can lead to a change in the state. They are dispatched to the BLoC, triggering a response in the form of state changes. Events are typically plain Dart objects that encapsulate the necessary information to describe the action.</p>\n<p><strong>States</strong>: States represent the current condition of the application. Each event leads to a new state, and the UI is built based on the current state. States are also plain Dart objects that hold the data relevant to a specific state.</p>\n<p><strong>BLoC</strong>: The BLoC acts as an intermediary between the user interface and the business logic. It receives incoming events, processes them, and emits new states. The transformation from an event to a new state occurs within the BLoC's mapEventToState method. The UI subscribes to the BLoC's state changes and updates accordingly.</p>\n<p>The BLoC pattern enforces a strict unidirectional data flow, ensuring that data flows from the UI to the BLoC, which processes events and emits new states, and finally back to the UI for rendering. This pattern simplifies debugging and maintains a clear path for data changes.</p>\n<h3>Advantages of BLoC</h3>\n<ol>\n<li><strong>Separation of Concerns</strong>: BLoC promotes a clear separation between the UI, events, and business logic. This separation makes the codebase more organized and easier to maintain as the application grows.</li>\n<li><strong>Predictable State Management</strong>: With the strict data flow defined by the BLoC pattern, it becomes easier to predict how the state evolves in response to events. This predictability aids in debugging and understanding the application's behavior.</li>\n<li><strong>Testability</strong>: BLoC enables easy testing of the application's business logic by decoupling it from the UI. Unit tests can be written to verify how events lead to specific state changes, ensuring the correctness of the application.</li>\n<li><strong>Reusability</strong>: BLoC components can be easily reused across different parts of the application, thanks to the clear separation of concerns. This reusability allows for consistent behavior and logic throughout the app.</li>\n</ol>\n<h3>Challenges of BLoC</h3>\n<ol>\n<li><strong>Learning Curve</strong>: The BLoC pattern can be complex for beginners, as it introduces new concepts and requires a shift in thinking about state management. However, with proper documentation and resources, the learning curve can be overcome.</li>\n<li><strong>Boilerplate Code</strong>: Implementing the full BLoC pattern can lead to a significant amount of boilerplate code, which might be overkill for simpler applications. However, code generation tools like the Bloc VSCode extension can alleviate this issue.</li>\n<li><strong>Complexity for Simple Apps</strong>: The strict architecture of BLoC might be unnecessary for simple mobile applications with minimal state management needs. In such cases, a simpler state management solution might be more appropriate.</li>\n</ol>\n<h2>RiverPod: A Flexible State Management Solution</h2>\n<p>RiverPod is a state management library built on top of the Provider package for Flutter. It offers an intuitive and flexible approach to managing application state. RiverPod was created as an evolution of the Provider package, aiming to provide a more powerful and developer-friendly state management solution.</p>\n<h3>Provider and Scoped State Management</h3>\n<p>RiverPod introduces the concept of \"providers,\" which are values that can be read from and listened to by widgets. Providers have a composable structure, allowing for the creation of complex providers from simpler ones. RiverPod supports various types of providers, each serving a specific purpose.</p>\n<p><strong>StateProvider</strong>: The StateProvider is used to manage mutable state within the application. It holds a value that can be updated and read by multiple widgets. When the state changes, widgets depending on that state are automatically rebuilt.</p>\n<p><strong>StateNotifierProvider</strong>: The StateNotifierProvider combines the concept of state and a notifier. It is particularly useful for managing complex state logic. A notifier is a class that extends StateNotifier and is responsible for updating the state.</p>\n<p><strong>Family Providers</strong>: Family providers are ideal when you need to create providers with dynamic parameters. For example, if you require a provider that depends on an ID, you can use a family provider.</p>\n<p><strong>Scoped Providers</strong>: Scoped providers allow you to create separate scopes for managing state. Each scope has its own instance of a provider, ensuring that state doesn't conflict between different parts of your app.</p>\n<p><strong>AutoDispose Providers</strong>: RiverPod provides the capability for automatic disposal of resources associated with providers. This reduces memory leaks and makes resource management more efficient.</p>\n<p><strong>Computed Providers</strong>: Computed providers are derived from other providers. They allow you to create calculated values based on other state. Computed values are efficiently cached and recomputed only when the underlying state changes.</p>\n<p><strong>AsyncValue and FutureProvider</strong>: AsyncValue is a special type that represents a value that might be loading, completed, or have an error. It is commonly used with the FutureProvider to manage asynchronous operations.</p>\n<p>RiverPod's flexibility, support for scoping, provider hierarchy, and automatic resource management make it a powerful choice for managing state in Flutter applications. Its intuitive syntax and modern approach help developers create maintainable and efficient apps.</p>\n<h3>Advantages of RiverPod</h3>\n<ol>\n<li><strong>Flexible and Composable</strong>: RiverPod allows for the creation of complex state structures through the composition of providers. This flexibility makes it easier to manage state in large-scale applications with intricate dependencies.</li>\n<li><strong>Efficient and Reactive</strong>: RiverPod's reactive system ensures that widgets are automatically updated when the state changes. This avoids unnecessary rebuilds and optimizes performance.</li>\n<li><strong>Scoping and Resource Management</strong>: RiverPod supports scoped providers, which enable separate scopes for managing state. The auto-disposal feature ensures efficient resource management and reduces memory leaks.</li>\n<li><strong>Testing and Debugging</strong>: RiverPod provides tools for debugging and testing, such as the ability to watch the state of a provider in real-time. This makes it easier to ensure the correctness of the application's state.</li>\n</ol>\n<h3>RiverPod vs. BLoC: Making the Choice</h3>\n<p>Choosing between RiverPod and BLoC depends on the specific requirements of your project, your familiarity with the patterns, and your preferred level of flexibility. BLoC offers a proven architecture with a strong focus on the separation of concerns, making it suitable for complex business logic. On the other hand, RiverPod provides a more flexible and composable approach to state management, making it ideal for applications with dynamic or interconnected state requirements.</p>\n<p>Keep in mind that both solutions have their trade-offs, and the choice ultimately depends on the needs of your project. It's recommended to start with a thorough evaluation of your project's requirements, consider the scalability and complexity of your application, and weigh the advantages and challenges of each solution.</p>\n<h1>Conclusion</h1>\n<p>As Flutter continues to evolve, the need for effective state management solutions becomes increasingly important. RiverPod and BLoC are two popular state management solutions in the Flutter ecosystem, each with its own unique set of features and benefits.</p>\n<p>BLoC follows the Business Logic Component pattern, enforcing a clear separation between the presentation layer and business logic. It offers predictable state management, testability, and reusability. However, BLoC can have a steeper learning curve and may introduce boilerplate code for simpler applications.</p>\n<p>RiverPod, built on top of the Provider package, provides a flexible and composable approach to state management. It supports scoped providers, efficient resource management, and reactive updates. RiverPod's syntax and modern approach make it beginner-friendly, but it may require a deeper understanding of Flutter's ecosystem.</p>\n<p>When choosing between RiverPod and BLoC, consider the complexity of your application, the scalability requirements, and your team's familiarity with the patterns. Both solutions have their strengths and trade-offs, so it's essential to evaluate your project's needs and make an informed decision.</p>\n<p>State management is a critical aspect of Flutter application development, and choosing the right solution can greatly impact the maintainability, performance, and scalability of your app. By understanding the concepts and advantages of RiverPod and BLoC, you can make an informed decision and build robust and efficient Flutter applications.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/getting-creative-with-shorebird/\">Getting creative with Shorebird</a></li>\n<li><a href=\"https://remelehane.dev/posts/deploy-flutter-app-playsotre-github-actions/\">Deploying Flutter Application with Github Actions (PlayStore)</a></li>\n</ul>"},{"url":"/posts/the-power-of-flutter/","relativePath":"posts/the-power-of-flutter.md","relativeDir":"posts","base":"the-power-of-flutter.md","name":"the-power-of-flutter","frontmatter":{"title":"The Power of Flutter: Creating Cross-Platform Applications","stackbit_url_path":"posts/the-power-of-flutter","date":"2023-01-16T09:00:00.000Z","excerpt":"","tags":["flutter","flutterweb","fluttermobile","flutterdevelopment"],"template":"post","thumb_img_path":"https://img.freepik.com/free-vector/onboarding-app-concept-purchase_23-2148415351.jpg?size=626&ext=jpg&ga=GA1.1.1412446893.1704844800&semt=ais","Cover_image":"https://img.freepik.com/free-vector/onboarding-app-concept-purchase_23-2148415351.jpg?size=626&ext=jpg&ga=GA1.1.1412446893.1704844800&semt=ais","published_at":"2023-01-16T09:00:00.000Z","canonical_url":"https://remelehane.dev/posts/the-power-of-flutter/"},"html":"<p><img src=\"https://img.freepik.com/free-vector/onboarding-app-concept-purchase_23-2148415351.jpg?size=626&#x26;ext=jpg&#x26;ga=GA1.1.1412446893.1704844800&#x26;semt=ais\"></p>\n<p>Image Source: FreeImages</p>\n<p>Flutter is revolutionizing the world of app development with its ability to create stunning cross-platform applications. If you're a developer looking for a simpler, faster, and more cost-effective way to build mobile, web, and desktop apps, then Flutter is the tool for you. In this comprehensive guide, we'll explore what makes Flutter so powerful and why it's the go-to choice for developers worldwide.</p>\n<h2>What is Flutter?</h2>\n<p>Flutter is an open-source UI framework developed by Google that allows developers to build native-quality mobile, web, and desktop applications from a single codebase. With Flutter, you can unleash your creativity and bring your app ideas to life on multiple platforms like Android, iOS, and even desktop operating systems like Windows, Linux, and macOS.</p>\n<p>At the heart of Flutter is its unique architecture. It consists of three key components: the Flutter framework, the engine written in C/C++, and the platform-specific embedders. The framework, built on the Dart programming language, provides developers with a rich set of UI widgets and tools for creating beautiful user interfaces. The engine handles graphics rendering, accessibility support, and other essential APIs. And the embedders enable Flutter apps to run seamlessly on different operating systems.</p>\n<h2>The Advantages of Flutter: Why Choose it Over Other Tools?</h2>\n<p>Flutter offers a plethora of advantages that make it an attractive choice for developers. Let's dive into the key benefits of using Flutter for your app development projects:</p>\n<h3>1. Single Codebase for All Platforms</h3>\n<p>Gone are the days of writing separate codebases for Android and iOS. With Flutter, you can write once and deploy everywhere. Its single codebase approach eliminates the need for platform-specific development, saving you time, effort, and resources. Whether you're targeting mobile devices, the web, or desktop, Flutter's codebase remains consistent, ensuring a seamless user experience across platforms.</p>\n<h3>2. Beautiful and Native-Like User Interfaces</h3>\n<p>Flutter's UI widgets are the building blocks of your app's interface. With a rich library of pre-designed widgets, you can create stunning and intuitive user interfaces that adhere to the platform-specific design guidelines. Whether it's Material Design for Android or Cupertino for iOS, Flutter has you covered. These widgets enable you to customize and style your app's UI with ease, resulting in visually appealing and native-like experiences.</p>\n<h3>3. High Performance and Fast Development</h3>\n<p>Performance is a crucial factor in app development, and Flutter excels in this area. Its use of the Skia graphics engine and the Dart programming language allows Flutter apps to achieve native-like performance, running at 60 or even 120 frames per second. Additionally, Flutter's hot reload feature enables developers to see the effects of code changes in real-time, significantly speeding up the development process and reducing debugging time.</p>\n<h3>4. Extensive Widget Catalog and Community Support</h3>\n<p>Flutter's widget catalog is vast and diverse, offering a wide range of UI components for various app functionalities. From basic layout widgets to advanced animation and interaction widgets, you'll find everything you need to create rich and engaging user experiences. Moreover, Flutter has a vibrant and supportive community of developers, providing resources, tutorials, and assistance whenever you need it.</p>\n<h3>5. Cost-Effective and Time-Efficient Development</h3>\n<p>By using Flutter, you can save both time and money in your app development projects. With a single codebase and faster development cycles, you can streamline your development process and bring your app to market in record time. Flutter's efficiency and cross-platform capabilities allow you to reach a wider audience without the need for additional development teams or extensive code maintenance.</p>\n<h2>Exploring Flutter's Capabilities: From Mobile to Web and Desktop</h2>\n<p>One of the standout features of Flutter is its versatility in creating apps for various platforms. Let's take a closer look at how Flutter excels in different environments:</p>\n<h3>1. Flutter for Mobile App Development</h3>\n<p>Flutter's roots lie in mobile app development, and it's a powerhouse when it comes to creating beautiful and performant mobile applications. Whether you're targeting Android or iOS, Flutter's single codebase approach ensures consistent functionality and UI across platforms. With Flutter's extensive widget catalog and powerful performance capabilities, you can create mobile apps that are indistinguishable from native applications.</p>\n<h3>2. Flutter for Web Development</h3>\n<p>Flutter's capabilities extend beyond mobile devices, allowing you to build high-quality web applications as well. With Flutter for web, you can leverage the same codebase and UI widgets to create responsive and visually appealing web experiences. Flutter's hot reload feature makes web development faster and more efficient, enabling real-time updates and iterative improvements to your web app.</p>\n<h3>3. Flutter for Desktop App Development</h3>\n<p>Flutter's cross-platform nature also makes it a suitable choice for building desktop applications. Whether you're targeting Windows, Linux, or macOS, Flutter provides the tools and capabilities to create native-like desktop experiences. With Flutter's single codebase and powerful performance, you can build feature-rich desktop apps that cater to a wide range of users.</p>\n<h2>The Growing Popularity of Flutter: Industry Adoption and Success Stories</h2>\n<p>Flutter has gained significant traction in the industry, with many prominent companies adopting it for their app development needs. Let's take a look at some success stories and the growing popularity of Flutter:</p>\n<h3>1. Google's Adoption of Flutter</h3>\n<p>As the creator of Flutter, Google has been a strong advocate of the framework. Google uses Flutter for various projects, including modules of the Google Assistant and the user interface of the Google Home hub. This adoption by Google demonstrates the trust and confidence they have in Flutter's capabilities.</p>\n<h3>2. Flutter's Adoption by Leading Companies</h3>\n<p>Flutter has also been embraced by other major companies like Alibaba, Tencent, and eBay. These companies have leveraged Flutter to create stunning and feature-rich apps that cater to their millions of users. The growing number of industry giants choosing Flutter is a testament to its effectiveness and potential for success.</p>\n<h3>3. Flutter's Vibrant Community</h3>\n<p>Flutter has a thriving community of developers who actively contribute to its growth and success. The community provides valuable resources, tutorials, and support for both beginners and experienced developers. The collaborative nature of the Flutter community fosters innovation and ensures that developers have access to the latest tools and techniques.</p>\n<h2>Conclusion: Embrace the Power of Flutter for Your App Development Journey</h2>\n<p>In conclusion, Flutter offers a powerful and efficient solution for creating cross-platform applications. Its single codebase approach, native-like performance, extensive widget catalog, and vibrant community make it a top choice for developers worldwide. Whether you're developing mobile apps, web applications, or desktop software, Flutter empowers you to bring your ideas to life and reach a wider audience. Embrace the power of Flutter and unlock a world of possibilities in your app development journey.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/flutter-data-testing/\">Flutter: Data Testing</a></li>\n<li><a href=\"https://remelehane.dev/posts/widget-testing-rendeflex-overflow/\">Widget testing: Dealing with Renderflex Overflow Errors</a></li>\n</ul>"},{"url":"/posts/unit-testing-a-utility-function-that-returns-a-widget/","relativePath":"posts/unit-testing-a-utility-function-that-returns-a-widget.md","relativeDir":"posts","base":"unit-testing-a-utility-function-that-returns-a-widget.md","name":"unit-testing-a-utility-function-that-returns-a-widget","frontmatter":{"title":"Unit Testing a Utility function that returns a Widget","stackbit_url_path":"posts/unit-testing-a-utility-function-that-returns-a-widget","date":"2021-03-31T11:22:38.000Z","excerpt":"Probably not too common a use case, but for me I have a utility function for","tags":["flutter","unittesting","flutterappdevelopmen"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*dqggYKcf6EZ3T2E9dRAL8A.jpeg"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*dqggYKcf6EZ3T2E9dRAL8A.jpeg\" alt=\"Flutter Logo\"></p>\n<p>Probably not too common a use case, but for me I have a utility function for handling in-app navigation from the in-app web view webview_flutter while it does have a generic error handler, I need to be handle errors differently based on what type of URL was selected as custom logic is required to be able to handle links that are not actually valid.</p>\n<p>A snippet from the utility mentioned above:</p>\n<iframe class=\"liquidTag\" src=\"https://dev.to/embed/gist?args=https%3A%2F%2Fgist.github.com%2FRemeJuan%2Fdc09ef02c6fe4301b59de866854b5a0d\" style=\"border: 0; width: 100%;\"></iframe>\n<p>In this case, groups is a URL path that we currently do not support within the flutter app, so there is other logic specifically for groups, but for brevitiy we will reference the generic _handleUnsupported function which returns a Snacbar with a localized error message.</p>\n<p>Normally with a utility test, one would simply use expect, however in this case the functions result would be a visual element, so before we can expect anything, we need to setup a test to allow all the logic to run.</p>\n<iframe class=\"liquidTag\" src=\"https://dev.to/embed/gist?args=https%3A%2F%2Fgist.github.com%2FRemeJuan%2Fbde3586378ec02935b10bc54623b2833\" style=\"border: 0; width: 100%;\"></iframe>\n<p>There are actually quite a few things happening here in this test, but the most important part is the setup on line 13. Here we are setting up a test implementation of the widget, the provideLocalizedWidgetForTesting is a test utility I setup, you can read about it <a href=\"https://dev.to/remejuan/bringing-localization-into-your-widget-testing-71f\">HERE</a>.</p>\n<p>As the resulting Snackbar also makes use of context fot state access as well as localization I have included the LayoutBuilder to get hold of the context from the test utility.</p>\n<p>The utility function itself is a Future and one of the easisest way to run those inside a widdget is with the FutureBuilder, which links back up to the future function on line 8. Here is simply included a short delay to help manage ui rendering within the test context, otherwise you end up with it failing as needsBuild get’s called.</p>\n<p>So once we have settled and pumped that additional second, we are now able to expect the Widget that should be rendered on the screen.</p>\n<p>As mentioned above, not a very common usecase, and when possible one should always keep UI and Utilities seperate, and after having written this I had found a better way to deal with it in my use case, a way that did not involve returning a widget from a utility.</p>\n<p>I felt however the learning itself was still valuable, and the possibility does exist that this is an unavoidable scenario for someone, or even myself at a later stage. # SharingIsCaring</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<p>If you wish to carry on with the subject of testing, why not take a look at:</p>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/widget-testing-passed-in-function/\">Widget testing passed in function</a></li>\n<li><a href=\"https://remelehane.dev/posts/widget-testing-when-your-app-needs-access-to-directories/\">Widget testing when your app needs access to directories.</a></li>\n</ul>"},{"url":"/posts/unit-testing-dattimenow-with-the-help-of-dart-extensions/","relativePath":"posts/unit-testing-dattimenow-with-the-help-of-dart-extensions.md","relativeDir":"posts","base":"unit-testing-dattimenow-with-the-help-of-dart-extensions.md","name":"unit-testing-dattimenow-with-the-help-of-dart-extensions","frontmatter":{"title":"Unit testing DateTime.now() with the help of Dart extensions","stackbit_url_path":"posts/unit-testing-dattimenow-with-the-help-of-dart-extensions","date":"2021-07-18T09:00:00.000Z","excerpt":"A quick guide on how we can use Darts extension methods to easily be able to test DateTIme.now();","tags":["flutter","flutterdevelopment","flutterweb","fluttertest","unit-testing"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/1*vih036gD7fwgfj2jXHgKHA.png"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/1*vih036gD7fwgfj2jXHgKHA.png\"></p>\n<h2>The Problem…</h2>\n<p>Often times within our applications, both on the UI and Data sides we will need to set “defaults” for dates, the simplest way to do that in most cases would be to use DateTime.now(), after all, we are most likely going to use the current time as the default value.</p>\n<p>While this is very handy, it can create complications when it comes time to test. Within Dart it is not possible to simply override methods or functions globally, you can only mock arguments that are passed into classes, and adding an argument of DateTime to a class while easy enough, but not seldom wanted and can more then likely just lead to unnecessary bloat.</p>\n<p>With widgets, however, that is a completely different story, you would either need to pass DateTime into the widget or create a custom class and add that to some dependency injection in order to be able to mock it in the test.</p>\n<h2>A Solution…</h2>\n<p>One solution I discovered, which is made possible with extensions which was introduced in dart 2.7</p>\n<blockquote>\n<p> Extension methods, introduced in Dart 2.7, are a way to add functionality to existing libraries. (<a href=\"https://dart.dev/guides/language/extension-methods\">Link</a>)</p>\n</blockquote>\n<p>Using this, we are able to create an extension on DateTime with which we can both get the “current” time as well as implement a setter to allow us to override that “current” time.</p>\n<pre><code class=\"language-dart\">extension ExtendedDateTime on DateTime {\n  static DateTime? _customTime;\n\n  static DateTime get current {\n    return _customTime ?? DateTime.now();\n  }\n\n  static set customTime(DateTime customTime) {\n    _customTime = customTime;\n  }\n}\n</code></pre>\n<p>We have a nullable DateTime which when we use ExtendedDateTime.current within our code will return the value of DateTime.now().</p>\n<p>That in itself is nothing special, the set method is what we really care about.</p>\n<p>Take the following class as an example.</p>\n<pre><code class=\"language-dart\">class User {\n  final String userName;\n  final DateTime createdDate;\n  \n  User(this.userName, this.createdDate);\n  \n  static User createUser(String userName) => User(userName, DateTime.now());\n}\n</code></pre>\n<p>From within the logic of our code, we wish to create a new user, so I wish to verify that when I call User.createUser that it returns a new user with the name passed in as well as the current DateTime. However, during the execution of the test, a few milliseconds would pass between calling the function and verifying the expectation.</p>\n<pre><code class=\"language-dart\">final result = User.createUser('Reme');\nexpect(result, equals(User('Reme', DateTime.now());\n</code></pre>\n<p>The above example is almost certain to fail as a result of those few milliseconds.</p>\n<p>Now that we have added our extension to our project we can refactor our code to rather look like:</p>\n<pre><code class=\"language-dart\">class User {\n  final String userName;\n  final DateTime createdDate;\n  \n  User(this.userName, this.createdDate);\n  \n  static User createUser(String userName) => User(userName, ExtendedDateTime.current);\n}\n</code></pre>\n<p>After which our test would look something like:</p>\n<pre><code class=\"language-dart\">ExtendedDateTime.current = DateTime.parse(\n  \"2020-05-15 13:07:53.531Z\",\n);\n\nfinal result = User.createUser('Reme');\n\nexpect(result, equals(User('Reme', \"2020-05-15 13:07:53.531Z\");\n</code></pre>\n<h2>Final thoughts…</h2>\n<p>As you can see, with a very small change to our code, we are now very easily able to keep things simple, without impacting our ability to test them.</p>\n<p>I often like to say, maybe it was said to me once, cannot remember…</p>\n<blockquote>\n<p>Working code != testable code, but testable code == working code.</p>\n</blockquote>\n<p>It may not always be fun, but a few minutes of testing today can save you hours of debugging tomorrow.</p>\n<hr>\n<p>I hope you enjoyed this post, if you have any questions, comments, or suggestions, feel free to drop a comment.</p>\n<p>If you liked it, a heart would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://blog.remelehane.dev/series/flutter-web\">Flutter Web: Should I Use It</a></li>\n<li><a href=\"https://blog.remelehane.dev/developing-on-an-m1-mac-flutter-563c8dcc28f\">Developing on an M1 Mac (Flutter)</a></li>\n</ul>"},{"url":"/posts/unit-testing-your-http-multipartrequest-network-method/","relativePath":"posts/unit-testing-your-http-multipartrequest-network-method.md","relativeDir":"posts","base":"unit-testing-your-http-multipartrequest-network-method.md","name":"unit-testing-your-http-multipartrequest-network-method","frontmatter":{"title":"Unit Testing your http.MultipartRequest network method","stackbit_url_path":"posts/unit-testing-your-http-multipartrequest-network-method","date":"2020-08-10T07:16:01.000Z","excerpt":"Recently I had to implement image uploading which required form data that","tags":["fileupload","unittesting","flutterdevelopment","flutter"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*IHvlDw_HqNSpLJfsKbOr0Q.jpeg"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*IHvlDw_HqNSpLJfsKbOr0Q.jpeg\" alt=\"Circuit board image\"></p>\n<p>Recently I had to implement image uploading which required form data that cannot be done with the standard http.Clientand instead needs http.MultipartRequest.</p>\n<p>We have been doing a big push to implement a proper TDD approach in our products over at Wyzetalk, so one of the first steps was to get this new method tested, however, it was not as easy as it was with testing http.Client.</p>\n<p>Unlike with http.Client one needs to provide an instance that includes the 2 required arguments, type, and Uri. With our product being a white label and the file upload being used from multiple widgets I needed to cater for the possibility of different Uri’s. Then also for testing, in order to mock the method, I would need to pass it into the class or function.</p>\n<p>Here is a simplified version of my resulting implementation.</p>\n<pre><code class=\"language-dart\">Future&#x3C;String> fileUpload({\n  @required http.MultipartRequest multipartRequest,\n  @required http.MultipartFile fileData,\n  @required Map&#x3C;String, String> payload,\n}) async {\n  final request = await multipartRequest\n    ..headers.addAll({\n      ...deviceInfoHeaders,\n      \"Authorization\": 'Bearer FAKE\\_TOKEN',\n    })\n    ..fields.addAll(payload)\n    ..files.add(fileData);\n\n  final response = await request.send();\n  final respStr = await response.stream.bytesToString();\n\n  if (response.statusCode == 200) {\n    return respStr;\n  } else {\n    throw ServerException();\n  }\n}\n</code></pre>\n<p>I am passing in both the multiPartRequestas well as the fileData so that the implementation point can prepare the data based on the type, image vs doc.</p>\n<p>The payloadData is just any extra info that gets provided by the uploading widget.</p>\n<p>Mocking http.Client is very simple as you can see by the below snippet.</p>\n<pre><code class=\"language-dart\">class MockClient extends Mock implements http.Client {}\n</code></pre>\n<p>In order to get http.MultipartRequest there are a few extra things you may need to provide based on your specific use case.</p>\n<pre><code class=\"language-dart\">class MockMultipartRequest extends Mock implements http.MultipartRequest {\n  @override\n  final Map&#x3C;String, String> headers = {};\n\n  @override\n  final fields = &#x3C;String, String>{};\n\n  @override\n  final files = &#x3C;MultipartFile>[];\n}\n</code></pre>\n<p>In my case, as you can see in the functions code sample, I am providing headers, fields in the case of the payload, and files.</p>\n<p>For that, within the mock class, I have also added the overrides for the 3 fields to ensure the logical default persists within the tests.</p>\n<pre><code class=\"language-dart\">void main() {\n  NetworkFileManager networkFileManager;\n  MockDeviceInformationHelper mockDeviceInformationHelper;\n  MockMultipartRequest mockMultipartRequest;\n\nsetUp(() {\n  mockMultipartRequest = MockMultipartRequest();\n  mockDeviceInformationHelper = MockDeviceInformationHelper();\n\nnetworkFileManager = NetworkFileManager(\n    deviceInformation: mockDeviceInformationHelper,\n    headers: fixtureApiHeadersAuthed,\n  );\n\nwhen(mockDeviceInformationHelper.getDeviceInformation())\n    .thenAnswer((\\_) async => fixtureDeviceInfo);\n  });\n\ngroup('apiFileUpload', () {\n    final mockPayload = Map&#x3C;String, String>();\n    final mockFile = http.MultipartFile.fromBytes(\n      \"file\",\n      [0],\n      filename: 'file-name',\n      contentType: http\\_parser.MediaType(\n        'image',\n        'jpeg',\n      ),\n    );\n\ntest('should perform a File Upload request', () async {\n      //arrange\n      when(mockMultipartRequest.send()).thenAnswer(\n        (\\_) async => http.StreamedResponse(Stream.value([0]), 200),\n      );\n      //act\n      await networkFileManager.fileUpload(\n        payload: mockPayload,\n        fileData: mockFile,\n        multipartRequest: mockMultipartRequest,\n      );\n      //assert\n      verify(mockMultipartRequest.send());\n    });\n  });\n}\n</code></pre>\n<p>Here is a snippet from the test for the above function, I am passing in a mockFile and mocking the request's response, which returns an http.StreamedResponse which takes a Steam.value and the 200 response code.</p>\n<p>This setup allows us to verify that when the function is called, the network request should get made by verifying that the mockMultipartRequest.send() is in fact called.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<p>Wish to carry on with the topic of Unit Testing, take a look at:</p>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/bringing-localization-into-your-widget-testing/\">Bringing localization into your Widget testing</a></li>\n<li><a href=\"https://remelehane.dev/posts/widget-testing-passed-in-function-/\">Widget testing passed in function</a></li>\n</ul>"},{"url":"/posts/up-your-testing-game/","relativePath":"posts/up-your-testing-game.md","relativeDir":"posts","base":"up-your-testing-game.md","name":"up-your-testing-game","frontmatter":{"title":"Flutter: Up your testing game","stackbit_url_path":"posts/up-your-testing-game","published":false,"date":"2022-04-12T12:00:00.000Z","excerpt":"Let's take a look at how find.byPredicate can help write some bulletporrf tests!","tags":["flutter","flutterweb","fluttermobile","flutterdevelopment"],"template":"post","thumb_img_path":"https://raw.githubusercontent.com/RemeJuan/remelehane/main/2022/07/upgit_20220728_1658994945.webp","cover_image":"https://raw.githubusercontent.com/RemeJuan/remelehane/main/2022/07/upgit_20220728_1658994945.webp","canonical_url":"https://remelehane.dev/posts/up-your-testing-game"},"html":"<p><img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/2022/07/upgit_20220728_1658994945.webp\" alt=\"jachymmichal-oVWilf8znF8-unsplash\"></p>\n<p>Today we going to look at a great utility provided by Flutter's testing framework which gives us a lot more power when it comes to accurately test our widgets.</p>\n<p>Very often widgets can very simply be tested using <code>find.byType</code>, <code>find.text</code> and <code>find.byKey</code>. Each of these is quite simple to use, and which you choose will depend on what exactly you are trying to test for, however, there are some scenarios where the basic tests like this will not yield valuable results.Take the following widget as an example:</p>\n<pre><code class=\"language-dart\">class SampleWidget extends StatelessWidget {\n  final bool complete;\n  \n  const SampleWidget({required this.complete, Key? key}) : super(key: key);\n\n  @override\n  Widget build(context) {\n    return complete\n        ? Icon(Icons.check_circle, color: AppTheme.strongBlue)\n        : Icon(Icons.circle_outlined, color: AppTheme.strongBlue);\n  }\n}\n</code></pre>\n<h2>Simple Usecase (Icon)</h2>\n<p>Personally, I do not usually test all my widgets, the above would be a sample of a very simple use-case that would make me consider writing the test, while it is extremely basic, this widget itself does pose some logic, there is a decision being made within this widget and while it's nothing complicated it serves the purpose of illustrating an ideal scenario for the test.</p>\n<p>In the above widget, there is no text I can look for, I have not supplied any Keys for the individual icons and they are both icons, so using their type would not yield in an accurate test.</p>\n<p>If I were to write the test like:</p>\n<pre><code class=\"language-dart\">    testWidgets('Should render the check_circile_icon', (tester) async {\n      await tester.pumpApp(const SampleWidget(complete: true));\n      \n      await tester.pumpAndSettle();\n\n      final iconFinder = find.byType(Icon);\n\n      expect(iconFinder, findsOneWidget);\n    });\n\n    testWidgets('Should render the circle_outlined icon', (tester) async {\n      await tester.pumpApp(const SampleWidget(complete: false));\n      \n      await tester.pumpAndSettle();\n\n      final iconFinder = find.byType(Icon);\n\n      expect(iconFinder, findsOneWidget);\n    });\n</code></pre>\n<p>They would both certainly pass, and if one were to look at the coverage report, that too would indicate 100% test coverage, but the test as a whole is pretty worthless, while it is running the logic, the logic is certainly working, your test in no way proves this.</p>\n<p>If you are going to take the time to write the test (and I hope you do), the test should always provide value beyond that of the coverage report, testing for line coverage dilutes the value and purpose of unit testing your code.</p>\n<p>This is where <code>find.byWidgetPredicate</code> comes in handy and will allow you to write the same test above while being able to uniquely identify the individual icons.</p>\n<p><code>find.byWidgetPredicate</code> is a function based lookup that provides the widget as its function argument, this allows you to use attributes of the widget to specifically target unique instances of the same widget.</p>\n<p>If we look at the next example, I have updated the <code>iconFinder</code> to make use of <code>find.byWidgetPredicate</code> lookup instead of the <code>find.byType</code>:</p>\n<pre><code class=\"language-dart\">    testWidgets('Should render the circle_outlined icon', (tester) async {\n      await tester.pumpApp(const SampleWidget(complete: false));\n      \n      await tester.pumpAndSettle();\n\n      final iconFinder = find.byWidgetPredicate(\n        (widget) => widget is Icon &#x26;&#x26; widget.icon == Icons.circle_outlined,\n      );\n\n      expect(textFinder, findsOneWidget);\n    });\n</code></pre>\n<p>As you can see, within the function body we are looking for a widget that is an <code>Icon</code>(so a type comparison) and that the icon property of that Icon widget matches the <code>IconData</code> <code>Icons.circle_outlined</code>.</p>\n<p>That way if for some reason, someone went and changed the <em>false</em> icon to <code>Icons.menu</code> for some strange reason, the <code>find.byWidgetPredicate</code> lookup would fail. If we had used the <code>find.byType</code>or even <code>find.byKey</code>, assuming we had provided unique keys, the test would have continued to pass.</p>\n<p>The <code>find.byWidgetPredicate</code> lookup within widget testing allows you to write near bulletproof tests.</p>\n<h2>Better usecase (RichText)</h2>\n<p>Above was a very simple example, but within Flutter, if one wants to write a single line of text, but have a single word a phrase styled differently, be it <strong>bold</strong> or <em>italic</em>, we have to use the <code>RichText</code> widget along with a sequence of <code>TextSpan</code>'s in order to achieve the desired result.</p>\n<p>Take this example:</p>\n<pre><code class=\"language-dart\">        RichText(\n        text: TextSpan(\n          children: [\n            const TextSpan(\n              text: \"Required\",\n              style: TextStyle(\n                fontWeight: FontWeight.bold,\n                color: Colors.black,\n              ),\n            ),\n            TextSpan(\n              text: \" 70%\",\n              style: const TextStyle(\n                color: Colors.black,\n              ),\n            ),\n          ],\n        ),\n      )\n</code></pre>\n<p>While this specific widget I probably would not actually test, it's another great example for using the <code>find.byWidgetPredicate</code> in a more complicated scenario.</p>\n<pre><code class=\"language-dart\">    final requiredScoreFinder = find.byWidgetPredicate(\n      (widget) =>\n          widget is RichText &#x26;&#x26;\n          widget.text.toPlainText().contains(\"70%\"),\n    );\n</code></pre>\n<p>for the above widget, you would target it something like the above sample, as the <code>RichText</code> widget actually does break the text up into multiple parts, <code>find.text</code> will not work.</p>\n<p>You can use <code>contains</code> to do a partial lookup or you can simply use strict equality, contains may be simpler for longer sentences.</p>\n<pre><code class=\"language-dart\">    final requiredScoreFinder = find.byWidgetPredicate(\n      (widget) =>\n          widget is RichText &#x26;&#x26;\n          widget.text.toPlainText() == \"Results 70%\",\n    );\n</code></pre>\n<p>As you can hopefully now see, <code>find.byWidgetPredicate</code> can be a very powerful tool in your testing tool belt and will allow you to write even better, more accurate tests.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<p>Wish to carry on with the topic of Unit Testing, take a look at:</p>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/automated-unit-testing-with-github-actions/\">Automated Unit Testing with GitHub Actions</a></li>\n<li><a href=\"https://remelehane.dev/posts/unit-testing-dattimenow-with-the-help-of-dart-extensions/\">Unit testing DateTime.now() with the help of Dart extensions</a></li>\n</ul>\n<p>Photo by <a href=\"https://unsplash.com/@jachymmichal?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\">ᴊᴀᴄʜʏᴍ ᴍɪᴄʜᴀʟ</a> on <a href=\"https://unsplash.com/s/photos/chess?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\">Unsplash</a></p>"},{"url":"/posts/vuejs-first-impressions/","relativePath":"posts/vuejs-first-impressions.md","relativeDir":"posts","base":"vuejs-first-impressions.md","name":"vuejs-first-impressions","frontmatter":{"title":"VueJS: First Impressions","stackbit_url_path":"posts/vuejs-first-impressions","date":"2017-11-21T16:34:21.955Z","excerpt":"With all the new libraries and frameworks it is pretty hard to keep up with","tags":["vue","frontend","javascript","webdev"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/gzic0j1dmzjhd0p2i727.jpeg"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/gzic0j1dmzjhd0p2i727.jpeg\" alt=\"VueJS logo\"></p>\n<p>With all the new libraries and frameworks it is pretty hard to keep up with all of them, and that is if you can even decide which ones are worth spending time one, over the last year or so I was exposed to many a new tech stack, with React for work and just personally playing around with React-Native, Aurelia and Angular2. Each of them attached to a new project, partly justified by wanting to try it out or form my own opinion.</p>\n<p>Previously I had written about Aurelia, which I was very impressed with after than Angular 2 disaster, if you like, you can read more about it here:</p>\n<p><a href=\"https://medium.com/@reme.lehane/aurelia-first-impressions-e72262e6e049\">Aurelia: First impressions</a></p>\n<p>This time round I decided to dive into <a href=\"https://vuejs.org/\">Vue.JS</a>, a lot of good things are being said about it on the web, with it apparently being faster than react, with it’s implementation of <a href=\"https://github.com/snabbdom/snabbdom\">Snabbdom</a>, a simple and powerful Virtual DOM focused on performance. On top of that is is notably smaller than React sitting around 14kb.</p>\n<p>Of all the frameworks and libraries I have worked with over the years, one thing that stood out to me about Vue.JS was the documentation, very detailed and easy to follow, covering multiple use cases and all the various options, where applicable, for each of it’s built in methods.</p>\n<p>Now for a look at the code, the following example is for a very simple component, written in absolute bare-bones, just for you to get an idea of how things are structured.</p>\n<pre><code class=\"language-javascript\">&#x3C;template>\n  &#x3C;div>\n    &#x3C;header-bar>&#x3C;/header-bar>\n    &#x3C;main>\n      &#x3C;search-bar :submit=\"search\" :term=\"searchTerm\">&#x3C;/search-bar>\n        &#x3C;list-data v-for=\"item in list\" :event=\"item\">&#x3C;/list-item>\n    &#x3C;/main>\n    &#x3C;footer-bar>&#x3C;/footer-bar>\n  &#x3C;/div>\n&#x3C;/template>\n\n&#x3C;script>\nimport Vue from 'vue';\nimport { Search } from './components';\nimport { Header, Footer, List } from '~/shared';\nimport './styles.scss';\nexport default {\n  name: 'Events',\n  components: {\n    'header-bar': Header,\n    'search-bar': Search,\n    'list-data': List,\n    'footer-bar': Footer,\n  },\n  data() {\n    return {\n      data: [],\n      searchTerm: {},\n    }\n  },\n  created() {\n    // API/Service calls would go here\n    return {\n      data: [\n        {},\n        {}\n      ],\n    };\n  },\n  methods: {\n    search() {\n      // Search method written here\n    },\n  }\n};\n&#x3C;/script>\n</code></pre>\n<p>Vue.JS uses a template file containing both you template body and a script section, and these files are saved with a <strong>.vue</strong> extension.</p>\n<p>Vue.JS itself is completely template agnostic, you can use handlebar/directive template as above, you can also use <strong>JSX</strong>, or even build it up very manually using es5 or es6 string interpolation if you prefer.</p>\n<p>This file pretty much handles it all, you will define the HTML structure as well as relevant scripting logic, and either define a\n<code>&#x3C;style></code>\nblock or import a style sheet like in the example.</p>\n<p>The script tag is where all the real work begins, we start by importing Vue and whatever components we intend on using within the component.</p>\n<pre><code class=\"language-javascript\">name: 'Events',\n components: {\n    'header-bar': Header,\n    'search-bar': Search,\n    'list-data': List,\n    'footer-bar': Footer,\n },\n</code></pre>\n<p>Above we have a snippet from the default export object, we start with the\n<code>components</code>\nname, followed by a components object. This object defines a key which is the tag name for the HTML element within our template with its value being the component we imported a little further up.</p>\n<p>Next we have some of our methods to control initial logic and define usable functions.</p>\n<pre><code class=\"language-javascript\">data() {\n  return {\n    data: [],\n    searchTerm: {},\n  }\n},\n</code></pre>\n<p>The\n<code>data()</code>\nfunction is used to setup default data for initial rendering of the component, here the data key is setting itself as an empty array as later when we fetch the data it will become and array of objects, and we do not want to break the render by defaulting with invalid data types.</p>\n<pre><code class=\"language-javascript\">created() {\n  // API/Service calls would go here\n  return {\n    data: [\n      {},\n      {}\n    ],\n  };\n},\n</code></pre>\n<p><code>created()</code>\nis similar to reacts\n<code>componentWillMount</code>\nlife cycle method, this is the best place within the life of the component to go fetch any data that is not available on initiation of the component, in this case to go fetch the actual list items.</p>\n<pre><code class=\"language-javascript\">methods: {\n  search() {\n    // Search method written here\n  },\n}\n</code></pre>\n<p><code>methods()</code>\nis where you define functions that will be used within the component itself, or passed down to a child component as props, as is the case with\n<code>search()</code>\n, the child\n<code>Search</code>\ncomponent will receive this method via the props, and this will then be fired off when a user interacts with the search component.</p>\n<p>One thing that was not specifically included in the example but was was referenced was props, like react and probably many other libraries at this stage, Vue.JS also supports props, and like react they can be anything that a child component needs, be it static text, a function, and array of data needing to be looped over, or an object with key value pairs for simple dynamic display.</p>\n<p>Props are quite simple to define, within the\n<code>default export</code>\nyou would add another key, called ‘props’ with an array of all the props it is expecting to receive.</p>\n<pre><code class=\"language-javascript\">&#x3C;template>\n  &#x3C;form novalidate @submit.stop.prevent=\"submit\">\n    &#x3C;label>Search term...&#x3C;/label>\n    &#x3C;input v-model=\"term.value\">&#x3C;/input>\n  &#x3C;/form>\n&#x3C;/template>\n\n&#x3C;script>\nexport default {\n  name: 'Search',\n  props: ['submit', 'term'],\n}\n&#x3C;/script>\n</code></pre>\n<p>Above would then be an example of the search component, as you can see it is taking in 2 props, the submit method and term, which is a model for handling the search value that will be passed into the function.</p>\n<p>This was just a taste of what is possible with Vue.JS, you will see many more examples by visiting their documentation at <a href=\"https://vuejs.org/v2/guide/\">Vue.JS docs</a>.</p>\n<p>If you wish to quickly spin up an application and start playing around with Vue.JS, I can suggest taking a look at the Yeoman generator created by <a href=\"https://github.com/fountainjs/generator-fountain-vue\">FountainJS</a>.</p>\n<p>Working with Vue.JS was a great pleasure, I found the learning curve very shallow, however that could purely be based on my experience, as mentioned before I have worked with a few in the past.</p>\n<p>The default template structure feels very similar to how it was working with Angular, so developers coming from that background may pick it up a bit faster than they would react. I cannot really go un-learn react to see if it influences how easy it was to pick up Vue.JS.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>"},{"url":"/posts/weekend-app-3d-print-cost-calculator/","relativePath":"posts/weekend-app-3d-print-cost-calculator.md","relativeDir":"posts","base":"weekend-app-3d-print-cost-calculator.md","name":"weekend-app-3d-print-cost-calculator","frontmatter":{"title":"Weekend App: 3D Print Cost Calculator","stackbit_url_path":"posts/weekend-app-3d-print-cost-calculator","date":"2021-12-28T09:00:00.000Z","excerpt":"A small app I built to solve a really simply problem I had, while testing form_bloc and VG CLI","tags":["flutter","flutterweb","fluttermobile","flutterdevelopment","3dprinting"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/play_store_feature.webp"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/play_store_feature.webp\" alt=\"Banner image\"></p>\n<p>A 3D Printer has been on my shopping/wishlist for some time, and this Black Friday a very nice one came up for a very good price, I had always assumed that the running costs of such a thing were relatively high, quite happy to say I was very wrong on that one.</p>\n<p>After a few weeks or mostly thumbsucking how much things cost I took to DuckDuckGo to see what calculators existed, and while there are quite a few, they were either very simple or overly complicated for my \"for funzies\" use case.</p>\n<p>I was not running a business, so cleaning and polishing times were not factors, other staff did not exist, so the complex ones were a non-starter really and the simple ones to me did not give the whole picture, sure the filament in most cases is the bulk of the cost, but electricity is also a factor and I like full pictures.</p>\n<p>To solve this \"problem\" I wrote a really simple app, initially, I was going to just spin up a spreadsheet, but those suck to use on a phone.</p>\n<p>Spinning up an app also gave me the chance to play with more recent developments in the Flutter community.</p>\n<p>The  <a href=\"https://verygood.ventures/blog/flutter-starter-app-very-good-core-cli\">Very Good Venture CLI</a>  has been floating around my Twitter feed for some time, so when bootstrapping this App I went with that, and I must say I really do like the boilerplate they provide. It ships with BLoC as well as the VGV linting config as well as a nice GH Action script.</p>\n<p>With that, I also added in  <a href=\"https://pub.dev/packages/form_bloc\">form_bloc</a>, which, considering the size of the app was complete overkill, but oftentimes trying out new things can be a lot easier in a very small and specific use case. With that, I was also quite impressed, forms in general suck and this does simplify it while also providing a few useful extras.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1640682660736/cGaNRXk0O.png\" alt=\"3D Print Cost Calculator Screenshot\"></p>\n<p>As mentioned, the app is really simple, it is just one screen and I had only planned on having it as a PWA, but after a day or so, seeing as I already had a developer account with Google, I figured why not...</p>\n<p>You just scrolled past the screenshot, and that quite literally is all there is to it, the 6 input field and the result underneath, that is actually the 3rd \"update\". The initial version had all the inputs with a \"calculate\" button, which then revealed the results.</p>\n<p>After that, I decided to make my life easier and add in <a href=\"https://pub.dev/packages/sembast\">sembast</a> which I really wish I had found sooner for another project, but anyway. This seemed about the easiest way to store data long term for the web so I persisted the top 4 fields, Printer Wattage, Electricity Cost, Filament weight and cost as those 4 are the least likely to change between calculations.</p>\n<p>The last 2 will always need to be filled out, but the last/most recent update was to actually remove the calculate button and just run the math as the values are completed.</p>\n<hr>\n<p>I still need to spend some time working on the testing, have not quite figured out how to correctly test form_bloc and I just need to sit down and do the widget testing, while this app is simple enough to arguably not need extensive testing, I quite enjoy the testing and it's the small simple things that can sometimes teach you the most.</p>\n<p>The problem you run into in the tiny 1-page app, could and will likely also crop up in the big 12k+ LOC project, and it's probably not going to be easier to solve in that one...</p>\n<hr>\n<p>For those interested, here are all the relevant links, you can play around with the app and even dig around what very little code there is...</p>\n<p><a href=\"https://github.com/RemeJuan/threed_print_cost_calculator\">Repo</a> | <a href=\"http://printcalc.codemagic.app\">PWA</a> | <a href=\"https://bit.ly/3DPrintCalc\">Android App</a></p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you liked it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/automated-unit-testing-with-github-actions/\">Automated Unit Testing with GitHub Actions</a></li>\n<li><a href=\"https://remelehane.dev/posts/learning-by-solving-a-problem/\">Learning, by solving a “problem”</a></li>\n</ul>"},{"url":"/posts/validating-commit-messages-with-dart-and-lefthook/","relativePath":"posts/validating-commit-messages-with-dart-and-lefthook.md","relativeDir":"posts","base":"validating-commit-messages-with-dart-and-lefthook.md","name":"validating-commit-messages-with-dart-and-lefthook","frontmatter":{"title":"Validating commit messages with dart and Lefthook","stackbit_url_path":"posts/validating-commit-messages-with-dart-and-lefthook","date":"2020-08-31T07:16:01.000Z","excerpt":"Something I had been trying to work out for my Flutter project for some time","tags":["dart","flutter","flutterdevelopment","git"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*kproRaJTnQivymfDqsxTkg.jpeg"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*kproRaJTnQivymfDqsxTkg.jpeg\" alt=\"Validate Commit Messages Banner Image\"></p>\n<p>Something I had been trying to work out for my Flutter project for some time was validating commit messages, initially, I used commit-msg-validate but having a node dependency in a Flutter/Dart project does not seem right and when the team grew to beyond myself I worked on moving all of the automation scripts I had written in JS over to dart and while there are still a few node dependencies left, they are purely for use in the CI pipeline.</p>\n<p>For the purpose of executing git-hooks across the team, I added <a href=\"https://github.com/Arkweid/lefthook\">Lefthook</a> to the project and initially only used pre-push for executing the test scripts, but only recently had an idea for how to execute the commit-msg hook.</p>\n<h3>The Hook</h3>\n<p>I found out that the commit message is stored in a plain text file COMMIT_EDITMSG inside the ./git folder, which would be easy to read up into a string within Dart.</p>\n<p>I added a git_hook folder with a commit_message.dart file, which I could later run from Lefthook.</p>\n<p>Within our project, and I suspect many at this point we follow the semantic commit message approach, you can read more about that <a href=\"https://nitayneeman.com/posts/understanding-semantic-commit-messages-using-git-and-angular/\">HERE</a>.</p>\n<p>Our commit message file looks like:</p>\n<pre><code>_import_ 'dart:io';\n\n_dynamic_ main() {\n_final_ rootDir = Directory._current_;\n_final_ commitFile = File(rootDir.path + \"/.git/COMMIT\\_EDITMSG\");\n_final_ commitMessage = commitFile.readAsStringSync();\n\n_final_ regExp = RegExp(\n    r'(fix|feat|wip|none|chore|refactor|doc|style|test)\\(\\w+\\):\\s?(\\[\\DEV-\\d+])?.+',\n  );\n\n_final_ valid = regExp.hasMatch(commitMessage);\n_if_ (!valid) exitCode = 1;\n}\n</code></pre>\n<h3>Let's break it down</h3>\n<pre><code>_final_ rootDir = Directory._current_;\n_final_ commitFile = File(rootDir.path + \"/.git/COMMIT\\_EDITMSG\");\n_final_ commitMessage = commitFile.readAsStringSync();\n</code></pre>\n<p>The first few lines are quite simply, here we are getting the current directory and with that creating a File reference to COMMIT_EDITMSG, which is then read up to a string, which can be validated with the following Regular Expression.</p>\n<pre><code>_final_ regExp = RegExp(\n    r'(fix|feat|wip|none|chore|refactor|doc|style|test)\\(\\w+\\):\\s?(\\[\\DEV-\\d+])?.+',\n  );\n</code></pre>\n<p>This validates our commit message format, which starts with a prefix, these are most important for the automation scripts used to generate our version number as well as the changelog.</p>\n<h4>The Expression</h4>\n<pre><code>(fix|feat|wip|none|chore|refactor|doc|style|test)\n</code></pre>\n<p>Each message has to begin with one of the above strings, after that we have our scope:</p>\n<pre><code>\\(\\w+\\)\n</code></pre>\n<p>This is normally used as a module or feature reference, just to provide a small context on where the change is happening.</p>\n<p>After that we have the optional space and Jira ticket references, all our Jira issues begin with DEV.</p>\n<pre><code>\\s?(\\[\\DEV-\\d+])\n</code></pre>\n<p>Finally, any characters after that,</p>\n<pre><code>.+\n</code></pre>\n<p>In our case a valid commit message would look like:</p>\n<pre><code>feat(video): [DEV-1223] added support for leading text\nfeat(video): added support for leading text\n</code></pre>\n<h4>The Validation</h4>\n<p>After that, we can validate our commit message against our Regular Expression using:</p>\n<pre><code>_final_ valid = regExp.hasMatch(commitMessage);\n_if_ (!valid) exitCode = 1;\n</code></pre>\n<p>If not valid, we simply set the exitCode to 1, anything other than 0 is an error, which would terminate the script and prevent you from commit with an incorrect message.</p>\n<h3>Adding in Lefthook</h3>\n<p>Now that our script is complete, we can update Lefthook so that this script can be executed whenever one of us attempts a git commit.</p>\n<pre><code>commit-msg:\n  commands:\n    validate:\n      run: flutter pub run ./git\\_hooks/commit\\_message.dart\n</code></pre>\n<p>After adding the above snippet to lefthook.yaml, one simply needs to run lefthook install to activate the hook.</p>\n<pre><code>Lefthook v0.7.2\nRUNNING HOOKS GROUP: commit-msg\n\nEXECUTE > validate\nThe message: none(lefthook): added commit validation\n\nSUMMARY: (done in 1.13 seconds)\n✔️ validate\n</code></pre>\n<p>If everything has worked, after your next commit, assuming your message met the required format, you should see something similar to the above message.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/improving-user-experience-through-simple-ota-updates-in-flutter/\">Improving User Experience through simple OTA updates in flutter</a></li>\n<li><a href=\"https://remelehane.dev/posts/why-we-chose-flutter/\">Why we chose Flutter</a></li>\n</ul>"},{"url":"/posts/why-choose-flutter/","relativePath":"posts/why-choose-flutter.md","relativeDir":"posts","base":"why-choose-flutter.md","name":"why-choose-flutter","frontmatter":{"title":"Why choose Flutter?","stackbit_url_path":"posts/why-choose-flutter","date":"2021-08-15T09:00:00.000Z","excerpt":"We go through some of the reasons and thinkings behind choose Flutter for your next project","tags":["flutter","flutterdevelopment","fluttermobile","flutterappdevelopment"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/QC3GjPR-20210703084716071-20210703084934546.jpg"},"html":"<h2>Why choose Flutter?</h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/QC3GjPR-20210703084716071-20210703084934546.jpg\"></p>\n<p><strong>So</strong>, you are a developer looking for the next fun playground or evaluation viable technologies for your companies next big project?</p>\n<p>As someone who has been there already and inevitably decided on Flutter, let me see if I can help you with that one.</p>\n<h3>What does Flutter do…</h3>\n<p>Flutter is a cross-platform framework designed to allow developers/companies to use a single codebase and deploy to multiple platforms.</p>\n<p>At the time of writing these included Mobile (Android/iOS), Web, Desktop (Mac, Windows, Linux), Smart TV’s/Devices (AppleTV, Android TV, Samsung Smart TV’s), Cars.</p>\n<p>There is also presently no other framework capable of such an expansive deployment capability, the closest being React-Native which supports Android and iOS with Web being made possible by an external group of developers.</p>\n<h3>How Flutter works…</h3>\n<p>Flutter is not simply a Framework, it’s a complete solution for building applications, it’s SDK provides everything a developer needs in order to build a quality and performant user interface and includes pre-built widgets for both Material Desing (Android) as well as Cupertino (iOS).</p>\n<p>So not only can you build for both platforms with a single codebase, but you can also build them using the native UI elements as well, giving your users a more familiar user experience without having to maintain 2 separate codebases.</p>\n<p>Flutter is the framework, but Dart is the actual programming language behind it, like Flutter, Dart is also an open-sourced product being developed by Google.</p>\n<p>Within its core, there is also a high-speed C++ compiler, the resulting combination allows for highly performant native experiences at 60 or even 120fps.</p>\n<p>Unlike React-Native, Flutter and Dart make use of the Skia C++ graphics engine which minimizes interactions with the host operating system and removed the need for any form of Bridge.</p>\n<h2>Pros and Cons of using Flutter…</h2>\n<p>There are many benefits to using Flutter, but like any other framework, nothing is perfect, so as always, an informed decision is based on knowing both the good and the bad.</p>\n<h3>(Pro) The budget…</h3>\n<p>Being a single framework in a single language that supports multiple platforms, I am sure you have guessed that it is much more cost-effective as you would not need a development team per platform.</p>\n<p>Normally you would need 2 or 3 teams for an application, 1 for Android, another for iOS and a 3rd for Web if that was part of your product availability.</p>\n<p>This also means that development time can be exponentially faster, which is extremely valuable for startups or MVP development of a new product.</p>\n<h3>(Pro) Performance…</h3>\n<p>Flutter aims to achieve true, native-like performance, out the box it aims to achieve 60fps and can even reach 120fps on supporting devices.</p>\n<p>Flutter does not make use of any bridges as with other cross-platform frameworks which is how it manages to achieve such high levels of performance.</p>\n<h3>(Pro) Hot-Reload…</h3>\n<p>This ones for the developers, but also slips into that budget category, when developing Flutter has a listener running that listens for code changes, allowing near-instant updates to the currently connected device.</p>\n<p>This means developer won’t lose their place within the application when the compiler recompiles the updated code, the developer can simply go back to the development device and carry on where they left off.</p>\n<p>This way you get the benefits of more tangible work achieved in a smaller amount of time.</p>\n<h3>(Con) Size…</h3>\n<p>One of the biggest disadvantages to Flutter right now would be size, the core of the framework itself adds about 5MB to an application, which would mean it would be quite tricky to be able to use Flutter for something like InstantApps.</p>\n<h3>(Con-ish) Age…</h3>\n<p>Flutter is still on the younger side when compared to its counterparts, and while it has matured quite a lot in this time and has even overshadowed what's currently available, this can lead to bigger and more impactful changes coming with each release.</p>\n<p>Depending on these changes determines just how much of a con it can be, as it can also be considered a pro.</p>\n<p>Much of the time the changes have minimal impact on the development and are as simple as running flutter upgrade and generally have significant impacts on the resulting applicant, either with new features supported or speed boosts.</p>\n<p>However, with Flutter 2.0 shipping out, there was the potential for a larger impact on development with the sound null-safety release that required some considerable code changes in order to fully implement, this was mitigated with tooling and the ability to do this incrementally.</p>\n<h3>(Con) Developers…</h3>\n<p>Being a newer framework, developers and especially experienced ones are quite scarce at this point so it could be a risk heading in this direction without doing some research in your area regarding developers and would be worth getting into the communities, you could always hire globally by building a remote team.</p>\n<p>Overall, Flutter is likely to be a good long term choice and maybe worth any of the short term cons you may encounter.</p>\n<p>This is just one person's opinion, feel free to get a second, third… tenth :D.</p>\n<p>Hope you enjoyed the read, if you have any questions or comments go right ahead.</p>\n<hr>\n<p>I hope you enjoyed this post, if you have any questions, comments, or suggestions, feel free to drop a comment.</p>\n<p>If you liked it, a heart would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://blog.remelehane.dev/series/flutter-web\">Flutter Web: Should I Use It</a></li>\n<li><a href=\"https://blog.remelehane.dev/developing-on-an-m1-mac-flutter-563c8dcc28f\">Developing on an M1 Mac (Flutter)</a></li>\n</ul>"},{"url":"/posts/why-we-chose-flutter/","relativePath":"posts/why-we-chose-flutter.md","relativeDir":"posts","base":"why-we-chose-flutter.md","name":"why-we-chose-flutter","frontmatter":{"title":"Why we chose Flutter","stackbit_url_path":"posts/why-we-chose-flutter","date":"2020-08-24T07:16:01.000Z","excerpt":"Some would wonder why a company whos development team speaks almost","tags":["flutterappdevelopmen","mobileappdevelopment","hybridappdevelopment","flutter"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*yM3feYmhF04LRjVoWFyWaQ.jpeg"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*yM3feYmhF04LRjVoWFyWaQ.jpeg\" alt=\"Why We Chose flutter banner image\"></p>\n<p>Some would wonder why a company whos development team speaks almost exclusively Javascript would choose flutter to build their next product.</p>\n<p>Well, the short answer is, it was, and still is, the best tool for the job.</p>\n<h3>The beginning</h3>\n<p>I was brought into <a href=\"https://www.wyzetalk.com\">Wyzetalk</a> specifically for my experience in React and React Native as that was the preferred direction for the new mobile application. I spent the first few months doing some RnD projects, and at that time I had not heard of Flutter.</p>\n<p>After a few months, my boss was quite surprised to have me come back and say that neither React nor React native would be suitable for the project and that it would be best to use Ionic-Angular.</p>\n<p>It was a lot more complex to set up some of the core pieces of our business logic in React Native, compared to Ionic, which I had not even worked with before. As well as an important requirement was to be able to use a single codebase for Web and Mobile.</p>\n<p>React pretty much went out right from the get-go as we’ll make use of push notifications quite heavily and PWA’s have no support for them on iOS.</p>\n<p>At that time we knew Ionic was planning on releasing support for React and there was another project that needed my attention, so we tabled the mobile app for about a year.</p>\n<h3>Take 2</h3>\n<p>At this point a new member to the team has begun discussing Flutter with us, he was very impressed with it and felt it was a very good direction to go for cross-platform apps. I took another, less code-focused dive into the available tools just to see on paper how close they align with a few of the important points, at this stage Ionic-React was a strong contender.</p>\n<p>I took a look at our main options, React Native, React, Flutter, NativeScript and Ionic-React.</p>\n<p>React was still out as nothing had changed with regards to push-notifications.</p>\n<p>Ionic, unfortunately, did not support Android as far back as we needed, capacitor only offered support as far back as Android 5 while a good percentage of our user base was on Android 4.4.4.</p>\n<p>React Native support Android 4.1, which was great, however, there was still no viable solution for sharing the code on the web.</p>\n<p>NativeScript never went very far, and while I could have given it a better shot, the fact that after installing it, I was unable to get its own demo project started following its own guide on how to do it, did not bode well to me, especially as I was already quite keen on Flutter by that point.</p>\n<p>Flutter, while very new to me, which I think was one of the things that drew me to it, seemed very capable, the community seemed great and the code felt both strange and familiar at the same time. It provided us with far enough back Android support as well as the future ability to use the same code for web, so while probably being the riskiest choice at the time, it was also the most viable, and only one that checked all the requirements boxes.</p>\n<h3>Today</h3>\n<p>It has been about a year since we made that decision, and it was most definitely the right one, after having worked with it for so long, made my fair share of mistakes and learned a lot, I can see why it’s gathering such a great community behind it.</p>\n<p>We gave our UX team the spec of “<em>design the dream, and we will see how close we can get</em>”, so far we are yet to find anything we were not able to do, and for the most part without any serious complexity either.</p>\n<p>What I found most impressive was, that being soo young and soo much younger than React Native, how vastly more stable and mature it is. I cannot imagine having been able to build what we have done so far in React Native, or at least not with some serious challenges.</p>\n<p>Unfortunately, we are still waiting for web, and I am personally quite eager to see what it will look like, personally I am quite eager and in that regard, we are preparing the application to at least work in the beta channel so that we can get a head start on it.</p>\n<p><a href=\"https://remelehane.dev/posts/adding-flutter-web-to-an-existing-application/\">Adding Flutter web to an existing application</a></p>\n<h3>Conclusion</h3>\n<p>For anyone thinking of getting into Flutter, you will not be sorry, it is a great development experience, the community is substantial and growing by the day. At the time of writing the support for Android and iOS was relatively stable, Web was in Beta and Linux, Mac and Windows had all begun testing. We will soon have a truly cross-platform codebase.</p>\n<p>I personally cannot wait to see what is next and am so glad I had the opportunity to work with this amazing technology.</p>\n<p>Don’t get me wrong, coming from Javascript it was a very big learning curve, which helped me a lot, in the beginning, was <a href=\"https://fluttercrashcourse.com/\">https://fluttercrashcourse.com/</a>, and along the way, the tutorial by Reso Coder (<a href=\"https://www.youtube.com/channel/UCSIvrn68cUk8CS8MbtBmBkA\">YouTube</a> | <a href=\"https://resocoder.com/\">Website</a>) was absolutely invaluable.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/dependency-injection-and-testing/\">Dependency Injection and Testing</a></li>\n<li><a href=\"https://remelehane.dev/posts/unit-testing-your-http-multipartrequest-network-method/\">Unit Testing your http.MultipartRequest network method</a></li>\n</ul>"},{"url":"/posts/widget-testing-rendeflex-overflow/","relativePath":"posts/widget-testing-rendeflex-overflow.md","relativeDir":"posts","base":"widget-testing-rendeflex-overflow.md","name":"widget-testing-rendeflex-overflow","frontmatter":{"title":"Widget testing: Dealing with Renderflex Overflow Errors","stackbit_url_path":"posts/widget-testing-renderflex-overflow","published":false,"date":"2022-04-19T10:00:00.000Z","excerpt":"A simple solution to dealing with \"A RenderFlex overflowed by…\" in unit testing…","tags":["flutter","flutterweb","fluttermobile","flutterdevelopment"],"template":"post","thumb_img_path":"https://raw.githubusercontent.com/RemeJuan/remelehane/main/2022/07/upgit_20220728_1658994753.webp","cover_image":"https://raw.githubusercontent.com/RemeJuan/remelehane/main/2022/07/upgit_20220728_1658994753.webp","canonical_url":"https://remelehane.dev/posts/widget-testing-renderflex-overflow"},"html":"<p><img src=\"https://raw.githubusercontent.com/RemeJuan/remelehane/main/2022/07/upgit_20220728_1658994753.webp\" alt=\"artur-shamsutdinov-Gll-v69L8iA-unsplash\"></p>\n<p>We've all certainly seen it in our UI before, \"A RenderFlex overflowed by...\", and we all know this error means that our UI is painting beyond the bounds of our available real estate.</p>\n<p>When this is on the screen, it's very easy to fix, but what about when you are unit testing your widgets and you run into this?</p>\n<p>This is something I have run into a few times and for the most part, have just ignored it in tests, I condor widget testing a bit of a lower priority, for the most part, I believe their testing is best done as part of the journey or integration testing.</p>\n<p>That being said, there are times when business logic sits within a widget, and at that point, it can be valuable to spend the time to write an adequate unit test.</p>\n<p>In the past trying to hack around with the virtual UI has yielded some useable results, but when this error popped up more recently I went scouring around for a more reliable solution.</p>\n<p>Full disclosure, this was mostly the brainchild of <a href=\"https://twitter.com/remi_rousselet\"><strong>Remi Rousselet</strong></a>, I am just helping to share it to make other developers' lives that little bit easier.</p>\n<h2>The solution</h2>\n<p>I always keep a <code>test_helpers.dart</code> file for my unit testing, and this is my latest addition to that list of helpers:</p>\n<pre><code class=\"language-dart\">void ignoreOverflowErrors(\n  FlutterErrorDetails details, {\n  bool forceReport = false,\n}) {\n  bool ifIsOverflowError = false;\n  bool isUnableToLoadAsset = false;\n\n  // Detect overflow error.\n  var exception = details.exception;\n  if (exception is FlutterError) {\n    ifIsOverflowError = !exception.diagnostics.any(\n      (e) => e.value.toString().startsWith(\"A RenderFlex overflowed by\"),\n    );\n    isUnableToLoadAsset = !exception.diagnostics.any(\n      (e) => e.value.toString().startsWith(\"Unable to load asset\"),\n    );\n  }\n\n  // Ignore if is overflow error.\n  if (ifIsOverflowError || isUnableToLoadAsset) {\n    debugPrint('Ignored Error');\n  } else {\n    FlutterError.dumpErrorToConsole(details, forceReport: forceReport);\n  }\n}\n</code></pre>\n<p>I have updated it somewhat from the original solution, it was written pre-null-safety and I also added in the check for errors loading local assets.</p>\n<p>What this helper is doing is preventing the test runner from falling out when the test runs into one of these errors. I feel it quite silly that at the very least the RenderFlex issues are not an exception in tests,\nUnit tests exist to test logic, how well a widget paints within a headless environment should have no bearing on the test itself.</p>\n<p>To make use of this helper, you simply need to include it as part of your test with <code>FlutterError.onError = ignoreOverflowErrors;</code>, see the following example:</p>\n<pre><code class=\"language-dart\">void main() {\n  TestWidgetsFlutterBinding.ensureInitialized();\n\n  testWidgets('Widget Renders Correctly', (tester) async {\n    FlutterError.onError = ignoreOverflowErrors;\n\n    await tester.pumpApp(const PrimaryHeader(child: Text('Test')));\n\n    final titleFinder = find.text('Test');\n\n    expect(titleFinder, findsOneWidget);\n  });\n}\n</code></pre>\n<p>For it to work, it needs to be assigned in the specific test, it cannot be assigned in <code>setUp</code> or <code>setUpAll</code>.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<p>Wish to carry on with the topic of Unit Testing, take a look at:</p>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/up-your-testing-game/\">Flutter: Up your testing game</a></li>\n<li><a href=\"https://remelehane.dev/posts/automated-unit-testing-with-github-actions/\">Automated Unit Testing with GitHub Actions</a></li>\n</ul>\n<p>Photo by <a href=\"https://unsplash.com/es/@roketpik?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\">Artur Shamsutdinov</a> on <a href=\"https://unsplash.com/s/photos/flutter?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\">Unsplash</a></p>"},{"url":"/posts/widget-testing-passed-in-function/","relativePath":"posts/widget-testing-passed-in-function.md","relativeDir":"posts","base":"widget-testing-passed-in-function.md","name":"widget-testing-passed-in-function","frontmatter":{"title":"Widget testing passed in function","stackbit_url_path":"posts/widget-testing-passed-in-function","date":"2020-07-10T10:31:23.000Z","excerpt":"In this post, we going to go through how, at least in my opinion, one would go","tags":["mockito","widgettesting","flutter","unittesting"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*4ezoav544ciIcSAa67ci1w.png"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*4ezoav544ciIcSAa67ci1w.png\" alt=\"Mokito logo image\"></p>\n<p>In this post, we going to go through how, at least in my opinion, one would go about testing that a function is called within a widget when that function is one of the Widgets arguments.</p>\n<p>Take the following overly simplified example…</p>\n<pre><code class=\"language-dart\">class SampleWidget extends StatelessWidget {\n  final Function(String fileId) onDelete;\n  final String fileId;\n\n  const SampleWidget({\n    @required this.onDelete,\n    @required this.fileId,\n    foundation.Key key,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    throw FlatButton(\n      onPressed: () => onDelete(fileId),\n      child: const Text('Delete'),\n    );\n  }\n}\n</code></pre>\n<p>As you can see we have a simple “reusable” widget that takes a\n<code>fileId</code>\nand a\n<code>onDelete</code>\nfunction.</p>\n<p>Testing this in the implementing widget is quite simple as you would simply verify the resulting function is called.</p>\n<p>However, if you wished to test this widget in isolation, there are a few more steps required.</p>\n<p>In our current project, we added a very simple helper class:</p>\n<pre><code class=\"language-dart\">class TestCallbackFunctions {\n  void onFileDelete(String fileId) => null;\n}\n</code></pre>\n<p>This class will then hold simply “mock” functions that we can pass into reusable widgets to test it completely.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>"},{"url":"/posts/widget-testing-when-your-app-needs-access-to-directories/","relativePath":"posts/widget-testing-when-your-app-needs-access-to-directories.md","relativeDir":"posts","base":"widget-testing-when-your-app-needs-access-to-directories.md","name":"widget-testing-when-your-app-needs-access-to-directories","frontmatter":{"title":"Widget testing when your app needs access to directories.","stackbit_url_path":"posts/widget-testing-when-your-app-needs-access-to-directories","date":"2020-07-27T07:16:01.000Z","excerpt":"Many times in an application you would have a need to store files, temporarily","tags":["widgettesting","flutter","unittesting"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*bnm8sRPmozmm0_tgnN97WQ.png"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@master/uPic/1*bnm8sRPmozmm0_tgnN97WQ.png\" alt=\"Image of simulated mobile phones\"></p>\n<p>Many times in an application you would have a need to store files, temporarily or even permanently. For this, you are probably going to be using <a href=\"https://pub.dev/packages/path_provider\">path_provider</a>, however, those methods are not going to simply work when running a widget test.</p>\n<p>Thankfully it is quite simply to be able to mock that and provide your own path for use during testing.</p>\n<p>There is quite a simple way to do this and it is done with MethodChannel</p>\n<pre><code class=\"language-dart\">const TEST\\_MOCK\\_STORAGE = './test/fixtures/core';\n\nconst channel = MethodChannel(\n  'plugins.flutter.io/path\\_provider',\n);\nchannel.setMockMethodCallHandler((MethodCall methodCall) async {\n  return TEST\\_MOCK\\_STORAGE;\n});\n</code></pre>\n<p>You simply need to provide the channel you wish to mock, in this case, it is pluggins.flutter.io/path_provider and use the setMockMethodCallHandler where you can either provide specific calls and values to return or in this case provide a catch-all response, in this case, what will happen is any request to path provider will return the provided path.</p>\n<p>So whether you are getApplicationDocumentssDirectory or getExternalStorageDirectory the result is going to be ./test/fixtures/core.</p>\n<p>An important thing to note is that this MethodChannel call needs to be run in each test that will be accessing the path, if it’s only a single test then it is fine to provide that directly inside the main().</p>\n<p>In our case, however, there is quite a bit of the application that relies on accessing the Documents Directory. For that reason, we have added that method into a setUpTest function that we pass into the setUp((){ }) part of the widget test.</p>\n<pre><code class=\"language-dart\">void main() {\n  setUp(() async {\n    await setupTest();\n  });\n\n  testWidgets(\n    'Should render [SampleWidget]',\n    (WidgetTester tester) async {\n      await tester.pumpWidget(SampleWidget());\n\n      await tester.pumpAndSettle();\n    },\n  );\n}\n</code></pre>\n<p>If you are needing access to files, ensure they exist in the path you have provided as the mock result path, after that you should have no problems testing any Widgetsthat need access to those files.</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>"},{"url":"/posts/working-from-home-works-for-me/","relativePath":"posts/working-from-home-works-for-me.md","relativeDir":"posts","base":"working-from-home-works-for-me.md","name":"working-from-home-works-for-me","frontmatter":{"title":"Working from home works for me…","stackbit_url_path":"posts/working-from-home-works-for-me","date":"2021-06-01T14:53:42.000Z","excerpt":"A little bit about why working from home works for me.","tags":["worklifebalance","work","office","setup"],"template":"post","thumb_img_path":"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/1*L0a5Si8dT5ACYGpfh6Whzw-20210703161824504.jpeg"},"html":"<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/1*L0a5Si8dT5ACYGpfh6Whzw-20210703161824504.jpeg\"><figcaption>My main desk setup…</figcaption></p>\n<h3>How it all started…</h3>\n<p>In the last year and a bit, many of us have changed a lot in very drastic ways for some.</p>\n<p>Not everyone can, or even enjoys working from home, either there are too many distractions, or they are unable to set aside a space to work, and/or even have trouble maintaining their previous work/life balance.</p>\n<p>For me it was actually quite easy, maybe it’s because I can be a less social person, maybe it’s because in general I have been a loner much of my life and tend to prefer my own company. While I did enjoy the banter and occasional distractions that came from office life, a year later I am finding I am still not missing it.</p>\n<p>For me it started just before my country, South Africa, went into lockdown. The Sunday prior we got emails, slacks and even WhatsApps from the CEO informing us that the office is being closed for safety reasons, we need to go fetch anything we need from the office and avoid it unless it was essential. A few days later, Thursday, we went into our lockdown which was meant to last for 3 weeks and ended up being 5.</p>\n<p>The first week or 2 was tough, but I feel that in my specific case it was not the isolation from work, as to help mitigate we setup discord channels to maintain the office background noise, we already had a remote-like culture as many of us worked from home 2 days a week in general so we were all used to a certain level of communication disconnection.</p>\n<p>For me I feel that it was the general life that I lost touch with, I am a pretty active person walking my dog for 45–60 minutes each day, running or cycling 5–6 times a week and in practically a single day I ended up in a form of “prison” is limited to my backyard, which was not all that big. Honestly once I got past my own short term bout of crazy, I felt mostly for my dog, at least I understood what was going on, why I was trapped in my own home. She had gone for walks daily for years by that point, meeting with other dogs, running around and being social, she’s way more social than I am. LOL.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/1*USWBRF4ONjmCjlafkkJEYw.jpeg\"><figcaption>View from my “Office”</figcaption></p>\n<h3>Adapting to the new normal…</h3>\n<p>For me, and pretty much every member of my team, the WFH just worked, we had many ad-hoc calls and discussions throughout the days and we all felt that for us, that was enough and that from a work standpoint we were all being more productive and most certainly during the initial 5 weeks put in probably an unhealthy amount of overtime, but when you practically have nothing else to do…</p>\n<p>I put an end to that once we got out on the other side, once we had regained some freedom of movement, but even discussing with my boss, the CTO at the time, we both agreed that the office, at least for the developers was no benefit and we had no intention of expecting any form of return to “normal”.</p>\n<p>At that time, I was still working in my bedroom, a few hours each day even from bed, which for me had no impact on my productivity, almost everything you read tells you that for effective WFH you need to maintain schedules, get dressed, take breaks and try and maintain as much of the “office” lifestyle as you can. Clearly, I do not fit into that bracket, I was productive in bed, in my pyjamas while having breakfast, after maybe 2 hours I would move to my standing desk and carry on there. All of this worked for me, and it probably would not for everyone else, and I worked like this for months, about 9 to be precise.</p>\n<p>While I personally never got to a point where I felt I was unable to maintain a work/life balance, as I started early in the day, like 5/6 am, earlier than I would have at the office, took maybe a longer lunch and still finished off at 3/3:30 in the afternoon and still went for my run or ride and walked my dog.</p>\n<p>In December last year, I both realised and decided that this whole WFH thing was not going to change, our office was very optional, I went at most once a month and every recruiter who mailed me get an initial response of “Is it remote?”, I had no plans on ever going back to an office and for this reason, I decided it was time to buy a house, purely for the 3rd room which would be set up for an office, abandoned my plans to leave the country realising that I do not need to be in another country to work for a company in that country, the world was adopting a more remote working philosophy.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/1*WFNfAHNP4dwgllzs29A3nw.jpeg\"><figcaption>Some artwork, memories and hobbies. I dabble in lockpicking…</figcaption></p>\n<h3>Going forward…</h3>\n<p>Today I have that house and that office which you can glimpse in the leading image. It’s set up specifically for work and even though I never felt the need for the hard separation, I am pretty sure it would have eventually come to that, hence the decision to buy.</p>\n<p>The Mac pretty much never leaves the office, unless I head off to a coffee shop to work from there. It is set up specifically for how I like to work.</p>\n<p>I have both a seated and standing desk to work from which I alternate between. The seated desk has a high-back chair and the standing desk has a padded bar chair with a short back in case I actually need to sit while I am there. Having 2 desks also allowed for the option for one of my team members to work from my office, one has taken me up on it already and worked from here instead of the office as well, there are fewer people in my office and I am anti-social so probably a safe person to be around in a pandemic.</p>\n<p>There are also debugging tools on the desk, you may have noticed the rubber duck and the lego Pandalf, that way there is always the 3rd opinion if ducky and I disagree on something.</p>\n<p>I have a wireless charger and a mini cabled charging station with braided cables because they just look nicer and work better with my rubber cable holder.</p>\n<p>I have a desk-pad, for no other reason than it looks nice and I have 2 echo minis set up as a stereo pair for working music, being alone I saw no reason to keep wearing my noise-cancelling headphones, which were never comfortable for long stretches anyway.</p>\n<p>As for decoration, the 2 red spring you may have noticed are old coil springs from my mountain bike and then mostly movie posters and other random nick-nacks decorating the office.</p>\n<p>Then let's not forget the view which you may have seen higher up in this post, the house did come with a very nice front yard, with a large tree outside my window, great for summer and keeping the sun from overheating the room, less so for winter, gets chilly. There is also the water feature/fish pond and I can even sometimes see the fish swimming around if they on the one side of the pod.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/RemeJuan/remelehane@main/uPic/1*K6uiKlBIYkO_nXMU5_fLlw.jpeg\"><figcaption>The standing desk, with more plushies, I like plushies…</figcaption></p>\n<h3>Final thoughts…</h3>\n<p>I said it before, but working from home is not for everyone, if you one of the lucky ones that not only has the option but also the ability and maybe even personality to enjoy it, then awesome. At least when it comes to development, I cannot speak for other industries, the job really is a passion one, for many of us (I hope) we are getting paid to do what we love and maybe that makes the WFH thing easier, let's be honest, many of us would probably be coding anyway.</p>\n<p>Unless I have a great idea, something important I want to do or learn, I avoid even opening the Mac when I am not working, as much as I enjoy coding, that is a balance boundary I set for myself many years ago and maybe that made it easier for me to maintain the work/life balance when work and life merged into the same building.</p>\n<p>If you are working from home, make the most of it, make it your own space, something that you feel comfortable and productive in, maybe toss in a Happy Sack for those long meetings where you won’t be talking and can leave your camera off, just try and not nap…</p>\n<hr>\n<p>I hope you found this interesting, and if you have any questions, comments, or improvements, feel free to drop a comment. Enjoy your Flutter development journey :D</p>\n<p>If you enjoyed it, a like would be awesome, and if you really liked it, a <a href=\"https://www.buymeacoffee.com/remelehane\">cup of coffee</a> would be great.</p>\n<p>Thanks for reading.</p>\n<hr>\n<ul>\n<li><a href=\"https://remelehane.dev/posts/react-to-flutter-one-developers-journey-part-1/\">React to Flutter: One Developers Journey — Part 1</a></li>\n<li><a href=\"https://remelehane.dev/posts/developing-on-an-m1-mac-flutter/\">Developing on an M1 Mac (Flutter)</a></li>\n</ul>"}],"site":{"siteMetadata":{"layout_style":"overflow","palette":"blue","header":{"title":"Reme Le Hane","tagline":"Developer, Cyclist, Runner. #Flutter","profile_img":"https://res.cloudinary.com/practicaldev/image/fetch/s--qlE0Cz0h--/c_fill,f_auto,fl_progressive,h_320,q_auto,w_320/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/37853/4ac99855-4657-4d86-8f6e-3c972c4060be.jpeg","profile_img_alt":"Author avatar","background":"dark","has_nav":true,"nav_links":[{"label":"Home","url":"/","style":"link"},{"label":"Blog","url":"/blog/","style":"link"},{"label":"Applications","url":"/apps/","style":"link"},{"label":"Google Dev Conf","url":"/gdc/","style":"link"},{"label":"About","url":"/about/","style":"link"}],"has_social":true,"social_links":[{"label":"Twitter","url":"https://twitter.com/RemeJuan","style":"icon","icon_class":"twitter","new_window":true},{"label":"GitHub","url":"https://github.com/RemeJuan","style":"icon","icon_class":"github","new_window":true},{"label":"DEV","url":"https://dev.to/remejuan","style":"icon","icon_class":"dev","new_window":true},{"label":"LinkedIn","url":"http://za.linkedin.com/in/remelehane","style":"icon","icon_class":"linkedin","new_window":true}]},"footer":{"content":"&copy; Reme Le Hane. All rights reserved. <a rel=\"me\" href=\"https://fosstodon.org/@RemeJuan\">Mastodon</a>"},"title":"Reme Le Hane | Flutter Developer"},"pathPrefix":"","data":{"data":{"author":{"name":"Reme Le Hane","avatar":"https://res.cloudinary.com/practicaldev/image/fetch/s--UEGRiZD9--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/37853/4ac99855-4657-4d86-8f6e-3c972c4060be.jpeg"},"social":{"devto":{"username":"remejuan"},"twitter":{"username":"RemeJuan"},"github":{"username":"RemeJuan"}}}}},"menus":{}}},"staticQueryHashes":[]}