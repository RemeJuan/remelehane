{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/templates/post.js"],"names":["description","image","title","author","Helmet","meta","property","content","name","Post","render","twitter","this","props","find","element","label","url","split","pop","SEO","withPrefix","pathname","location","className","htmlToReact","src","alt","dateTime","moment","strftime","React","Component"],"mappings":"mPAGe,cAA4C,IAAzCA,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OACzC,OACI,kBAACC,EAAA,OAAD,CACIC,KAAM,CACF,CACIC,SAAS,WACTC,QAASL,GAEb,CACII,SAAS,iBACTC,QAASP,GAEb,CACIM,SAAS,UACTC,QAAQ,WAEZ,CACIC,KAAK,kBACLD,QAASJ,GAEb,CACIK,KAAK,gBACLD,QAASL,GAEb,CACIM,KAAK,sBACLD,QAASP,GAEb,CACIM,SAAU,WACVC,QAASN,GAEb,CACIO,KAAM,eACND,QAAS,2B,YClBRE,E,kGACjBC,OAAA,WACI,IAAIC,EAAU,GAEV,IAAMC,KAAKC,MAAO,oDAClB,IAAMD,KAAKC,MAAO,uDAMlBF,EACI,IALe,IACfC,KAAKC,MACL,qDAKKC,MAAK,SAACC,GAAD,MAA+B,YAAlBA,EAAQC,SAC1BC,IAAIC,MAAM,KACVC,OAEb,OACI,kBAAC,IAAWP,KAAKC,MACb,kBAACO,EAAD,CACIlB,MAAO,IAAMU,KAAKC,MAAO,iCACzBb,YAAa,IAAMY,KAAKC,MAAO,mCAC/BZ,MAAOoB,YAAW,IAAMT,KAAKC,MAAO,2CACpCS,SAAUV,KAAKC,MAAMU,SAASD,SAC9BnB,OAAQQ,IAEd,6BAASa,UAAU,kBACjB,4BAAQA,UAAU,wBAChB,wBAAIA,UAAU,wBAAwB,IAAMZ,KAAKC,MAAO,gCAAiC,OACxF,IAAMD,KAAKC,MAAO,mCAAoC,OACvD,yBAAKW,UAAU,iBACZC,YAAY,IAAMb,KAAKC,MAAO,mCAAoC,SAItE,IAAMD,KAAKC,MAAO,2CAA4C,OAC/D,yBAAKW,UAAU,cACb,yBAAKE,IAAKL,YAAW,IAAMT,KAAKC,MAAO,2CAA4C,OAAQc,IAAK,IAAMf,KAAKC,MAAO,0CAA2C,SAG/J,yBAAKW,UAAU,yBACZC,YAAY,IAAMb,KAAKC,MAAO,mBAAoB,QAErD,4BAAQW,UAAU,sBAChB,0BAAMA,UAAU,YACdI,SAAUC,IAAO,IAAMjB,KAAKC,MAAO,+BAAgC,OAAOiB,SAAS,mBAAoBD,IAAO,IAAMjB,KAAKC,MAAO,+BAAgC,OAAOiB,SAAS,sB,GA9ClKC,IAAMC","file":"component---src-templates-post-js-333c90f4f663ac82e36c.js","sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nexport default ({ description, image, title, author }) => {\n    return (\n        <Helmet\n            meta={[\n                {\n                    property: `og:title`,\n                    content: title,\n                },\n                {\n                    property: `og:description`,\n                    content: description,\n                },\n                {\n                    property: `og:type`,\n                    content: `website`,\n                },\n                {\n                    name: `twitter:creator`,\n                    content: author,\n                },\n                {\n                    name: `twitter:title`,\n                    content: title,\n                },\n                {\n                    name: `twitter:description`,\n                    content: description,\n                },\n                {\n                    property: \"og:image\",\n                    content: image,\n                },\n                {\n                    name: \"twitter:card\",\n                    content: \"summary_large_image\",\n                },\n            ]}\n        />\n    );\n}\n","import React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment-strftime';\nimport {graphql} from 'gatsby';\n\nimport {Layout} from '../components/index';\nimport SEO from \"../components/SEO\";\nimport {htmlToReact, withPrefix} from '../utils';\n\n// this minimal GraphQL query ensures that when 'gatsby develop' is running,\n// any changes to content files are reflected in browser\nexport const query = graphql`\n  query($url: String) {\n    sitePage(path: {eq: $url}) {\n      id\n    }\n  }\n`;\n\nexport default class Post extends React.Component {\n    render() {\n        let twitter = '';\n        if (\n            _.get(this.props, \"pageContext.site.siteMetadata.footer.has_social\") &&\n            _.get(this.props, \"pageContext.site.siteMetadata.footer.social_links\")\n        ) {\n            let social_links = _.get(\n                this.props,\n                \"pageContext.site.siteMetadata.footer.social_links\"\n            );\n            twitter =\n                \"@\" +\n                social_links\n                    .find((element) => element.label === \"Twitter\")\n                    .url.split(\"/\")\n                    .pop();\n        }\n        return (\n            <Layout {...this.props}>\n                <SEO\n                    title={_.get(this.props, \"pageContext.frontmatter.title\")}\n                    description={_.get(this.props, \"pageContext.frontmatter.excerpt\")}\n                    image={withPrefix(_.get(this.props, \"pageContext.frontmatter.thumb_img_path\"))}\n                    pathname={this.props.location.pathname}\n                    author={twitter}\n                />\n              <article className=\"post post-full\">\n                <header className=\"post-header inner-sm\">\n                  <h1 className=\"post-title underline\">{_.get(this.props, 'pageContext.frontmatter.title', null)}</h1>\n                  {_.get(this.props, 'pageContext.frontmatter.subtitle', null) && (\n                  <div className=\"post-subtitle\">\n                    {htmlToReact(_.get(this.props, 'pageContext.frontmatter.subtitle', null))}\n                  </div>\n                  )}\n                </header>\n                {_.get(this.props, 'pageContext.frontmatter.content_img_path', null) && (\n                <div className=\"post-image\">\n                  <img src={withPrefix(_.get(this.props, 'pageContext.frontmatter.content_img_path', null))} alt={_.get(this.props, 'pageContext.frontmatter.content_img_alt', null)} />\n                </div>\n                )}\n                <div className=\"post-content inner-sm\">\n                  {htmlToReact(_.get(this.props, 'pageContext.html', null))}\n                </div>\n                <footer className=\"post-meta inner-sm\">\n                  <time className=\"published\"\n                    dateTime={moment(_.get(this.props, 'pageContext.frontmatter.date', null)).strftime('%Y-%m-%d %H:%M')}>{moment(_.get(this.props, 'pageContext.frontmatter.date', null)).strftime('%A, %B %e, %Y')}</time>\n                </footer>\n              </article>\n            </Layout>\n        );\n    }\n}\n"],"sourceRoot":""}